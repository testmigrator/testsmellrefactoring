f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();
        BoxAndWhiskerRenderer r2 = new BoxAndWhiskerRenderer();
        assertEquals(r1, r2);
        int h1 = r1.hashCode();
        int h2 = r2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette']

Refactor#2
@Test
public void testHashcode() {
    BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();
    BoxAndWhiskerRenderer r2 = new BoxAndWhiskerRenderer();
    assertEquals("Expected r1 to be equal to r2", r1, r2);
    int h1 = r1.hashCode();
    int h2 = r2.hashCode();
    assertEquals("Expected hash codes of r1 and r2 to be equal", h1, h2);
}

Input#3
 @Test
    public void testCloning() throws CloneNotSupportedException {
        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();
        BoxAndWhiskerRenderer r2 = CloneUtils.clone(r1);
        assertNotSame(r1, r2);
        assertSame(r1.getClass(), r2.getClass());
        assertEquals(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing']

Refactor#3
@Test
public void testCloning() {
    assertDoesNotThrow(() -> {
        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();
        BoxAndWhiskerRenderer r2 = CloneUtils.clone(r1);
        assertNotSame(r1, r2, "The cloned object should not be the same instance as the original");
        assertSame(r1.getClass(), r2.getClass(), "The cloned object should be of the same class as the original");
        assertEquals(r1, r2, "The cloned object should be equal to the original");
        TestUtils.checkIndependence(r1, r2, "The cloned object should be independent of the original");
    }, "Unexpected exception occurred during the test");
}


Input#4
@Test
    public void testDrawWithNullInfo() {
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 0.0, 4.0, 0.5,
                    4.5, -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#4
@Test
public void testDrawWithNullInfo() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
            = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 0.0, 4.0, 0.5,
                4.5, -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                null);
    }, "No exception should be thrown.");
}

Input#5
@Test
    public void testBug1572478Vertical() {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>() {

            @Override
            public Number getQ1Value(int row, int column) {
                return null;
            }

            @Override
            public Number getQ1Value(String rowKey, String columnKey) {
                return null;
            }
        };
        List<Double> values = new ArrayList<>();
        values.add(1.0);
        values.add(10.0);
        values.add(100.0);
        dataset.add(values, "row", "column");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
                new NumberAxis("y"), new BoxAndWhiskerRenderer());
        JFreeChart chart = new JFreeChart(plot);
        boolean success;

        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    new ChartRenderingInfo());
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
            success = false;
        }

        assertTrue(success);

    }
Smell List: ['Exception_Catching_Throwing']

Refactor#5
@Test
public void testBug1572478Vertical() {
    DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
            = new DefaultBoxAndWhiskerCategoryDataset<>() {

        @Override
        public Number getQ1Value(int row, int column) {
            return null;
        }

        @Override
        public Number getQ1Value(String rowKey, String columnKey) {
            return null;
        }
    };
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(10.0);
    values.add(100.0);
    dataset.add(values, "row", "column");
    CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
            new NumberAxis("y"), new BoxAndWhiskerRenderer());
    JFreeChart chart = new JFreeChart(plot);

    assertDoesNotThrow(() -> {
        BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, new ChartRenderingInfo());
        g2.dispose();
    });
}

Input#6
 @Test
    public void testBug1572478Horizontal() {
        var dataset = new DefaultBoxAndWhiskerCategoryDataset<String, String>() {

            @Override
            public Number getQ1Value(int row, int column) {
                return null;
            }

            @Override
            public Number getQ1Value(String rowKey, String columnKey) {
                return null;
            }
        };
        List<Double> values = new ArrayList<>();
        values.add(1.0);
        values.add(10.0);
        values.add(100.0);
        dataset.add(values, "row", "column");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
                new NumberAxis("y"), new BoxAndWhiskerRenderer());
        plot.setOrientation(PlotOrientation.HORIZONTAL);
        JFreeChart chart = new JFreeChart(plot);
        boolean success;

        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    new ChartRenderingInfo());
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
            success = false;
        }

        assertTrue(success);

    }
Smell List: ['Exception_Catching_Throwing']
Refactor#6
@Test
public void testBug1572478Horizontal() {
    var dataset = new DefaultBoxAndWhiskerCategoryDataset<String, String>() {

        @Override
        public Number getQ1Value(int row, int column) {
            return null;
        }

        @Override
        public Number getQ1Value(String rowKey, String columnKey) {
            return null;
        }
    };
    List<Double> values = new ArrayList<>();
    values.add(1.0);
    values.add(10.0);
    values.add(100.0);
    dataset.add(values, "row", "column");
    CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
            new NumberAxis("y"), new BoxAndWhiskerRenderer());
    plot.setOrientation(PlotOrientation.HORIZONTAL);
    JFreeChart chart = new JFreeChart(plot);

    assertDoesNotThrow(() -> {
        BufferedImage image = new BufferedImage(200, 100, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, new ChartRenderingInfo());
        g2.dispose();
    });
}

Input#7
@Test
    public void testGetLegendItem() {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        List<Double> values = new ArrayList<>();
        values.add(1.10);
        values.add(1.45);
        values.add(1.33);
        values.add(1.23);
        dataset.add(values, "R1", "C1");
        BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
                new NumberAxis("y"), r);
        /*JFreeChart chart =*/ new JFreeChart(plot);
        LegendItem li = r.getLegendItem(0, 0);
        assertNotNull(li);
        r.setSeriesVisibleInLegend(0, Boolean.FALSE);
        li = r.getLegendItem(0, 0);
        assertNull(li);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#7

private DefaultBoxAndWhiskerCategoryDataset<String, String> setupDataset() {
    DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
            = new DefaultBoxAndWhiskerCategoryDataset<>();
    List<Double> values = new ArrayList<>();
    values.add(1.10);
    values.add(1.45);
    values.add(1.33);
    values.add(1.23);
    dataset.add(values, "R1", "C1");
    return dataset;
}

private BoxAndWhiskerRenderer setupRendererWithPlot(DefaultBoxAndWhiskerCategoryDataset<String, String> dataset) {
    BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();
    CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
            new NumberAxis("y"), r);
    /*JFreeChart chart =*/ new JFreeChart(plot);
    return r;
}

@Test
public void testGetLegendItem_LegendItemNotNull() {
    DefaultBoxAndWhiskerCategoryDataset<String, String> dataset = setupDataset();
    BoxAndWhiskerRenderer r = setupRendererWithPlot(dataset);
    LegendItem li = r.getLegendItem(0, 0);
    assertNotNull(li, "The legend item should not be null when the series is visible in the legend.");
}

@Test
public void testGetLegendItem_LegendItemNullWhenHidden() {
    DefaultBoxAndWhiskerCategoryDataset<String, String> dataset = setupDataset();
    BoxAndWhiskerRenderer r = setupRendererWithPlot(dataset);
    r.setSeriesVisibleInLegend(0, Boolean.FALSE);
    LegendItem li = r.getLegendItem(0, 0);
    assertNull(li, "The legend item should be null when the series is hidden in the legend.");
}


Input#8
@Test
    public void testGetLegendItemSeriesIndex() {
        DefaultCategoryDataset<String, String> dataset0 = new DefaultCategoryDataset<>();
        dataset0.addValue(21.0, "R1", "C1");
        dataset0.addValue(22.0, "R2", "C1");
        DefaultCategoryDataset<String, String> dataset1 = new DefaultCategoryDataset<>();
        dataset1.addValue(23.0, "R3", "C1");
        dataset1.addValue(24.0, "R4", "C1");
        dataset1.addValue(25.0, "R5", "C1");
        BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset0, new CategoryAxis("x"),
                new NumberAxis("y"), r);
        plot.setDataset(1, dataset1);
        /*JFreeChart chart =*/ new JFreeChart(plot);
        LegendItem li = r.getLegendItem(1, 2);
        assertEquals("R5", li.getLabel());
        assertEquals(1, li.getDatasetIndex());
        assertEquals(2, li.getSeriesIndex());
    }
Smell List: ['Assertion_Roulette', 'Magic_Number_Test']

Refactor#8

@Test
public void testGetLegendItemSeriesIndex() {
    DefaultCategoryDataset<String, String> dataset0 = new DefaultCategoryDataset<>();
    dataset0.addValue(21.0, "R1", "C1");
    dataset0.addValue(22.0, "R2", "C1");
    DefaultCategoryDataset<String, String> dataset1 = new DefaultCategoryDataset<>();
    dataset1.addValue(23.0, "R3", "C1");
    dataset1.addValue(24.0, "R4", "C1");
    dataset1.addValue(25.0, "R5", "C1");
    BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();
    CategoryPlot<String, String> plot = new CategoryPlot<>(dataset0, new CategoryAxis("x"),
            new NumberAxis("y"), r);
    plot.setDataset(1, dataset1);
    /*JFreeChart chart =*/ new JFreeChart(plot);
    LegendItem li = r.getLegendItem(1, 2);

    String expectedLabel = "R5";
    int expectedDatasetIndex = 1;
    int expectedSeriesIndex = 2;

    assertEquals(expectedLabel, li.getLabel(), "The label of the legend item should match the expected value.");
    assertEquals(expectedDatasetIndex, li.getDatasetIndex(), "The dataset index of the legend item should match the expected value.");
    assertEquals(expectedSeriesIndex, li.getSeriesIndex(), "The series index of the legend item should match the expected value.");
}


Input#9
@Test
    public void testDrawWithNullMean() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(null, 2.0, 0.0, 4.0, 0.5, 4.5,
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']
Refactor#9

@Test
public void testDrawWithNullMean() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(null, 2.0, 0.0, 4.0, 0.5, 4.5,
                -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                info);
    });

Input#10
@Test
    public void testDrawWithNullMedian() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, null, 0.0, 4.0, 0.5, 4.5,
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#10

@Test
public void testDrawWithNullMedian() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, null, 0.0, 4.0, 0.5, 4.5,
                -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                info);
    }, "Unexpected exception occurred during the test");
}

Input#11
@Test
    public void testDrawWithNullQ1() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, null, 4.0, 0.5, 4.5,
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#11

@Test
public void testDrawWithNullQ1() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, null, 4.0, 0.5, 4.5,
                -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        chart.createBufferedImage(300, 200, info);
    });
}

Input#12
@Test
    public void testDrawWithNullQ3() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, null, 0.5, 4.5,
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#12

@Test
public void testDrawWithNullQ3() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, null, 0.5, 4.5,
                -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                info);
    });
}


Input#13
@Test
    public void testDrawWithNullMinRegular() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, null, 4.5,
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#13

@Test
public void testDrawWithNullMinRegular() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, null, 4.5,
                -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                info);
    });
}


Input#14
@Test
    public void testDrawWithNullMaxRegular() {
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 0.5, null,
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
        }
        catch (Exception e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#14

@Test
public void testDrawWithNullMaxRegular() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 0.5, null,
                -0.5, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                info);
    }, "Unexpected exception occurred during the test");
}

Input#15
@Test
    public void testDrawWithNullMinOutlier() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 0.5, 4.5,
                    null, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#15

@Test
public void testDrawWithNullMinOutlier() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 0.5, 4.5,
                null, 5.5, null), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        chart.createBufferedImage(300, 200, info);
    });
}


Input#16
@Test
    public void testDrawWithNullMaxOutlier() {
        boolean success;
        try {
            DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                    = new DefaultBoxAndWhiskerCategoryDataset<>();
            dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 0.5, 4.5, -0.5,
                    null, new ArrayList<>()), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }
Smell List: ['Exception_Catching_Throwing']

Refactor#16

@Test
public void testDrawWithNullMaxOutlier() {
    assertDoesNotThrow(() -> {
        DefaultBoxAndWhiskerCategoryDataset<String, String> dataset
                = new DefaultBoxAndWhiskerCategoryDataset<>();
        dataset.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 0.5, 4.5, -0.5,
                null, new ArrayList<>()), "S1", "C1");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new BoxAndWhiskerRenderer());
        ChartRenderingInfo info = new ChartRenderingInfo();
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                info);
    });
}


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

