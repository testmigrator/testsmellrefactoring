f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0,
                3.0, 4.0), Color.BLACK);
        LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0,
                3.0, 4.0), Color.BLACK);
        assertEquals(g1, g2);
        int h1 = g1.hashCode();
        int h2 = g2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#2

private void setupTestHashcode() {
    LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.BLACK);
    LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.BLACK);
}

@Test
public void testHashcode_Equality() {
    setupTestHashcode();
    LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.BLACK);
    LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.BLACK);
    assertEquals(g1, g2, "g1 and g2 should be equal");
}

@Test
public void testHashcode_HashCodeEquality() {
    setupTestHashcode();
    LegendGraphic g1 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.BLACK);
    LegendGraphic g2 = new LegendGraphic(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), Color.BLACK);
    int h1 = g1.hashCode();
    int h2 = g2.hashCode();
    assertEquals(h1, h2, "Hash codes of g1 and g2 should be equal");
}



Input#3
@Test
    public void testCloning() throws CloneNotSupportedException {
        Rectangle r = new Rectangle(1, 2, 3, 4);
        LegendGraphic g1 = new LegendGraphic(r, Color.BLACK);
        LegendGraphic g2 = CloneUtils.clone(g1);
        assertNotSame(g1, g2);
        assertSame(g1.getClass(), g2.getClass());
        assertEquals(g1, g2);

        // check independence
        r.setBounds(4, 3, 2, 1);
        assertNotEquals(g1, g2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing']
Refactor#3

@Test
public void testCloning() {
    Rectangle r = new Rectangle(1, 2, 3, 4);
    LegendGraphic g1 = new LegendGraphic(r, Color.BLACK);
    LegendGraphic g2 = CloneUtils.clone(g1);

    assertNotSame(g1, g2, "g1 and g2 should not be the same object");
    assertSame(g1.getClass(), g2.getClass(), "g1 and g2 should be instances of the same class");
    assertEquals(g1, g2, "g1 and g2 should be equal");

    // check independence
    r.setBounds(4, 3, 2, 1);
    assertNotEquals(g1, g2, "g1 and g2 should not be equal after modifying the rectangle of g1");
}


Input#4
 @Test
    public void testCloning2() throws CloneNotSupportedException {
        Rectangle r = new Rectangle(1, 2, 3, 4);
        LegendGraphic g1 = new LegendGraphic(r, Color.BLACK);
        Line2D l = new Line2D.Double(1.0, 2.0, 3.0, 4.0);
        g1.setLine(l);
        LegendGraphic g2 = CloneUtils.clone(g1);
        assertNotSame(g1, g2);
        assertSame(g1.getClass(), g2.getClass());
        assertEquals(g1, g2);

        // check independence
        l.setLine(4.0, 3.0, 2.0, 1.0);
        assertNotEquals(g1, g2);

    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Refactor#4

    private LegendGraphic g1;
    private Rectangle r;
    private Line2D l;

    @BeforeEach
    void setUp() {
        r = new Rectangle(1, 2, 3, 4);
        g1 = new LegendGraphic(r, Color.BLACK);
        l = new Line2D.Double(1.0, 2.0, 3.0, 4.0);
        g1.setLine(l);
    }

    @Test
    void testCloning() {
        assertDoesNotThrow(() -> {
            LegendGraphic g2 = CloneUtils.clone(g1);
            assertNotSame(g1, g2, "g1 and g2 should be different instances");
            assertSame(g1.getClass(), g2.getClass(), "g1 and g2 should be of the same class");
            assertEquals(g1, g2, "g1 and g2 should be equal");
        }, "Unexpected exception occurred during cloning");

        // check independence
        l.setLine(4.0, 3.0, 2.0, 1.0);
        assertNotEquals(g1, g2, "g1 and g2 should not be equal after modifying the line in g1");
    }

Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

