f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        GradientBarPainter p1 = new GradientBarPainter(0.1, 0.2, 0.3);
        GradientBarPainter p2 = new GradientBarPainter(0.1, 0.2, 0.3);
        assertEquals(p1, p2);
        int h1 = p1.hashCode();
        int h2 = p2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#2

private void setupTestHashcode() {
     p1 = new GradientBarPainter(0.1, 0.2, 0.3);
    GradientBarPainter p2 = new GradientBarPainter(0.1, 0.2, 0.3);
}

@Test
public void testHashcode_Equality() {
    GradientBarPainter p1, p2;
    setupTestHashcode();
    p1 = new GradientBarPainter(0.1, 0.2, 0.3);
    p2 = new GradientBarPainter(0.1, 0.2, 0.3);
    assertEquals(p1, p2, "Objects should be equal");
}

@Test
public void testHashcode_HashCodeEquality() {
    GradientBarPainter p1, p2;
    setupTestHashcode();
    p1 = new GradientBarPainter(0.1, 0.2, 0.3);
    p2 = new GradientBarPainter(0.1, 0.2, 0.3);
    int h1 = p1.hashCode();
    int h2 = p2.hashCode();
    assertEquals(h1, h2, "Hash codes should be equal");
}


Input#3
 @Test
    public void testCloning() {
        GradientBarPainter p1 = new GradientBarPainter(0.1, 0.2, 0.3);
        assertFalse(p1 instanceof Cloneable);
        assertFalse(p1 instanceof PublicCloneable);
    }
Smell List: ['Assertion_Roulette']

Refactor#3
@Test
public void testCloning() {
    GradientBarPainter p1 = new GradientBarPainter(0.1, 0.2, 0.3);
    assertFalse(p1 instanceof Cloneable, "p1 should not implement Cloneable");
    assertFalse(p1 instanceof PublicCloneable, "p1 should not implement PublicCloneable");
}


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

