f1.txtFile#1


Input#1

Refactor#1


Input#2

Refactor#2


Input#3

Refactor#3


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32
 @Test
    public void testHashcode() {
        WaterfallBarRenderer r1 = new WaterfallBarRenderer();
        WaterfallBarRenderer r2 = new WaterfallBarRenderer();
        assertEquals(r1, r2);
        int h1 = r1.hashCode();
        int h2 = r2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette']
Refactor#32
@Test
public void testHashcode() {
    WaterfallBarRenderer r1 = new WaterfallBarRenderer();
    WaterfallBarRenderer r2 = new WaterfallBarRenderer();
    assertEquals(r1, r2, "r1 and r2 should be equal");
    int h1 = r1.hashCode();
    int h2 = r2.hashCode();
    assertEquals(h1, h2, "Hash codes of r1 and r2 should be equal");
}



Input#33
@Test
    public void testCloning() throws CloneNotSupportedException {
        WaterfallBarRenderer r1 = new WaterfallBarRenderer();
        r1.setFirstBarPaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.DARK_GRAY));
        WaterfallBarRenderer r2 = CloneUtils.clone(r1);
        assertNotSame(r1, r2);
        assertSame(r1.getClass(), r2.getClass());
        assertEquals(r1, r2);

        // quick check for independence
        r1.setFirstBarPaint(Color.YELLOW);
        assertNotEquals(r1, r2);
        r2.setFirstBarPaint(Color.YELLOW);
        assertEquals(r1, r2);

        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']

Refactor#33

    private WaterfallBarRenderer createRendererWithFirstBarPaint() {
        WaterfallBarRenderer renderer = new WaterfallBarRenderer();
        renderer.setFirstBarPaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.DARK_GRAY));
        return renderer;
    }

    @Test
    public void testCloningInstances() {
        WaterfallBarRenderer r1 = createRendererWithFirstBarPaint();
        WaterfallBarRenderer r2 = CloneUtils.clone(r1);

        assertNotSame(r1, r2, "The cloned instance should be a different object");
        assertSame(r1.getClass(), r2.getClass(), "The cloned instance should be of the same class");
        assertEquals(r1, r2, "The cloned instance should be equal to the original");

        // quick check for independence
        r1.setFirstBarPaint(Color.YELLOW);
        assertNotEquals(r1, r2, "Changing the first bar paint in the original instance should not affect the cloned instance");

        r2.setFirstBarPaint(Color.YELLOW);
        assertEquals(r1, r2, "Setting the same first bar paint in both instances should make them equal again");

        TestUtils.checkIndependence(r1, r2, "The cloned instance should be independent of the original");
    }


Input#34

Refactor#34



Input#35

Refactor#35

