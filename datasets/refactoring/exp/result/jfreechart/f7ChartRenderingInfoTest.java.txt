f1.txtFile#1


Input#1
@Test
    public void testEquals() {
        ChartRenderingInfo i1 = new ChartRenderingInfo();
        ChartRenderingInfo i2 = new ChartRenderingInfo();
        assertEquals(i1, i2);

        i1.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
        assertNotEquals(i1, i2);
        i2.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
        assertEquals(i1, i2);

        i1.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));
        assertNotEquals(i1, i2);
        i2.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));
        assertEquals(i1, i2);

        StandardEntityCollection e1 = new StandardEntityCollection();
        e1.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));
        i1.setEntityCollection(e1);
        assertNotEquals(i1, i2);
        StandardEntityCollection e2 = new StandardEntityCollection();
        e2.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));
        i2.setEntityCollection(e2);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Duplicate_Assert']
Refactor#1
@Test
public void testEquals_ChartRenderingInfo_InitialEquality() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when both are initialized with default values.");
}

@Test
public void testEquals_ChartRenderingInfo_DifferentChartArea() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    i1.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
    assertNotEquals(i1, i2, "Expected i1 and i2 to not be equal when chart areas are different.");
}

@Test
public void testEquals_ChartRenderingInfo_SameChartArea() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    i1.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
    i2.setChartArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when chart areas are the same.");
}

@Test
public void testEquals_ChartRenderingInfo_DifferentDataArea() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    i1.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));
    assertNotEquals(i1, i2, "Expected i1 and i2 to not be equal when data areas are different.");
}

@Test
public void testEquals_ChartRenderingInfo_SameDataArea() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    i1.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));
    i2.getPlotInfo().setDataArea(new Rectangle(1, 2, 3, 4));
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when data areas are the same.");
}

@Test
public void testEquals_ChartRenderingInfo_DifferentEntityCollection() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    StandardEntityCollection e1 = new StandardEntityCollection();
    e1.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));
    i1.setEntityCollection(e1);
    assertNotEquals(i1, i2, "Expected i1 and i2 to not be equal when entity collections are different.");
}

@Test
public void testEquals_ChartRenderingInfo_SameEntityCollection() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = new ChartRenderingInfo();
    StandardEntityCollection e1 = new StandardEntityCollection();
    e1.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));
    StandardEntityCollection e2 = new StandardEntityCollection();
    e2.add(new ChartEntity(new Rectangle(1, 2, 3, 4)));
    i1.setEntityCollection(e1);
    i2.setEntityCollection(e2);
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when entity collections are the same.");
}

Input#2
 @Test
    public void testCloning() throws CloneNotSupportedException {
        ChartRenderingInfo i1 = new ChartRenderingInfo();
        ChartRenderingInfo i2 = CloneUtils.clone(i1);

        assertNotSame(i1, i2);
        assertSame(i1.getClass(), i2.getClass());
        assertEquals(i1, i2);

        // check independence
        i1.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);
        assertNotEquals(i1, i2);
        i2.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);
        assertEquals(i1, i2);

        i1.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2,
                1)));
        assertNotEquals(i1, i2);
        i2.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2,
                1)));
        assertEquals(i1, i2);

    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']

Refactor#2

@Test
public void testCloning_CloneCreatesDifferentObject() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    assertNotSame(i1, i2, "Expected i1 and i2 to be different objects after cloning.");
}

@Test
public void testCloning_SameClass() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    assertSame(i1.getClass(), i2.getClass(), "Expected i1 and i2 to be of the same class after cloning.");
}

@Test
public void testCloning_EqualContent() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when cloned.");
}

@Test
public void testCloning_IndependentChartArea() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    i1.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);
    assertNotEquals(i1, i2, "Expected i1 and i2 to not be equal when chart areas are modified independently.");
}

@Test
public void testCloning_SameChartArea() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    i1.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);
    i2.getChartArea().setRect(4.0, 3.0, 2.0, 1.0);
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when chart areas are the same after modification.");
}

@Test
public void testCloning_IndependentEntityCollection() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    i1.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2, 1)));
    assertNotEquals(i1, i2, "Expected i1 and i2 to not be equal when entity collections are modified independently.");
}

@Test
public void testCloning_SameEntityCollection() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    ChartRenderingInfo i2 = CloneUtils.clone(i1);
    i1.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2, 1)));
    i2.getEntityCollection().add(new ChartEntity(new Rectangle(1, 2, 2, 1)));
    assertEquals(i1, i2, "Expected i1 and i2 to be equal when entity collections are the same after modification.");
}






Input#3
 @Test
    public void testSerialization2() {
        ChartRenderingInfo i1 = new ChartRenderingInfo();
        i1.getPlotInfo().setDataArea(new Rectangle2D.Double(1.0, 2.0, 3.0,
                4.0));
        ChartRenderingInfo i2 = TestUtils.serialised(i1);
        assertEquals(i1, i2);
        assertEquals(i2, i2.getPlotInfo().getOwner());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#3
private ChartRenderingInfo setupTestSerialization2() {
    ChartRenderingInfo i1 = new ChartRenderingInfo();
    i1.getPlotInfo().setDataArea(new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
    return i1;
}

@Test
public void testSerialization2_Equality() {
    ChartRenderingInfo i1 = setupTestSerialization2();
    ChartRenderingInfo i2 = TestUtils.serialised(i1);
    assertEquals(i1, i2, "Serialized and deserialized objects should be equal");
}

@Test
public void testSerialization2_OwnerEquality() {
    ChartRenderingInfo i1 = setupTestSerialization2();
    ChartRenderingInfo i2 = TestUtils.serialised(i1);
    assertEquals(i2, i2.getPlotInfo().getOwner(), "The owner of the plot info should be the deserialized object");
}


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

