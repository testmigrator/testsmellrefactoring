f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        GanttRenderer r1 = new GanttRenderer();
        GanttRenderer r2 = new GanttRenderer();
        assertEquals(r1, r2);
        int h1 = r1.hashCode();
        int h2 = r2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette']

Refactor#2

@Test
public void testHashcode() {
    GanttRenderer r1 = new GanttRenderer();
    GanttRenderer r2 = new GanttRenderer();
    assertEquals("GanttRenderer instances should be equal", r1, r2);
    int h1 = r1.hashCode();
    int h2 = r2.hashCode();
    assertEquals("Hash codes of equal GanttRenderer instances should be equal", h1, h2);
}

Input#3
 @Test
    public void testCloning() throws CloneNotSupportedException {
        GanttRenderer r1 = new GanttRenderer();
        r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE, 4.0f, 3.0f, Color.CYAN));
        r1.setIncompletePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 4.0f, 3.0f, Color.GREEN));
        GanttRenderer r2 = (GanttRenderer) r1.clone();
        assertNotSame(r1, r2);
        assertSame(r1.getClass(), r2.getClass());
        assertEquals(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Refactor#3
 private GanttRenderer setupGanttRenderer() {
        GanttRenderer r1 = new GanttRenderer();
        r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE, 4.0f, 3.0f, Color.CYAN));
        r1.setIncompletePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 4.0f, 3.0f, Color.GREEN));
        return r1;
    }

    @Test
    public void testCloning_InstancesAreDifferent() {
        GanttRenderer r1 = setupGanttRenderer();
        assertDoesNotThrow(() -> {
            GanttRenderer r2 = (GanttRenderer) r1.clone();
            assertNotSame(r1, r2, "The cloned instance should be a different object from the original.");
        });

    }

    @Test
    public void testCloning_ClassesAreEqual() {
        GanttRenderer r1 = setupGanttRenderer();
        assertDoesNotThrow(() -> {
            GanttRenderer r2 = (GanttRenderer) r1.clone();
            assertSame(r1.getClass(), r2.getClass(), "The cloned instance should have the same class as the original.");
        });
    }

    @Test
    public void testCloning_ContentsAreEqual() {
        GanttRenderer r1 = setupGanttRenderer();
        assertDoesNotThrow(() -> {
            GanttRenderer r2 = (GanttRenderer) r1.clone();
            assertEquals(r1, r2, "The cloned instance should have the same content as the original.");
        });
    }

    @Test
    public void testCloning_Independence() {
        GanttRenderer r1 = setupGanttRenderer();
        assertDoesNotThrow(() -> {
            GanttRenderer r2 = (GanttRenderer) r1.clone();
            TestUtils.checkIndependence(r1, r2);
        });
    }

Input#4
 @Test
    public void testSerialization() {
        GanttRenderer r1 = new GanttRenderer();
        r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f,
                4.0f, Color.BLUE));
        r1.setIncompletePaint(new GradientPaint(4.0f, 3.0f, Color.RED, 2.0f,
                1.0f, Color.BLUE));
        GanttRenderer r2 = TestUtils.serialised(r1);
        assertEquals(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Eager_Test']
Refactor#4

private void setupTestSerialization() {
    GanttRenderer r1 = new GanttRenderer();
    r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE));
    r1.setIncompletePaint(new GradientPaint(4.0f, 3.0f, Color.RED, 2.0f, 1.0f, Color.BLUE));
    GanttRenderer r2 = TestUtils.serialised(r1);
}

@Test
public void testSerialization_Equality() {
    setupTestSerialization();
    GanttRenderer r1 = new GanttRenderer();
    r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE));
    r1.setIncompletePaint(new GradientPaint(4.0f, 3.0f, Color.RED, 2.0f, 1.0f, Color.BLUE));
    GanttRenderer r2 = TestUtils.serialised(r1);
    assertEquals(r1, r2);
}

@Test
public void testSerialization_Independence() {
    setupTestSerialization();
    GanttRenderer r1 = new GanttRenderer();
    r1.setCompletePaint(new GradientPaint(1.0f, 2.0f, Color.RED, 3.0f, 4.0f, Color.BLUE));
    r1.setIncompletePaint(new GradientPaint(4.0f, 3.0f, Color.RED, 2.0f, 1.0f, Color.BLUE));
    GanttRenderer r2 = TestUtils.serialised(r1);
    TestUtils.checkIndependence(r1, r2);
}

Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

