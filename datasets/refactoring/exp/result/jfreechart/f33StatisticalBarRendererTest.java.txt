f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        StatisticalBarRenderer r1 = new StatisticalBarRenderer();
        StatisticalBarRenderer r2 = new StatisticalBarRenderer();
        assertEquals(r1, r2);
        int h1 = r1.hashCode();
        int h2 = r2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette']
Refactor#2

@Test
public void testHashcode() {
    StatisticalBarRenderer r1 = new StatisticalBarRenderer();
    StatisticalBarRenderer r2 = new StatisticalBarRenderer();
    assertEquals("Expected r1 to be equal to r2", r1, r2);
    int h1 = r1.hashCode();
    int h2 = r2.hashCode();
    assertEquals("Expected hash codes of r1 and r2 to be equal", h1, h2);
}


Input#3
 @Test
    public void testCloning() throws CloneNotSupportedException {
        StatisticalBarRenderer r1 = new StatisticalBarRenderer();
        StatisticalBarRenderer r2 = CloneUtils.clone(r1);
        assertNotSame(r1, r2);
        assertSame(r1.getClass(), r2.getClass());
        assertEquals(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing']
Refactor#3
@Test
public void testCloning() {
    StatisticalBarRenderer r1 = new StatisticalBarRenderer();
    StatisticalBarRenderer r2 = null;
    assertDoesNotThrow(() -> {
        r2 = CloneUtils.clone(r1);
    }, "Clone operation should not throw an exception");

    assertNotSame(r1, r2, "Cloned object should not be the same instance as the original");
    assertSame(r1.getClass(), r2.getClass(), "Cloned object should be of the same class as the original");
    assertEquals(r1, r2, "Cloned object should be equal to the original");
    TestUtils.checkIndependence(r1, r2, "Cloned object should be independent from the original");
}

Input#4
 @Test
    public void testDrawWithNullInfo() {
        try {
            DefaultStatisticalCategoryDataset<String, String> dataset
                    = new DefaultStatisticalCategoryDataset<>();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(3.0, 4.0, "S1", "C2");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']
Refactor#4

@Test
public void testDrawWithNullInfo() {
    assertDoesNotThrow(() -> {
        DefaultStatisticalCategoryDataset<String, String> dataset
                = new DefaultStatisticalCategoryDataset<>();
        dataset.add(1.0, 2.0, "S1", "C1");
        dataset.add(3.0, 4.0, "S1", "C2");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new StatisticalBarRenderer());
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200, null);
    }, "No exception should be thrown.");
}


Input#5
 @Test
    public void testDrawWithNullMeanVertical() {
        try {
            DefaultStatisticalCategoryDataset<String, String> dataset
                    = new DefaultStatisticalCategoryDataset<>();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(null, 4.0, "S1", "C2");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']
Refactor#5

@Test
public void testDrawWithNullMeanVertical() {
    assertDoesNotThrow(() -> {
        DefaultStatisticalCategoryDataset<String, String> dataset
                = new DefaultStatisticalCategoryDataset<>();
        dataset.add(1.0, 2.0, "S1", "C1");
        dataset.add(null, 4.0, "S1", "C2");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new StatisticalBarRenderer());
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                null);
    }, "No exception should be thrown.");
}


Input#6
 @Test
    public void testDrawWithNullMeanHorizontal() {
        try {
            DefaultStatisticalCategoryDataset<String, String> dataset
                    = new DefaultStatisticalCategoryDataset<>();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(null, 4.0, "S1", "C2");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']
Refactor#6

@Test
public void testDrawWithNullMeanHorizontal() {
    assertDoesNotThrow(() -> {
        DefaultStatisticalCategoryDataset<String, String> dataset
                = new DefaultStatisticalCategoryDataset<>();
        dataset.add(1.0, 2.0, "S1", "C1");
        dataset.add(null, 4.0, "S1", "C2");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new StatisticalBarRenderer());
        plot.setOrientation(PlotOrientation.HORIZONTAL);
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                null);
    }, "No exception should be thrown.");
}


Input#7
 @Test
    public void testDrawWithNullDeviationVertical() {
        try {
            DefaultStatisticalCategoryDataset<String, String> dataset
                    = new DefaultStatisticalCategoryDataset<>();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(4.0, null, "S1", "C2");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']
Refactor#7

@Test
public void testDrawWithNullDeviationVertical() {
    assertDoesNotThrow(() -> {
        DefaultStatisticalCategoryDataset<String, String> dataset
                = new DefaultStatisticalCategoryDataset<>();
        dataset.add(1.0, 2.0, "S1", "C1");
        dataset.add(4.0, null, "S1", "C2");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new StatisticalBarRenderer());
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                null);
    }, "No exception should be thrown.");
}

Input#8
 @Test
    public void testDrawWithNullDeviationHorizontal() {
        try {
            DefaultStatisticalCategoryDataset<String, String> dataset
                    = new DefaultStatisticalCategoryDataset<>();
            dataset.add(1.0, 2.0, "S1", "C1");
            dataset.add(4.0, null, "S1", "C2");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }
Smell List: ['Exception_Catching_Throwing']
Refactor#8

@Test
public void testDrawWithNullDeviationHorizontal() {
    assertDoesNotThrow(() -> {
        DefaultStatisticalCategoryDataset<String, String> dataset
                = new DefaultStatisticalCategoryDataset<>();
        dataset.add(1.0, 2.0, "S1", "C1");
        dataset.add(4.0, null, "S1", "C2");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("Category"), new NumberAxis("Value"),
                new StatisticalBarRenderer());
        plot.setOrientation(PlotOrientation.HORIZONTAL);
        JFreeChart chart = new JFreeChart(plot);
        /* BufferedImage image = */ chart.createBufferedImage(300, 200, null);
    }, "Unexpected exception occurred during the test");
}



Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

