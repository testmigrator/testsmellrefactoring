Input Parameters:
Test Code:
 @Test
    public void testFindLiveItemsLowerBound_Descending() {
        var d = new DefaultXYDataset<String>() {
            @Override
            public DomainOrder getDomainOrder() {
                // we're doing this for testing only, and make sure that we
                // only add data in descending order by x-value
                return DomainOrder.DESCENDING;
            }
        };
        // check a series with no items
        d.addSeries("S1", new double[][] {{}, {}});
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 0, 10.0, 11.0));

        // check a series with one item
        d.addSeries("S2", new double[][] {{1.0}, {9.9}});
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 0.0, 1.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, 1.1, 2.0));

        // check a series with two items
        d.addSeries("S3", new double[][] {{2.0, 1.0}, {9.9, 9.9}});
        assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 0.1, 0.5));
        assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, 0.1, 1.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 1.1, 2.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 2.2, 3.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, 3.3, 4.0));

        // check a series with three items
        d.addSeries("S4", new double[][] {{3.0, 2.0, 1.0}, {9.9, 9.9, 9.9}});
        assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 3, 0.0, 1.0));
        assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 3, 1.0, 2.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 2.0, 3.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, 3.0, 4.0));

        // check a series with four items
        d.addSeries("S5", new double[][] {{4.0, 3.0, 2.0, 1.0}, {9.9, 9.9,
                9.9, 9.9}});
        assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 0.1, 0.5));
        assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, 0.1, 1.0));
        assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 4, 1.1, 2.0));
        assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 4, 2.2, 3.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 3.3, 4.0));
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, 4.4, 5.0));

        // check a series with repeating items
        d.addSeries("S6", new double[][] {{3.0, 2.0, 2.0, 2.0, 1.0}, {9.9, 9.9,
                9.9, 9.9, 9.9}});
        assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 3.0));
        assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 2.0));
        assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 1.0));
        assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 5, 0.0, 0.5));
    }
Context: /org/jfree/chart/renderer/RendererUtils
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
@Test
public void testFindLiveItemsLowerBound_Descending_NoItems() {
    var d = createDescendingDataset();
    d.addSeries("S1", new double[][] {{}, {}});
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 0, lowerBound1, upperBound1), "No items should return 0");
}

@Test
public void testFindLiveItemsLowerBound_Descending_OneItem() {
    var d = createDescendingDataset();
    d.addSeries("S2", new double[][] {{1.0}, {9.9}});
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, lowerBound2, upperBound2), "One item within bounds should return 0");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 1, lowerBound3, upperBound3), "One item outside bounds should return 0");
}

@Test
public void testFindLiveItemsLowerBound_Descending_TwoItems() {
    var d = createDescendingDataset();
    d.addSeries("S3", new double[][] {{2.0, 1.0}, {9.9, 9.9}});
    assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, lowerBound4, upperBound4), "Two items, first item within bounds should return 1");
    assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 2, lowerBound5, upperBound5), "Two items, both items within bounds should return 1");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, lowerBound6, upperBound6), "Two items, second item within bounds should return 0");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, lowerBound7, upperBound7), "Two items, both items outside bounds should return 0");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 2, lowerBound8, upperBound8), "Two items, both items outside bounds should return 0");
}

@Test
public void testFindLiveItemsLowerBound_Descending_ThreeItems() {
    var d = createDescendingDataset();
    d.addSeries("S4", new double[][] {{3.0, 2.0, 1.0}, {9.9, 9.9, 9.9}});
    assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 3, lowerBound9, upperBound9), "Three items, third item within bounds should return 2");
    assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 3, lowerBound10, upperBound10), "Three items, second item within bounds should return 1");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, lowerBound11, upperBound11), "Three items, first item within bounds should return 0");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 3, lowerBound12, upperBound12), "Three items, all items outside bounds should return 0");
}

@Test
public void testFindLiveItemsLowerBound_Descending_FourItems() {
    var d = createDescendingDataset();
    d.addSeries("S5", new double[][] {{4.0, 3.0, 2.0, 1.0}, {9.9, 9.9, 9.9, 9.9}});
    assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, lowerBound13, upperBound13), "Four items, fourth item within bounds should return 3");
    assertEquals(3, RendererUtils.findLiveItemsLowerBound(d, 4, lowerBound14, upperBound14), "Four items, fourth item within bounds should return 3");
    assertEquals(2, RendererUtils.findLiveItemsLowerBound(d, 4, lowerBound15, upperBound15), "Four items, third item within bounds should return 2");
    assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 4, lowerBound16, upperBound16), "Four items, second item within bounds should return 1");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, lowerBound17, upperBound17), "Four items, first item within bounds should return 0");
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 4, lowerBound18, upperBound18), "Four items, all items outside bounds should return 0");
}

@Test
public void testFindLiveItemsLowerBound_Descending_RepeatingItems() {
    var d = createDescendingDataset();
    d.addSeries("S6", new double[][] {{3.0, 2.0, 2.0, 2.0, 1.0}, {9.9, 9.9, 9.9, 9.9, 9.9}});
    assertEquals(0, RendererUtils.findLiveItemsLowerBound(d, 5, lowerBound19, upperBound19), "Repeating items, all items outside bounds should return 0");
    assertEquals(1, RendererUtils.findLiveItemsLowerBound(d, 5, lowerBound20, upperBound20), "Repeating items, first repeating item within bounds should return 1");
    assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 5, lowerBound21, upperBound21), "Repeating items, last item within bounds should return 4");
    assertEquals(4, RendererUtils.findLiveItemsLowerBound(d, 5, lowerBound22, upperBound22), "Repeating items, all items within bounds should return 4");
}

private DefaultXYDataset<String> createDescendingDataset() {
    return new DefaultXYDataset<String>() {
        @Override
        public DomainOrder getDomainOrder() {
            return DomainOrder.DESCENDING;
        }
    };
}

private static final double lowerBound1 = 10.0;
private static final double upperBound1 = 11.0;
private static final double lowerBound2 = 0.0;
private static final double upperBound2 = 1.0;
private static final double lowerBound3 = 1.1;
private static final double upperBound3 = 2.0;
private static final double lowerBound4 = 0.1;
private static final double upperBound4 = 0.5;
private static final double lowerBound5 = 0.1;
private static final double upperBound5 = 1.0;
private static final double lowerBound6 = 1.1;
private static final double upperBound6 = 2.0;
private static final double lowerBound7 = 2.2;
private static final double upperBound7 = 3.0;
private static final double lowerBound8 = 3.3;
private static final double upperBound8 = 4.0;
private static final double lowerBound9 = 0.0;
private static final double upperBound9 = 1.0;
private static final double lowerBound10 = 1.0;
private static final double upperBound10 = 2.0;
private static final double lowerBound11 = 2.0;
private static final double upperBound11 = 3.0;
private static final double lowerBound12 = 3.0;
private static final double upperBound12 = 4.0;
private static final double lowerBound13 = 0.1;
private static final double upperBound13 = 0.5;
private static final double lowerBound14 = 0.1;
private static final double upperBound14 = 1.0;
private static final double lowerBound15 = 1.1;
private static final double upperBound15 = 2.0;
private static final double lowerBound16 = 2.2;
private static final double upperBound16 = 3.0;
private static final double lowerBound17 = 3.3;
private static final double upperBound17 = 4.0;
private static final double lowerBound18 = 4.4;
private static final double upperBound18 = 5.0;
private static final double lowerBound19 = 0.0;
private static final double upperBound19 = 3.0;
private static final double lowerBound20 = 0.0;
private static final double upperBound20 = 2.0;
private static final double lowerBound21 = 0.0;
private static final double upperBound21 = 1.0;
private static final double lowerBound22 = 0.0;
private static final double upperBound22 = 0.5;


