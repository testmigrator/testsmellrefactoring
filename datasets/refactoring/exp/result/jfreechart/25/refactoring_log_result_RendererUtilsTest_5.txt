Input Parameters:
Test Code:
 @Test
    public void testFindLiveItemsUpperBound_Ascending() {
        var d = new DefaultXYDataset<String>() {
            @Override
            public DomainOrder getDomainOrder() {
                // we're doing this for testing only, and make sure that we
                // only add data in ascending order by x-value
                return DomainOrder.ASCENDING;
            }
        };
        // check a series with no items
        d.addSeries("S1", new double[][] {{}, {}});
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 0, 10.0, 11.1));

        // check a series with one item
        d.addSeries("S2", new double[][] {{1.0}, {9.9}});
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 0.0, 1.1));
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, 2.0, 2.2));

        // check a series with two items
        d.addSeries("S3", new double[][] {{1.0, 2.0}, {9.9, 9.9}});
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, 0.0, 1.0));
        assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 1.0, 2.2));
        assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 2.0, 3.3));
        assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, 3.0, 4.4));

        // check a series with three items
        d.addSeries("S4", new double[][] {{1.0, 2.0, 3.0}, {9.9, 9.9, 9.9}});
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 3, 0.0, 1.1));
        assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 3, 1.0, 2.2));
        assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 2.0, 3.3));
        assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, 3.0, 4.4));

        // check a series with four items
        d.addSeries("S5", new double[][] {{1.0, 2.0, 3.0, 4.0}, {9.9, 9.9,
                9.9, 9.9}});
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 1.1));
        assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 4, 1.0, 2.2));
        assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 4, 2.0, 3.3));
        assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 3.0, 4.4));
        assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 4.0, 5.5));

        // check a series with repeating items
        d.addSeries("S5", new double[][] {{1.0, 2.0, 2.0, 2.0, 3.0}, {9.9, 9.9,
                9.9, 9.9, 9.9}});
        assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 1.0));
        assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 2.0));
        assertEquals(4, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 3.0));
        assertEquals(4, RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 4.0));

    }
Context: /org/jfree/chart/renderer/RendererUtils
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.chart.renderer.RendererUtils;
import static org.junit.Assert.assertEquals;

public class RendererUtilsTest {

    private DefaultXYDataset<String> createAscendingDataset() {
        return new DefaultXYDataset<String>() {
            @Override
            public DomainOrder getDomainOrder() {
                return DomainOrder.ASCENDING;
            }
        };
    }

    private void addSeries(DefaultXYDataset<String> dataset, String seriesName, double[] xValues, double[] yValues) {
        dataset.addSeries(seriesName, new double[][] {xValues, yValues});
    }

    @Test
    public void testFindLiveItemsUpperBound_SeriesWithNoItems() {
        DefaultXYDataset<String> d = createAscendingDataset();
        addSeries(d, "S1", new double[]{}, new double[]{});
        int expectedIndex = 0;
        int actualIndex = RendererUtils.findLiveItemsUpperBound(d, 0, 10.0, 11.1);
        assertEquals("Expected upper bound index for series with no items", expectedIndex, actualIndex);
    }

    @Test
    public void testFindLiveItemsUpperBound_SeriesWithOneItem() {
        DefaultXYDataset<String> d = createAscendingDataset();
        addSeries(d, "S2", new double[]{1.0}, new double[]{9.9});
        int expectedIndex1 = 0;
        int actualIndex1 = RendererUtils.findLiveItemsUpperBound(d, 1, 0.0, 1.1);
        assertEquals("Expected upper bound index for series with one item (range 0.0-1.1)", expectedIndex1, actualIndex1);

        int expectedIndex2 = 0;
        int actualIndex2 = RendererUtils.findLiveItemsUpperBound(d, 1, 2.0, 2.2);
        assertEquals("Expected upper bound index for series with one item (range 2.0-2.2)", expectedIndex2, actualIndex2);
    }

    @Test
    public void testFindLiveItemsUpperBound_SeriesWithTwoItems() {
        DefaultXYDataset<String> d = createAscendingDataset();
        addSeries(d, "S3", new double[]{1.0, 2.0}, new double[]{9.9, 9.9});
        int expectedIndex1 = 0;
        int actualIndex1 = RendererUtils.findLiveItemsUpperBound(d, 2, 0.0, 1.0);
        assertEquals("Expected upper bound index for series with two items (range 0.0-1.0)", expectedIndex1, actualIndex1);

        int expectedIndex2 = 1;
        int actualIndex2 = RendererUtils.findLiveItemsUpperBound(d, 2, 1.0, 2.2);
        assertEquals("Expected upper bound index for series with two items (range 1.0-2.2)", expectedIndex2, actualIndex2);

        int expectedIndex3 = 1;
        int actualIndex3 = RendererUtils.findLiveItemsUpperBound(d, 2, 2.0, 3.3);
        assertEquals("Expected upper bound index for series with two items (range 2.0-3.3)", expectedIndex3, actualIndex3);

        int expectedIndex4 = 1;
        int actualIndex4 = RendererUtils.findLiveItemsUpperBound(d, 2, 3.0, 4.4);
        assertEquals("Expected upper bound index for series with two items (range 3.0-4.4)", expectedIndex4, actualIndex4);
    }

    @Test
    public void testFindLiveItemsUpperBound_SeriesWithThreeItems() {
        DefaultXYDataset<String> d = createAscendingDataset();
        addSeries(d, "S4", new double[]{1.0, 2.0, 3.0}, new double[]{9.9, 9.9, 9.9});
        int expectedIndex1 = 0;
        int actualIndex1 = RendererUtils.findLiveItemsUpperBound(d, 3, 0.0, 1.1);
        assertEquals("Expected upper bound index for series with three items (range 0.0-1.1)", expectedIndex1, actualIndex1);

        int expectedIndex2 = 1;
        int actualIndex2 = RendererUtils.findLiveItemsUpperBound(d, 3, 1.0, 2.2);
        assertEquals("Expected upper bound index for series with three items (range 1.0-2.2)", expectedIndex2, actualIndex2);

        int expectedIndex3 = 2;
        int actualIndex3 = RendererUtils.findLiveItemsUpperBound(d, 3, 2.0, 3.3);
        assertEquals("Expected upper bound index for series with three items (range 2.0-3.3)", expectedIndex3, actualIndex3);

        int expectedIndex4 = 2;
        int actualIndex4 = RendererUtils.findLiveItemsUpperBound(d, 3, 3.0, 4.4);
        assertEquals("Expected upper bound index for series with three items (range 3.0-4.4)", expectedIndex4, actualIndex4);
    }

    @Test
    public void testFindLiveItemsUpperBound_SeriesWithFourItems() {
        DefaultXYDataset<String> d = createAscendingDataset();
        addSeries(d, "S5", new double[]{1.0, 2.0, 3.0, 4.0}, new double[]{9.9, 9.9, 9.9, 9.9});
        int expectedIndex1 = 0;
        int actualIndex1 = RendererUtils.findLiveItemsUpperBound(d, 4, 0.0, 1.1);
        assertEquals("Expected upper bound index for series with four items (range 0.0-1.1)", expectedIndex1, actualIndex1);

        int expectedIndex2 = 1;
        int actualIndex2 = RendererUtils.findLiveItemsUpperBound(d, 4, 1.0, 2.2);
        assertEquals("Expected upper bound index for series with four items (range 1.0-2.2)", expectedIndex2, actualIndex2);

        int expectedIndex3 = 2;
        int actualIndex3 = RendererUtils.findLiveItemsUpperBound(d, 4, 2.0, 3.3);
        assertEquals("Expected upper bound index for series with four items (range 2.0-3.3)", expectedIndex3, actualIndex3);

        int expectedIndex4 = 3;
        int actualIndex4 = RendererUtils.findLiveItemsUpperBound(d, 4, 3.0, 4.4);
        assertEquals("Expected upper bound index for series with four items (range 3.0-4.4)", expectedIndex4, actualIndex4);

        int expectedIndex5 = 3;
        int actualIndex5 = RendererUtils.findLiveItemsUpperBound(d, 4, 4.0, 5.5);
        assertEquals("Expected upper bound index for series with four items (range 4.0-5.5)", expectedIndex5, actualIndex5);
    }

    @Test
    public void testFindLiveItemsUpperBound_SeriesWithRepeatingItems() {
        DefaultXYDataset<String> d = createAscendingDataset();
        addSeries(d, "S6", new double[]{1.0, 2.0, 2.0, 2.0, 3.0}, new double[]{9.9, 9.9, 9.9, 9.9, 9.9});
        int expectedIndex1 = 0;
        int actualIndex1 = RendererUtils.findLiveItemsUpperBound(d, 5, 0.0, 1.0);
        assertEquals("Expected upper bound index for series with repeating items (range 0.0-1.0)", expectedIndex1, actualIndex1);

        int expectedIndex2 = 3;
        int actualIndex2 = RendererUtils.findLiveItemsUpperBound(d, 5, 0.0, 2.0);
        assertEquals("Expected upper bound index for series with repeating items (range 0.0-2.0)", expectedIndex2, actualIndex2);

        int expectedIndex3 = 4;
        int actualIndex3 = RendererUtils.findLiveItemsUpperBound(d, 5, 0.0, 3.0);
        assertEquals("Expected upper bound index for series with repeating items (range 0.0-3.0)", expectedIndex3, actualIndex3);

        int expectedIndex4 = 4;
        int actualIndex4 = RendererUtils.findLiveItemsUpperBound(d, 5, 0.0, 4.0);
        assertEquals("Expected upper bound index for series with repeating items (range 0.0-4.0)", expectedIndex4, actualIndex4);
    }
}


