f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(),
                new NumberAxis("X"));
        PaintScaleLegend l2 = new PaintScaleLegend(new GrayPaintScale(),
                new NumberAxis("X"));
        assertEquals(l1, l2);
        int h1 = l1.hashCode();
        int h2 = l2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette']
Refactor#2
@Test
public void testHashcode() {
    PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X"));
    PaintScaleLegend l2 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X"));
    assertEquals("l1 and l2 should be equal", l1, l2);
    int h1 = l1.hashCode();
    int h2 = l2.hashCode();
    assertEquals("Hash codes of l1 and l2 should be equal", h1, h2);
}

Input#3
 @Test
    public void testCloning() throws CloneNotSupportedException {
        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(),
                new NumberAxis("X"));
        PaintScaleLegend l2 = CloneUtils.clone(l1);
        assertNotSame(l1, l2);
        assertSame(l1.getClass(), l2.getClass());
        assertEquals(l1, l2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing']
Refactor#3
@Test
public void testCloning() {
    assertDoesNotThrow(() -> {
        PaintScaleLegend l1 = new PaintScaleLegend(new GrayPaintScale(), new NumberAxis("X"));
        PaintScaleLegend l2 = CloneUtils.clone(l1);
        assertNotSame(l1, l2, "The cloned object should not be the same instance as the original");
        assertSame(l1.getClass(), l2.getClass(), "The cloned object should be of the same class as the original");
        assertEquals(l1, l2, "The cloned object should be equal to the original object");
    }, "Unexpected exception occurred during the cloning process");
}

Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

