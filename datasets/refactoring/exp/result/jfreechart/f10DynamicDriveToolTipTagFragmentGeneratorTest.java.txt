f1.txtFile#1


Input#1
 @Test
    public void testGenerateURLFragment() {
        OverLIBToolTipTagFragmentGenerator g
                = new OverLIBToolTipTagFragmentGenerator();
        assertEquals(" onMouseOver=\"return overlib('abc');\""
                + " onMouseOut=\"return nd();\"",
                g.generateToolTipFragment("abc"));
        assertEquals(" onMouseOver=\"return overlib("
                + "'It\\'s \\\"A\\\", 100.0');\" onMouseOut=\"return nd();\"",
                g.generateToolTipFragment("It\'s \"A\", 100.0"));
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#1

private OverLIBToolTipTagFragmentGenerator createGenerator() {
    return new OverLIBToolTipTagFragmentGenerator();
}

@Test
public void testGenerateURLFragment_SimpleString() {
    OverLIBToolTipTagFragmentGenerator generator = createGenerator();
    String expected = " onMouseOver=\"return overlib('abc');\" onMouseOut=\"return nd();\"";
    String actual = generator.generateToolTipFragment("abc");
    assertEquals(expected, actual, "Check if simple string generates correct URL fragment");
}

@Test
public void testGenerateURLFragment_ComplexString() {
    OverLIBToolTipTagFragmentGenerator generator = createGenerator();
    String expected = " onMouseOver=\"return overlib('It\\'s \\\"A\\\", 100.0');\" onMouseOut=\"return nd();\"";
    String actual = generator.generateToolTipFragment("It\'s \"A\", 100.0");
    assertEquals(expected, actual, "Check if complex string with special characters generates correct URL fragment");
}

Input#2

Refactor#2


Input#3

Refactor#3


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

