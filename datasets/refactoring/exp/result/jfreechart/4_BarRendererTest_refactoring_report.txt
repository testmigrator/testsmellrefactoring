f1.txtFile#1


Input#1

Refactor#1


Input#2
 @Test
    public void testHashcode() {
        BarRenderer r1 = new BarRenderer();
        BarRenderer r2 = new BarRenderer();
        assertEquals(r1, r2);
        int h1 = r1.hashCode();
        int h2 = r2.hashCode();
        assertEquals(h1, h2);
    }
Smell List: ['Assertion_Roulette']

Refactor#2

@Test
public void testHashcode() {
    BarRenderer r1 = new BarRenderer();
    BarRenderer r2 = new BarRenderer();
    assertEquals("r1 and r2 should be equal", r1, r2);
    int h1 = r1.hashCode();
    int h2 = r2.hashCode();
    assertEquals("Hash codes of r1 and r2 should be equal", h1, h2);
}


Input#3
 @Test
    public void testCloning() throws CloneNotSupportedException {
        BarRenderer r1 = new BarRenderer();
        r1.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        r1.setBarPainter(new GradientBarPainter(0.11, 0.22, 0.33));
        BarRenderer r2 = (BarRenderer) r1.clone();
        assertNotSame(r1, r2);
        assertSame(r1.getClass(), r2.getClass());
        assertEquals(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Refactor#3
private BarRenderer setupBarRenderer() {
        BarRenderer r1 = new BarRenderer();
        r1.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        r1.setBarPainter(new GradientBarPainter(0.11, 0.22, 0.33));
        return r1;
    }

    @Test
    public void testCloning_InstancesAreDifferent() {
        BarRenderer r1 = setupBarRenderer();
        BarRenderer r2 = (BarRenderer) r1.clone();
        assertNotSame(r1, r2, "Cloned instances should be different objects");
    }

    @Test
    public void testCloning_ClassTypesMatch() {
        BarRenderer r1 = setupBarRenderer();
        BarRenderer r2 = (BarRenderer) r1.clone();
        assertSame(r1.getClass(), r2.getClass(), "Cloned instance should have the same class type as the original");
    }

    @Test
    public void testCloning_ContentsAreEqual() {
        BarRenderer r1 = setupBarRenderer();
        BarRenderer r2 = (BarRenderer) r1.clone();
        assertEquals(r1, r2, "Cloned instance should have the same content as the original");
    }

    @Test
    public void testCloning_ObjectsAreIndependent() {
        BarRenderer r1 = setupBarRenderer();
        BarRenderer r2 = (BarRenderer) r1.clone();
        TestUtils.checkIndependence(r1, r2);
    }

Input#4
 @Test
    public void testSerialization() {
        BarRenderer r1 = new BarRenderer();
        r1.setSeriesOutlineStroke(1, new BasicStroke(9.0f));
        r1.setDefaultOutlineStroke(new BasicStroke(4.5f));
        BarRenderer r2 = TestUtils.serialised(r1);
        assertEquals(r1, r2);
        assertNotSame(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#4
private void setupTestSerialization() {
    BarRenderer r1 = new BarRenderer();
    r1.setSeriesOutlineStroke(1, new BasicStroke(9.0f));
    r1.setDefaultOutlineStroke(new BasicStroke(4.5f));
}

@Test
public void testSerialization_Equality() {
    BarRenderer r1 = new BarRenderer();
    r1.setSeriesOutlineStroke(1, new BasicStroke(9.0f));
    r1.setDefaultOutlineStroke(new BasicStroke(4.5f));
    BarRenderer r2 = TestUtils.serialised(r1);
    assertEquals(r1, r2, "Serialized and deserialized objects should be equal");
}

@Test
public void testSerialization_NotSameInstance() {
    BarRenderer r1 = new BarRenderer();
    r1.setSeriesOutlineStroke(1, new BasicStroke(9.0f));
    r1.setDefaultOutlineStroke(new BasicStroke(4.5f));
    BarRenderer r2 = TestUtils.serialised(r1);
    assertNotSame(r1, r2, "Serialized and deserialized objects should not be the same instance");
}

@Test
public void testSerialization_Independence() {
    BarRenderer r1 = new BarRenderer();
    r1.setSeriesOutlineStroke(1, new BasicStroke(9.0f));
    r1.setDefaultOutlineStroke(new BasicStroke(4.5f));
    BarRenderer r2 = TestUtils.serialised(r1);
    TestUtils.checkIndependence(r1, r2);
}

Input#5
 @Test
    public void testEventNotification() {

        RendererChangeDetector detector = new RendererChangeDetector();
        BarRenderer r1 = new BarRenderer();
        r1.addChangeListener(detector);

        detector.setNotified(false);
        r1.setDefaultPaint(Color.RED);
        assertTrue(detector.getNotified());

    }
Smell List: ['Eager_Test']

Refactor#5

private void setupTestEventNotification() {
    RendererChangeDetector detector = new RendererChangeDetector();
    BarRenderer r1 = new BarRenderer();
    r1.addChangeListener(detector);
    detector.setNotified(false);
}

@Test
public void testEventNotification_SetDefaultPaint() {
    RendererChangeDetector detector = new RendererChangeDetector();
    BarRenderer r1 = new BarRenderer();
    r1.addChangeListener(detector);
    detector.setNotified(false);
    r1.setDefaultPaint(Color.RED);
    assertTrue(detector.getNotified());
}


Input#6
 @Test
    public void testGetLegendItem() {
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        dataset.addValue(21.0, "R1", "C1");
        BarRenderer r = new BarRenderer();
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                new CategoryAxis("x"), new NumberAxis("y"), r);
        /*JFreeChart chart =*/ new JFreeChart(plot);
        LegendItem li = r.getLegendItem(0, 0);
        assertNotNull(li);
        r.setSeriesVisibleInLegend(0, Boolean.FALSE);
        li = r.getLegendItem(0, 0);
        assertNull(li);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#6

private DefaultCategoryDataset<String, String> createDataset() {
    DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
    dataset.addValue(21.0, "R1", "C1");
    return dataset;
}

private CategoryPlot<String, String> createPlot(DefaultCategoryDataset<String, String> dataset) {
    BarRenderer r = new BarRenderer();
    CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"), new NumberAxis("y"), r);
    return plot;
}

@Test
public void testGetLegendItem_Visible() {
    DefaultCategoryDataset<String, String> dataset = createDataset();
    CategoryPlot<String, String> plot = createPlot(dataset);
    BarRenderer r = (BarRenderer) plot.getRenderer();
    LegendItem li = r.getLegendItem(0, 0);
    assertNotNull(li, "The legend item should be visible when series is visible in legend.");
}

@Test
public void testGetLegendItem_NotVisible() {
    DefaultCategoryDataset<String, String> dataset = createDataset();
    CategoryPlot<String, String> plot = createPlot(dataset);
    BarRenderer r = (BarRenderer) plot.getRenderer();
    r.setSeriesVisibleInLegend(0, Boolean.FALSE);
    LegendItem li = r.getLegendItem(0, 0);
    assertNull(li, "The legend item should not be visible when series is hidden in legend.");
}

Input#7
 @Test
    public void testGetLegendItemSeriesIndex() {
        DefaultCategoryDataset<String, String> dataset0 = new DefaultCategoryDataset<>();
        dataset0.addValue(21.0, "R1", "C1");
        dataset0.addValue(22.0, "R2", "C1");
        DefaultCategoryDataset<String, String> dataset1 = new DefaultCategoryDataset<>();
        dataset1.addValue(23.0, "R3", "C1");
        dataset1.addValue(24.0, "R4", "C1");
        dataset1.addValue(25.0, "R5", "C1");
        BarRenderer r = new BarRenderer();
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset0,
                new CategoryAxis("x"), new NumberAxis("y"), r);
        plot.setDataset(1, dataset1);
        /*JFreeChart chart =*/ new JFreeChart(plot);
        LegendItem li = r.getLegendItem(1, 2);
        assertEquals("R5", li.getLabel());
        assertEquals(1, li.getDatasetIndex());
        assertEquals(2, li.getSeriesIndex());
    }
Smell List: ['Assertion_Roulette', 'Magic_Number_Test']

Refactor#7

@Test
public void testGetLegendItemSeriesIndex() {
    DefaultCategoryDataset<String, String> dataset0 = new DefaultCategoryDataset<>();
    dataset0.addValue(21.0, "R1", "C1");
    dataset0.addValue(22.0, "R2", "C1");
    DefaultCategoryDataset<String, String> dataset1 = new DefaultCategoryDataset<>();
    dataset1.addValue(23.0, "R3", "C1");
    dataset1.addValue(24.0, "R4", "C1");
    dataset1.addValue(25.0, "R5", "C1");
    BarRenderer r = new BarRenderer();
    CategoryPlot<String, String> plot = new CategoryPlot<>(dataset0,
            new CategoryAxis("x"), new NumberAxis("y"), r);
    plot.setDataset(1, dataset1);
    /*JFreeChart chart =*/ new JFreeChart(plot);
    LegendItem li = r.getLegendItem(1, 2);

    String expectedLabel = "R5";
    int expectedDatasetIndex = 1;
    int expectedSeriesIndex = 2;

    assertEquals(expectedLabel, li.getLabel(), "The label of the legend item should match the expected value.");
    assertEquals(expectedDatasetIndex, li.getDatasetIndex(), "The dataset index of the legend item should match the expected value.");
    assertEquals(expectedSeriesIndex, li.getSeriesIndex(), "The series index of the legend item should match the expected value.");
}


Input#8
@Test
    public void testFindRangeBounds() {
        BarRenderer r = new BarRenderer();
        assertNull(r.findRangeBounds(null));

        // an empty dataset should return a null range
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        assertNull(r.findRangeBounds(dataset));

        dataset.addValue(1.0, "R1", "C1");
        assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset));
        r.setIncludeBaseInRange(false);
        assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset));
        r.setIncludeBaseInRange(true);

        dataset.addValue(-2.0, "R1", "C2");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(null, "R1", "C3");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(-6.0, "R2", "C1");
        assertEquals(new Range(-6.0, 1.0), r.findRangeBounds(dataset));

        r.setSeriesVisible(1, Boolean.FALSE);
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));
    }
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Duplicate_Assert', 'Magic_Number_Test']


Refactor#8
private BarRenderer renderer;
    private DefaultCategoryDataset<String, String> dataset;

    @BeforeEach
    public void setUp() {
        renderer = new BarRenderer();
        dataset = new DefaultCategoryDataset<>();
    }

    @Test
    public void testFindRangeBounds_NullDataset() {
        assertNull(renderer.findRangeBounds(null), "Expected null when dataset is null");
    }

    @Test
    public void testFindRangeBounds_EmptyDataset() {
        assertNull(renderer.findRangeBounds(dataset), "Expected null when dataset is empty");
    }

    @Test
    public void testFindRangeBounds_SinglePositiveValue() {
        double value = 1.0;
        dataset.addValue(value, "R1", "C1");
        Range expectedRange = new Range(0.0, value);
        assertEquals(expectedRange, renderer.findRangeBounds(dataset), "Expected range [0.0, 1.0] for single positive value");
    }

    @Test
    public void testFindRangeBounds_ExcludeBaseInRange() {
        double value = 1.0;
        dataset.addValue(value, "R1", "C1");
        renderer.setIncludeBaseInRange(false);
        Range expectedRange = new Range(value, value);
        assertEquals(expectedRange, renderer.findRangeBounds(dataset), "Expected range [1.0, 1.0] with base excluded");
    }

    @Test
    public void testFindRangeBounds_MultipleValuesIncludingNegative() {
        double positiveValue = 1.0;
        double negativeValue = -2.0;
        dataset.addValue(positiveValue, "R1", "C1");
        dataset.addValue(negativeValue, "R1", "C2");
        Range expectedRange = new Range(negativeValue, positiveValue);
        assertEquals(expectedRange, renderer.findRangeBounds(dataset), "Expected range [-2.0, 1.0] with multiple values");
    }

    @Test
    public void testFindRangeBounds_NullValue() {
        double positiveValue = 1.0;
        double negativeValue = -2.0;
        dataset.addValue(positiveValue, "R1", "C1");
        dataset.addValue(negativeValue, "R1", "C2");
        dataset.addValue(null, "R1", "C3");
        Range expectedRange = new Range(negativeValue, positiveValue);
        assertEquals(expectedRange, renderer.findRangeBounds(dataset), "Expected range [-2.0, 1.0] with null value");
    }

    @Test
    public void testFindRangeBounds_MultipleSeries() {
        double positiveValue = 1.0;
        double negativeValue1 = -2.0;
        double negativeValue2 = -6.0;
        dataset.addValue(positiveValue, "R1", "C1");
        dataset.addValue(negativeValue1, "R1", "C2");
        dataset.addValue(negativeValue2, "R2", "C1");
        Range expectedRange = new Range(negativeValue2, positiveValue);
        assertEquals(expectedRange, renderer.findRangeBounds(dataset), "Expected range [-6.0, 1.0] with multiple series");
    }

    @Test
    public void testFindRangeBounds_SeriesInvisible() {
        double positiveValue = 1.0;
        double negativeValue1 = -2.0;
        double negativeValue2 = -6.0;
        dataset.addValue(positiveValue, "R1", "C1");
        dataset.addValue(negativeValue1, "R1", "C2");
        dataset.addValue(negativeValue2, "R2", "C1");
        renderer.setSeriesVisible(1, Boolean.FALSE);
        Range expectedRange = new Range(negativeValue1, positiveValue);
        assertEquals(expectedRange, renderer.findRangeBounds(dataset), "Expected range [-2.0, 1.0] with series 1 invisible");
    }
Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

