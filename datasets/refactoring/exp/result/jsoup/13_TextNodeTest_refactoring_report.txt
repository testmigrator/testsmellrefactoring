File#1


Input#1
 @Test public void testBlank() {
        TextNode one = new TextNode("");
        TextNode two = new TextNode("     ");
        TextNode three = new TextNode("  \n\n   ");
        TextNode four = new TextNode("Hello");
        TextNode five = new TextNode("  \nHello ");

        assertTrue(one.isBlank());
        assertTrue(two.isBlank());
        assertTrue(three.isBlank());
        assertFalse(four.isBlank());
        assertFalse(five.isBlank());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#1
TextNode one;
TextNode two;
TextNode three;
TextNode four;
TextNode five;

private void setupTestBlank() {
    // Setup common objects for testing blank text nodes
    one = new TextNode("");
    two = new TextNode("     ");
    three = new TextNode("  \n\n   ");
    four = new TextNode("Hello");
    five = new TextNode("  \nHello ");
}

@Test
public void testBlank_EmptyString() {
    setupTestBlank();
    assertTrue("", one.isBlank());
}

@Test
public void testBlank_SpacesOnly() {
    setupTestBlank();
    assertTrue("Spaces only", two.isBlank());
}

@Test
public void testBlank_NewlinesAndSpaces() {
    setupTestBlank();
    assertTrue("Newlines and spaces", three.isBlank());
}

@Test
public void testBlank_NonBlankText() {
    setupTestBlank();
    assertFalse("Non-blank text", four.isBlank());
}

@Test
public void testBlank_TextWithLeadingWhitespace() {
    setupTestBlank();
    assertFalse("Text with leading whitespace", five.isBlank());
}



Input#2
 @Test public void testTextBean() {
        Document doc = Jsoup.parse("<p>One <span>two &amp;</span> three &amp;</p>");
        Element p = doc.select("p").first();

        Element span = doc.select("span").first();
        assertEquals("two &", span.text());
        TextNode spanText = (TextNode) span.childNode(0);
        assertEquals("two &", spanText.text());

        TextNode tn = (TextNode) p.childNode(2);
        assertEquals(" three &", tn.text());

        tn.text(" POW!");
        assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()));

        tn.attr(tn.nodeName(), "kablam &");
        assertEquals("kablam &", tn.text());
        assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()));
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#2
Document doc;
Element p;
Element span;

private void setupTestTextBean() {
    doc = Jsoup.parse("<p>One <span>two &amp;</span> three &amp;</p>");
    p = doc.select("p").first();
    span = doc.select("span").first();
}

@Test
public void testTextBean_SpanText() {
    setupTestTextBean();
    assertEquals("two &", span.text(), "Span text should be 'two &'");
    TextNode spanText = (TextNode) span.childNode(0);
    assertEquals("two &", spanText.text(), "Span text node should be 'two &'");
}

@Test
public void testTextBean_ParagraphText() {
    setupTestTextBean();
    TextNode tn = (TextNode) p.childNode(2);
    assertEquals(" three &", tn.text(), "Paragraph text node should be ' three &'");
}

@Test
public void testTextBean_TextModification() {
    setupTestTextBean();
    TextNode tn = (TextNode) p.childNode(2);
    tn.text(" POW!");
    assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()), "Paragraph HTML after text modification should be 'One <span>two &amp;</span> POW!'");
}

@Test
public void testTextBean_AttributeModification() {
    setupTestTextBean();
    TextNode tn = (TextNode) p.childNode(2);
    tn.text(" POW!");
    tn.attr(tn.nodeName(), "kablam &");
    assertEquals("kablam &", tn.text(), "Text node text after attribute modification should be 'kablam &'");
    assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()), "Paragraph HTML after attribute modification should be 'One <span>two &amp;</span>kablam &amp;'");
}


Input#3
 @Test public void testSplitText() {
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Element div = doc.select("div").first();
        TextNode tn = (TextNode) div.childNode(0);
        TextNode tail = tn.splitText(6);
        assertEquals("Hello ", tn.getWholeText());
        assertEquals("there", tail.getWholeText());
        tail.text("there!");
        assertEquals("Hello there!", div.text());
        assertTrue(tn.parent() == tail.parent());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#3
Document doc;
Element div;

private void setupTestSplitText() {
    doc = Jsoup.parse("<div>Hello there</div>");
    div = doc.select("div").first();
}

@Test
public void testSplitText_TextNodeContent() {
    setupTestSplitText();
    TextNode tn = (TextNode) div.childNode(0);
    TextNode tail = tn.splitText(6);
    assertEquals("Hello ", tn.getWholeText(), "The text node content after splitting should be 'Hello '");
    assertEquals("there", tail.getWholeText(), "The tail text node content after splitting should be 'there'");
}

@Test
public void testSplitText_DivTextContent() {
    setupTestSplitText();
    TextNode tn = (TextNode) div.childNode(0);
    TextNode tail = tn.splitText(6);
    tail.text("there!");
    assertEquals("Hello there!", div.text(), "The div text content after modifying the tail text should be 'Hello there!'");
}

@Test
public void testSplitText_ParentNodeCheck() {
    setupTestSplitText();
    TextNode tn = (TextNode) div.childNode(0);
    TextNode tail = tn.splitText(6);
    assertTrue(tn.parent() == tail.parent(), "The parent nodes of both text nodes should be the same");
}

Input#4
 @Test public void testSplitAnEmbolden() {
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Element div = doc.select("div").first();
        TextNode tn = (TextNode) div.childNode(0);
        TextNode tail = tn.splitText(6);
        tail.wrap("<b></b>");

        assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html())); // not great that we get \n<b>there there... must correct
    }
Smell List: ['Eager_Test']

Refactor#4
private void setupTestSplitAnEmbolden() {
    doc = Jsoup.parse("<div>Hello there</div>");
    div = doc.select("div").first();
    tn = (TextNode) div.childNode(0);
    tail = tn.splitText(6);
    tail.wrap("<b></b>");
}

@Test
public void testSplitAnEmbolden_SplitText() {
    setupTestSplitAnEmbolden();
    assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html())); // not great that we get \n<b>there there... must correct
}

Input#5

Refactor#5

Input#6
 @Test public void testLeadNodesHaveNoChildren() {
        Document doc = Jsoup.parse("<div>Hello there</div>");
        Element div = doc.select("div").first();
        TextNode tn = (TextNode) div.childNode(0);
        List<Node> nodes = tn.childNodes();
        assertEquals(0, nodes.size());
    }
Smell List: ['Magic_Number_Test']
Refactor#6
@Test
public void testLeadNodesHaveNoChildren() {
    Document doc = Jsoup.parse("<div>Hello there</div>");
    Element div = doc.select("div").first();
    TextNode tn = (TextNode) div.childNode(0);
    List<Node> nodes = tn.childNodes();
    int expectedChildCount = 0;
    assertEquals(expectedChildCount, nodes.size());
}



Input#7
 @Test public void testSpaceNormalise() {
        // https://github.com/jhy/jsoup/issues/1309
        String whole = "Two  spaces";
        String norm = "Two spaces";
        TextNode tn = new TextNode(whole); // there are 2 spaces between the words
        assertEquals(whole, tn.getWholeText());
        assertEquals(norm, tn.text());
        assertEquals(norm, tn.outerHtml());
        assertEquals(norm, tn.toString());

        Element el = new Element("p");
        el.appendChild(tn); // this used to change the context
        //tn.setParentNode(el); // set any parent
        assertEquals(whole, tn.getWholeText());
        assertEquals(norm, tn.text());
        assertEquals(norm, tn.outerHtml());
        assertEquals(norm, tn.toString());

        assertEquals("<p>" + norm + "</p>", el.outerHtml());
        assertEquals(norm, el.html());
        assertEquals(whole, el.wholeText());
    }
Smell List: ['Assertion_Roulette', 'Sensitive_Equality', 'Eager_Test', 'Duplicate_Assert']
Refactor#7
private TextNode createTextNode(String whole) {
    return new TextNode(whole);
}

private Element createParagraphWithTextNode(TextNode tn) {
    Element el = new Element("p");
    el.appendChild(tn);
    return el;
}

@Test
public void testTextNodeInitialization() {
    String whole = "Two  spaces";
    String norm = "Two spaces";
    TextNode tn = createTextNode(whole);

    assertEquals(whole, tn.getWholeText(), "Initial whole text should match the input string");
    assertEquals(norm, tn.text(), "Normalized text should match the expected normalized string");
    assertEquals(norm, tn.outerHtml(), "Outer HTML should match the expected normalized string");
    String actualValue = tn.toString();
    assertEquals(norm, actualValue, "String representation should match the expected normalized string");
}

@Test
public void testTextNodeAfterAppendingToElement() {
    String whole = "Two  spaces";
    String norm = "Two spaces";
    TextNode tn = createTextNode(whole);
    Element el = createParagraphWithTextNode(tn);

    assertEquals(whole, tn.getWholeText(), "Whole text should remain unchanged after appending to element");
    assertEquals(norm, tn.text(), "Normalized text should remain the same after appending to element");
    assertEquals(norm, tn.outerHtml(), "Outer HTML should remain the same after appending to element");
    String actualValue = tn.toString();
    assertEquals(norm, actualValue, "String representation should remain the same after appending to element");

    assertEquals("<p>" + norm + "</p>", el.outerHtml(), "Element's outer HTML should match the expected structure");
    assertEquals(norm, el.html(), "Element's inner HTML should match the expected normalized string");
    assertEquals(whole, el.wholeText(), "Element's whole text should match the initial whole text");
}


Input#8
@Test
    public void testClone() {
        // https://github.com/jhy/jsoup/issues/1176
        TextNode x = new TextNode("zzz");
        TextNode y = x.clone();

        assertNotSame(x, y);
        assertEquals(x.outerHtml(), y.outerHtml());

        y.text("yyy");
        assertNotEquals(x.outerHtml(), y.outerHtml());
        assertEquals("zzz", x.text());

        x.attributes(); // already cloned so no impact
        y.text("xxx");
        assertEquals("zzz", x.text());
        assertEquals("xxx", y.text());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Duplicate_Assert']

Refactor#8
private TextNode x;

@BeforeEach
public void setupTestClone() {
    x = new TextNode("zzz");
}

@Test
public void testClone_ObjectIdentity() {
    TextNode y = x.clone();
    assertNotSame(x, y, "Cloned object should not be the same instance as the original");
}

@Test
public void testClone_InitialContentEquality() {
    TextNode y = x.clone();
    assertEquals(x.outerHtml(), y.outerHtml(), "Cloned object should have the same initial content as the original");
}

@Test
public void testClone_ModifiedContentDifference() {
    TextNode y = x.clone();
    y.text("yyy");
    assertNotEquals(x.outerHtml(), y.outerHtml(), "Modifying the cloned object's text should change its content");
    assertEquals("zzz", x.text(), "Original object's text should remain unchanged after modifying the cloned object");
}

@Test
public void testClone_AttributesImpact() {
    TextNode y = x.clone();
    x.attributes(); // already cloned so no impact
    y.text("xxx");
    assertEquals("zzz", x.text(), "Original object's text should remain unchanged after modifying the cloned object's text");
    assertEquals("xxx", y.text(), "Cloned object's text should reflect the modification");
}


Input#9
 @Test
    public void testCloneAfterAttributesHit() {
        // https://github.com/jhy/jsoup/issues/1176
        TextNode x = new TextNode("zzz");
        x.attributes(); // moves content from leafnode value to attributes, which were missed in clone
        TextNode y = x.clone();
        y.text("xxx");
        assertEquals("zzz", x.text());
        assertEquals("xxx", y.text());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#9
@Test
public void testCloneAfterAttributesHit_OriginalText() {
    TextNode x = new TextNode("zzz");
    x.attributes();
    TextNode y = x.clone();
    y.text("xxx");
    assertEquals("Original text should remain unchanged after cloning and modifying the clone", "zzz", x.text());
}

@Test
public void testCloneAfterAttributesHit_CloneText() {
    TextNode x = new TextNode("zzz");
    x.attributes();
    TextNode y = x.clone();
    y.text("xxx");
    assertEquals("Cloned text should be modified as expected", "xxx", y.text());
}


Input#10
@Test
    public void testHasTextWhenIterating() {
        // https://github.com/jhy/jsoup/issues/1170
        Document doc = Jsoup.parse("<div>One <p>Two <p>Three");
        boolean foundFirst = false;
        for (Element el : doc.getAllElements()) {
            for (Node node : el.childNodes()) {
                if (node instanceof TextNode) {
                    TextNode textNode = (TextNode) node;
                    assertFalse(StringUtil.isBlank(textNode.text()));
                    if (!foundFirst) {
                        foundFirst = true;
                        assertEquals("One ", textNode.text());
                        assertEquals("One ", textNode.getWholeText());
                    }
                }
            }
        }
        assertTrue(foundFirst);
    }
Smell List: ['Assertion_Roulette', 'Conditional_Test_Logic', 'Eager_Test']
Refactor#10

private Document setupTestHasTextWhenIterating() {
    // https://github.com/jhy/jsoup/issues/1170
    return Jsoup.parse("<div>One <p>Two <p>Three");
}

private boolean verifyFirstTextNode(Document doc) {
    boolean foundFirst = false;
    for (Element el : doc.getAllElements()) {
        for (Node node : el.childNodes()) {
            if (node instanceof TextNode) {
                TextNode textNode = (TextNode) node;
                assertFalse(StringUtil.isBlank(textNode.text()), "Text node should not be blank: " + textNode.text());
                if (!foundFirst) {
                    foundFirst = true;
                    assertEquals("One ", textNode.text(), "First text node should be 'One '");
                    assertEquals("One ", textNode.getWholeText(), "First text node whole text should be 'One '");
                }
            }
        }
    }
    return foundFirst;
}

@Test
public void testHasTextWhenIterating_FirstTextNode() {
    Document doc = setupTestHasTextWhenIterating();
    assertTrue(verifyFirstTextNode(doc), "First text node should be found");
}

Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

