Input Parameters:
Test Code:
 @Test public void classNamesAndAttributeNameIsCaseInsensitive() {
        String html = "<p Class='SomeText AnotherText'>One</p>";
        Document doc = Jsoup.parse(html);
        Element p = doc.select("p").first();
        assertEquals("SomeText AnotherText", p.className());
        assertTrue(p.classNames().contains("SomeText"));
        assertTrue(p.classNames().contains("AnotherText"));
        assertTrue(p.hasClass("SomeText"));
        assertTrue(p.hasClass("sometext"));
        assertTrue(p.hasClass("AnotherText"));
        assertTrue(p.hasClass("anothertext"));

        Element p1 = doc.select(".SomeText").first();
        Element p2 = doc.select(".sometext").first();
        Element p3 = doc.select("[class=SomeText AnotherText]").first();
        Element p4 = doc.select("[Class=SomeText AnotherText]").first();
        Element p5 = doc.select("[class=sometext anothertext]").first();
        Element p6 = doc.select("[class=SomeText AnotherText]").first();
        Element p7 = doc.select("[class^=sometext]").first();
        Element p8 = doc.select("[class$=nothertext]").first();
        Element p9 = doc.select("[class^=sometext]").first();
        Element p10 = doc.select("[class$=AnotherText]").first();

        assertEquals("One", p1.text());
        assertEquals(p1, p2);
        assertEquals(p1, p3);
        assertEquals(p1, p4);
        assertEquals(p1, p5);
        assertEquals(p1, p6);
        assertEquals(p1, p7);
        assertEquals(p1, p8);
        assertEquals(p1, p9);
        assertEquals(p1, p10);
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Assertion_Roulette', 'Eager_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
private Document setupTestClassNamesAndAttributeNameIsCaseInsensitive() {
    String html = "<p Class='SomeText AnotherText'>One</p>";
    Document doc = Jsoup.parse(html);
    return doc;
}

@Test
public void testClassNamesAndAttributeNameIsCaseInsensitive_ClassNames() {
    Document doc = setupTestClassNamesAndAttributeNameIsCaseInsensitive();
    Element p = doc.select("p").first();
    assertEquals("SomeText AnotherText", p.className(), "Class names should match");
    assertTrue(p.classNames().contains("SomeText"), "Class names should contain 'SomeText'");
    assertTrue(p.classNames().contains("AnotherText"), "Class names should contain 'AnotherText'");
    assertTrue(p.hasClass("SomeText"), "Element should have class 'SomeText'");
    assertTrue(p.hasClass("sometext"), "Element should have class 'sometext' (case-insensitive)");
    assertTrue(p.hasClass("AnotherText"), "Element should have class 'AnotherText'");
    assertTrue(p.hasClass("anothertext"), "Element should have class 'anothertext' (case-insensitive)");
}

@Test
public void testClassNamesAndAttributeNameIsCaseInsensitive_Selectors() {
    Document doc = setupTestClassNamesAndAttributeNameIsCaseInsensitive();
    Element p1 = doc.select(".SomeText").first();
    Element p2 = doc.select(".sometext").first();
    Element p3 = doc.select("[class=SomeText AnotherText]").first();
    Element p4 = doc.select("[Class=SomeText AnotherText]").first();
    Element p5 = doc.select("[class=sometext anothertext]").first();
    Element p6 = doc.select("[class=SomeText AnotherText]").first();
    Element p7 = doc.select("[class^=sometext]").first();
    Element p8 = doc.select("[class$=nothertext]").first();
    Element p9 = doc.select("[class^=sometext]").first();
    Element p10 = doc.select("[class$=AnotherText]").first();

    assertEquals("One", p1.text(), "Text content should be 'One'");
    assertEquals(p1, p2, "Elements selected by '.SomeText' and '.sometext' should be the same");
    assertEquals(p1, p3, "Elements selected by '.SomeText' and '[class=SomeText AnotherText]' should be the same");
    assertEquals(p1, p4, "Elements selected by '.SomeText' and '[Class=SomeText AnotherText]' should be the same");
    assertEquals(p1, p5, "Elements selected by '.SomeText' and '[class=sometext anothertext]' should be the same");
    assertEquals(p1, p6, "Elements selected by '.SomeText' and '[class=SomeText AnotherText]' should be the same");
    assertEquals(p1, p7, "Elements selected by '.SomeText' and '[class^=sometext]' should be the same");
    assertEquals(p1, p8, "Elements selected by '.SomeText' and '[class$=nothertext]' should be the same");
    assertEquals(p1, p9, "Elements selected by '.SomeText' and '[class^=sometext]' should be the same");
    assertEquals(p1, p10, "Elements selected by '.SomeText' and '[class$=AnotherText]' should be the same");
}


