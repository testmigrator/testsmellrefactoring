Input Parameters:
Test Code:
 @Test public void getElementsByTagName() {
        Document doc = Jsoup.parse(reference);
        List<Element> divs = doc.getElementsByTag("div");
        assertEquals(2, divs.size());
        assertEquals("div1", divs.get(0).id());
        assertEquals("div2", divs.get(1).id());

        List<Element> ps = doc.getElementsByTag("p");
        assertEquals(2, ps.size());
        assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText());
        assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText());
        List<Element> ps2 = doc.getElementsByTag("P");
        assertEquals(ps, ps2);

        List<Element> imgs = doc.getElementsByTag("img");
        assertEquals("foo.png", imgs.get(0).attr("src"));

        List<Element> empty = doc.getElementsByTag("wtf");
        assertEquals(0, empty.size());
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
private Document setupTestGetElementsByTagName() {
    return Jsoup.parse(reference);
}

@Test
public void testGetElementsByTagName_Divs() {
    Document doc = setupTestGetElementsByTagName();
    List<Element> divs = doc.getElementsByTag("div");

    int expectedDivCount = 2;
    assertEquals(expectedDivCount, divs.size(), "Expected 2 div elements");

    String expectedFirstDivId = "div1";
    assertEquals(expectedFirstDivId, divs.get(0).id(), "Expected first div ID to be 'div1'");

    String expectedSecondDivId = "div2";
    assertEquals(expectedSecondDivId, divs.get(1).id(), "Expected second div ID to be 'div2'");
}

@Test
public void testGetElementsByTagName_Paragraphs() {
    Document doc = setupTestGetElementsByTagName();
    List<Element> ps = doc.getElementsByTag("p");

    int expectedPCount = 2;
    assertEquals(expectedPCount, ps.size(), "Expected 2 paragraph elements");

    String expectedFirstPText = "Hello";
    assertEquals(expectedFirstPText, ((TextNode) ps.get(0).childNode(0)).getWholeText(), "Expected first paragraph text to be 'Hello'");

    String expectedSecondPText = "Another ";
    assertEquals(expectedSecondPText, ((TextNode) ps.get(1).childNode(0)).getWholeText(), "Expected second paragraph text to be 'Another '");

    List<Element> ps2 = doc.getElementsByTag("P");
    assertEquals(ps, ps2, "Expected case-insensitive tag matching for paragraphs");
}

@Test
public void testGetElementsByTagName_Images() {
    Document doc = setupTestGetElementsByTagName();
    List<Element> imgs = doc.getElementsByTag("img");

    String expectedImgSrc = "foo.png";
    assertEquals(expectedImgSrc, imgs.get(0).attr("src"), "Expected image source to be 'foo.png'");
}

@Test
public void testGetElementsByTagName_NonExistentTag() {
    Document doc = setupTestGetElementsByTagName();
    List<Element> empty = doc.getElementsByTag("wtf");

    int expectedEmptyCount = 0;
    assertEquals(expectedEmptyCount, empty.size(), "Expected 0 elements for non-existent tag 'wtf'");
}


