Input Parameters:
Test Code:
 @Test
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {
        Document doc = new Document("");
        Element body = doc.appendElement("body");
        body.appendElement("div1");
        body.appendElement("div2");
        final Element div3 = body.appendElement("div3");
        div3.text("Check");
        final Element div4 = body.appendElement("div4");

        ArrayList<Element> toMove = new ArrayList<>();
        toMove.add(div3);
        toMove.add(div4);

        body.insertChildren(0, toMove);

        String result = doc.toString().replaceAll("\\s+", "");
        assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result);
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Eager_Test']
Smell Description List: ['Test Smell Typeï¼šEager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
private void setupAppendMustCorrectlyMoveChildrenInsideOneParentElement() {
    Document doc = new Document("");
    Element body = doc.appendElement("body");
    body.appendElement("div1");
    body.appendElement("div2");
    final Element div3 = body.appendElement("div3");
    div3.text("Check");
    final Element div4 = body.appendElement("div4");

    ArrayList<Element> toMove = new ArrayList<>();
    toMove.add(div3);
    toMove.add(div4);

    body.insertChildren(0, toMove);
}

@Test
public void testAppendMustCorrectlyMoveChildrenInsideOneParentElement_Div3Position() {
    setupAppendMustCorrectlyMoveChildrenInsideOneParentElement();
    Document doc = new Document("");
    Element body = doc.select("body").first();
    String result = doc.toString().replaceAll("\\s+", "");
    assertTrue(result.startsWith("<body><div3>"));
}

@Test
public void testAppendMustCorrectlyMoveChildrenInsideOneParentElement_Div4Position() {
    setupAppendMustCorrectlyMoveChildrenInsideOneParentElement();
    Document doc = new Document("");
    Element body = doc.select("body").first();
    String result = doc.toString().replaceAll("\\s+", "");
    assertTrue(result.contains("<div3>Check</div3><div4>"));
}

@Test
public void testAppendMustCorrectlyMoveChildrenInsideOneParentElement_Div1Position() {
    setupAppendMustCorrectlyMoveChildrenInsideOneParentElement();
    Document doc = new Document("");
    Element body = doc.select("body").first();
    String result = doc.toString().replaceAll("\\s+", "");
    assertTrue(result.contains("<div4></div4><div1>"));
}

@Test
public void testAppendMustCorrectlyMoveChildrenInsideOneParentElement_Div2Position() {
    setupAppendMustCorrectlyMoveChildrenInsideOneParentElement();
    Document doc = new Document("");
    Element body = doc.select("body").first();
    String result = doc.toString().replaceAll("\\s+", "");
    assertTrue(result.endsWith("</div2></body>"));
}


