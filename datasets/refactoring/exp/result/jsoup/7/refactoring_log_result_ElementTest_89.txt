Input Parameters:
Test Code:
 @Test
    public void testReparentSeperateNodes() {
        String html = "<div><p>One<p>Two";
        Document doc = Jsoup.parse(html);
        Element new1 = new Element("p").text("Three");
        Element new2 = new Element("p").text("Four");

        doc.body().insertChildren(-1, new1, new2);
        assertEquals("<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>", TextUtil.stripNewlines(doc.body().html()));

        // note that these get moved from the above - as not copied
        doc.body().insertChildren(0, new1, new2);
        assertEquals("<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()));

        doc.body().insertChildren(0, new2.clone(), new1.clone());
        assertEquals("<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html()));

        // shifted to end
        doc.body().appendChild(new1);
        assertEquals("<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>", TextUtil.stripNewlines(doc.body().html()));
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Assertion_Roulette', 'Eager_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
private static final String INITIAL_HTML = "<div><p>One<p>Two";
private static final String EXPECTED_HTML_AFTER_INSERTION = "<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>";
private static final String EXPECTED_HTML_AFTER_MOVE = "<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>";
private static final String EXPECTED_HTML_AFTER_CLONE = "<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>";
private static final String EXPECTED_HTML_AFTER_APPEND = "<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>";

private Document doc;

@BeforeEach
void setup() {
    doc = Jsoup.parse(INITIAL_HTML);
}

@Test
public void testInsertChildrenAtEnd() {
    Element new1 = new Element("p").text("Three");
    Element new2 = new Element("p").text("Four");

    doc.body().insertChildren(-1, new1, new2);

    assertEquals(EXPECTED_HTML_AFTER_INSERTION, TextUtil.stripNewlines(doc.body().html()),
                 "After inserting children at the end, the body HTML should match the expected HTML.");
}

@Test
public void testInsertChildrenAtStart() {
    Element new1 = new Element("p").text("Three");
    Element new2 = new Element("p").text("Four");

    doc.body().insertChildren(0, new1, new2);

    assertEquals(EXPECTED_HTML_AFTER_MOVE, TextUtil.stripNewlines(doc.body().html()),
                 "After moving elements to the start, the body HTML should match the expected HTML.");
}

@Test
public void testInsertChildrenWithClones() {
    Element new1 = new Element("p").text("Three");
    Element new2 = new Element("p").text("Four");

    doc.body().insertChildren(0, new2.clone(), new1.clone());

    assertEquals(EXPECTED_HTML_AFTER_CLONE, TextUtil.stripNewlines(doc.body().html()),
                 "After inserting cloned children, the body HTML should match the expected HTML.");
}

@Test
public void testAppendChild() {
    Element new1 = new Element("p").text("Three");

    doc.body().appendChild(new1);

    assertEquals(EXPECTED_HTML_AFTER_APPEND, TextUtil.stripNewlines(doc.body().html()),
                 "After appending a child, the body HTML should match the expected HTML.");
}

