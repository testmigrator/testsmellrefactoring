Input Parameters:
Test Code:
 @Test public void testShallowClone() {
        String base = "http://example.com/";
        Document doc = Jsoup.parse("<div id=1 class=one><p id=2 class=two>One", base);
        Element d = doc.selectFirst("div");
        Element p = doc.selectFirst("p");
        TextNode t = p.textNodes().get(0);

        Element d2 = d.shallowClone();
        Element p2 = p.shallowClone();
        TextNode t2 = (TextNode) t.shallowClone();

        assertEquals(1, d.childNodeSize());
        assertEquals(0, d2.childNodeSize());

        assertEquals(1, p.childNodeSize());
        assertEquals(0, p2.childNodeSize());

        assertEquals("", p2.text());
        assertEquals("One", t2.text());

        assertEquals("two", p2.className());
        p2.removeClass("two");
        assertEquals("two", p.className());

        d2.append("<p id=3>Three");
        assertEquals(1, d2.childNodeSize());
        assertEquals("Three", d2.text());
        assertEquals("One", d.text());
        assertEquals(base, d2.baseUri());
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
private static final String BASE_URI = "http://example.com/";
private static final String DIV_ID = "1";
private static final String DIV_CLASS = "one";
private static final String P_ID = "2";
private static final String P_CLASS = "two";
private static final String TEXT_CONTENT = "One";
private static final String NEW_P_ID = "3";
private static final String NEW_TEXT_CONTENT = "Three";

private void setupTestShallowClone() {
    Document doc = Jsoup.parse("<div id=" + DIV_ID + " class=" + DIV_CLASS + "><p id=" + P_ID + " class=" + P_CLASS + ">" + TEXT_CONTENT, BASE_URI);
    Element d = doc.selectFirst("div");
    Element p = doc.selectFirst("p");
    TextNode t = p.textNodes().get(0);

    Element d2 = d.shallowClone();
    Element p2 = p.shallowClone();
    TextNode t2 = (TextNode) t.shallowClone();

    testChildNodeSize(d, d2);
    testTextContent(p2, t2);
    testClassName(p, p2);
    testAppendingElement(d, d2);
}

@Test
public void testChildNodeSize() {
    setupTestShallowClone();
    assertEquals(1, d.childNodeSize(), "Original div should have 1 child node");
    assertEquals(0, d2.childNodeSize(), "Cloned div should have 0 child nodes");

    assertEquals(1, p.childNodeSize(), "Original p should have 1 child node");
    assertEquals(0, p2.childNodeSize(), "Cloned p should have 0 child nodes");
}

@Test
public void testTextContent() {
    setupTestShallowClone();
    assertEquals("", p2.text(), "Cloned p should have no text content");
    assertEquals(TEXT_CONTENT, t2.text(), "Cloned text node should have the same text content");
}

@Test
public void testClassName() {
    setupTestShallowClone();
    assertEquals(P_CLASS, p2.className(), "Cloned p should have the same class name");
    p2.removeClass(P_CLASS);
    assertEquals(P_CLASS, p.className(), "Original p should retain its class name after removing from cloned p");
}

@Test
public void testAppendingElement() {
    setupTestShallowClone();
    d2.append("<p id=" + NEW_P_ID + ">" + NEW_TEXT_CONTENT + "</p>");
    assertEquals(1, d2.childNodeSize(), "Cloned div should have 1 child node after appending");
    assertEquals(NEW_TEXT_CONTENT, d2.text(), "Cloned div should have the new text content");
    assertEquals(TEXT_CONTENT, d.text(), "Original div should retain its original text content");
    assertEquals(BASE_URI, d2.baseUri(), "Cloned div should have the same base URI");
}


