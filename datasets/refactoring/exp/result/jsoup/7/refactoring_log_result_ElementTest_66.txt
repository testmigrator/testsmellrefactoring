Input Parameters:
Test Code:
 @Test
    public void testChainedRemoveAttributes() {
        String html = "<a one two three four>Text</a>";
        Document doc = Jsoup.parse(html);
        Element a = doc.select("a").first();
        a
            .removeAttr("zero")
            .removeAttr("one")
            .removeAttr("two")
            .removeAttr("three")
            .removeAttr("four")
            .removeAttr("five");
        assertEquals("<a>Text</a>", a.outerHtml());
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Eager_Test']
Smell Description List: ['Test Smell Typeï¼šEager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
private void setupTestChainedRemoveAttributes() {
    String html = "<a one two three four>Text</a>";
    Document doc = Jsoup.parse(html);
    Element a = doc.select("a").first();
}

@Test
public void testChainedRemoveAttributes_RemoveZero() {
    setupTestChainedRemoveAttributes();
    a.removeAttr("zero");
    assertEquals("<a one two three four>Text</a>", a.outerHtml());
}

@Test
public void testChainedRemoveAttributes_RemoveOne() {
    setupTestChainedRemoveAttributes();
    a.removeAttr("one");
    assertEquals("<a two three four>Text</a>", a.outerHtml());
}

@Test
public void testChainedRemoveAttributes_RemoveTwo() {
    setupTestChainedRemoveAttributes();
    a.removeAttr("two");
    assertEquals("<a one three four>Text</a>", a.outerHtml());
}

@Test
public void testChainedRemoveAttributes_RemoveThree() {
    setupTestChainedRemoveAttributes();
    a.removeAttr("three");
    assertEquals("<a one two four>Text</a>", a.outerHtml());
}

@Test
public void testChainedRemoveAttributes_RemoveFour() {
    setupTestChainedRemoveAttributes();
    a.removeAttr("four");
    assertEquals("<a one two three>Text</a>", a.outerHtml());
}

@Test
public void testChainedRemoveAttributes_RemoveFive() {
    setupTestChainedRemoveAttributes();
    a.removeAttr("five");
    assertEquals("<a one two three four>Text</a>", a.outerHtml());
}


