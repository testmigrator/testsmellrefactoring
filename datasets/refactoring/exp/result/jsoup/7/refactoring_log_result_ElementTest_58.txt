Input Parameters:
Test Code:
 @Test
    public void insertChildrenAtPosition() {
        Document doc = Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
        Element div1 = doc.select("div").get(0);
        Elements p1s = div1.select("p");
        Element div2 = doc.select("div").get(1);

        assertEquals(2, div2.childNodeSize());
        div2.insertChildren(-1, p1s);
        assertEquals(2, div1.childNodeSize()); // moved two out
        assertEquals(4, div2.childNodeSize());
        assertEquals(3, p1s.get(1).siblingIndex()); // should be last

        List<Node> els = new ArrayList<>();
        Element el1 = new Element(Tag.valueOf("span"), "").text("Span1");
        Element el2 = new Element(Tag.valueOf("span"), "").text("Span2");
        TextNode tn1 = new TextNode("Text4");
        els.add(el1);
        els.add(el2);
        els.add(tn1);

        assertNull(el1.parent());
        div2.insertChildren(-2, els);
        assertEquals(div2, el1.parent());
        assertEquals(7, div2.childNodeSize());
        assertEquals(3, el1.siblingIndex());
        assertEquals(4, el2.siblingIndex());
        assertEquals(5, tn1.siblingIndex());
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
private Document setupDocument() {
    return Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
}

private Element getDiv1(Document doc) {
    return doc.select("div").get(0);
}

private Element getDiv2(Document doc) {
    return doc.select("div").get(1);
}

private List<Node> createNodes() {
    List<Node> els = new ArrayList<>();
    Element el1 = new Element(Tag.valueOf("span"), "").text("Span1");
    Element el2 = new Element(Tag.valueOf("span"), "").text("Span2");
    TextNode tn1 = new TextNode("Text4");
    els.add(el1);
    els.add(el2);
    els.add(tn1);
    return els;
}

@Test
public void testInsertChildrenAtPosition_InitialChildNodeSize() {
    Document doc = setupDocument();
    Element div2 = getDiv2(doc);

    int expectedChildNodeSize = 2;
    assertEquals(expectedChildNodeSize, div2.childNodeSize(), "Initial child node size of div2 should be 2");
}

@Test
public void testInsertChildrenAtPosition_InsertPElements() {
    Document doc = setupDocument();
    Element div1 = getDiv1(doc);
    Element div2 = getDiv2(doc);
    Elements p1s = div1.select("p");

    int expectedDiv1ChildNodeSizeAfterMove = 2;
    int expectedDiv2ChildNodeSizeAfterInsert = 4;
    int expectedSiblingIndexForLastP = 3;

    div2.insertChildren(-1, p1s);
    assertEquals(expectedDiv1ChildNodeSizeAfterMove, div1.childNodeSize(), "Child node size of div1 after moving elements should be 2");
    assertEquals(expectedDiv2ChildNodeSizeAfterInsert, div2.childNodeSize(), "Child node size of div2 after inserting elements should be 4");
    assertEquals(expectedSiblingIndexForLastP, p1s.get(1).siblingIndex(), "The second p element should be the last sibling in div2");
}

@Test
public void testInsertChildrenAtPosition_InsertCustomNodes() {
    Document doc = setupDocument();
    Element div2 = getDiv2(doc);
    List<Node> nodes = createNodes();

    assertNull(nodes.get(0).parent(), "Parent of the first span should be null before insertion");
    div2.insertChildren(-2, nodes);
    assertEquals(div2, nodes.get(0).parent(), "Parent of the first span should be div2 after insertion");
    int expectedChildNodeSizeAfterInsert = 7;
    assertEquals(expectedChildNodeSizeAfterInsert, div2.childNodeSize(), "Child node size of div2 after inserting custom nodes should be 7");
    int expectedSiblingIndexForFirstSpan = 3;
    int expectedSiblingIndexForSecondSpan = 4;
    int expectedSiblingIndexForText4 = 5;
    assertEquals(expectedSiblingIndexForFirstSpan, nodes.get(0).siblingIndex(), "The first span should have a sibling index of 3");
    assertEquals(expectedSiblingIndexForSecondSpan, nodes.get(1).siblingIndex(), "The second span should have a sibling index of 4");
    assertEquals(expectedSiblingIndexForText4, nodes.get(2).siblingIndex(), "The text node should have a sibling index of 5");
}


