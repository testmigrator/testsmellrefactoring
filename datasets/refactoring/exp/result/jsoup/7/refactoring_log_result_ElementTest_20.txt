Input Parameters:
Test Code:
 @Test public void testHasClassDomMethods() {
        Tag tag = Tag.valueOf("a");
        Attributes attribs = new Attributes();
        Element el = new Element(tag, "", attribs);
        
        attribs.put("class", "toto");
        boolean hasClass = el.hasClass("toto");
        assertTrue(hasClass);
        
        attribs.put("class", " toto");
        hasClass = el.hasClass("toto");
        assertTrue(hasClass);
        
        attribs.put("class", "toto ");
        hasClass = el.hasClass("toto");
        assertTrue(hasClass);
        
        attribs.put("class", "\ttoto ");
        hasClass = el.hasClass("toto");
        assertTrue(hasClass);
        
        attribs.put("class", "  toto ");
        hasClass = el.hasClass("toto");
        assertTrue(hasClass);
        
        attribs.put("class", "ab");
        hasClass = el.hasClass("toto");
        assertFalse(hasClass);
        
        attribs.put("class", "     ");
        hasClass = el.hasClass("toto");
        assertFalse(hasClass);
        
        attribs.put("class", "tototo");
        hasClass = el.hasClass("toto");
        assertFalse(hasClass);
        
        attribs.put("class", "raulpismuth  ");
        hasClass = el.hasClass("raulpismuth");
        assertTrue(hasClass);
        
        attribs.put("class", " abcd  raulpismuth efgh ");
        hasClass = el.hasClass("raulpismuth");
        assertTrue(hasClass);
        
        attribs.put("class", " abcd efgh raulpismuth");
        hasClass = el.hasClass("raulpismuth");
        assertTrue(hasClass);
        
        attribs.put("class", " abcd efgh raulpismuth ");
        hasClass = el.hasClass("raulpismuth");
        assertTrue(hasClass);
    }
Context: /org/jsoup/nodes/Element
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Duplicate_Assert']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Duplicate Assert\n\nFeature:\nA test method that contains more than one assertion statement with the same parameters.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Duplicate Assert\n  Description: "If the assertion logic is the same but tested with different inputs, prioritize splitting the test into multiple separate methods with a single assertion each."\n  Steps:\n    - Step:\n        Description: "Identify duplicate assertions that test the same condition with different inputs."\n        Action: IdentifySameAssertions\n        Parameters:\n          SourcePattern: |\n            assert(expectedA, ...)\n            assert(expectedB, ...)\n    - Step:\n        Description: "If the assertions are simple and few, split the test into multiple methods, each with a single assertion."\n        Action: SplitMethod\n        Parameters:\n          TargetType: Method\n          Conditions: |\n            - The assertions are simple and do not involve complex variations.\n    - Step:\n        Description: "If there are many similar assertions with significant variations, convert the test to a parameterized test."\n        Action: ConvertToParameterizedTest\n        Parameters:\n          TargetType: Method\n          Conditions: |\n            - There are many test cases with similar logic that would benefit from parameterization.\n            - The variations are extensive, with a large number of inputs or expected outputs.\n    - Step:\n        Description: "Add @CsvSource annotation to declare parameterized values."\n        Action: AddAnnotation\n        Parameters:\n          TargetType: Method\n          Annotation: |\n            @CsvSource({\n              "{paramValues}"\n            })\n    - Step:\n        Description: "Refactor the test method to use parameterized values."\n        Action: RefactorMethod\n        Parameters:\n          SourcePattern: |\n            public void T() {\n              {originalStatements}\n            }\n          ReplacementPattern: |\n            public void T({parameterNames}) {\n              {refactoredStatements}\n            }\n  Example:\n    Before: |\n      @Test\n      public void testDuplicateAssertions() {\n        assertEquals(expectedA, methodUnderTest(a));\n        assertEquals(expectedB, methodUnderTest(b));\n      }\n    After: |\n      @Test\n      public void testWithInputA() {\n        assertEquals(expectedA, methodUnderTest(a));\n      }\n      @Test\n      public void testWithInputB() {\n        assertEquals(expectedB, methodUnderTest(b));\n      }\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All duplicate assertions have been refactored using JUnit 5 Parameterized Tests, where the lists of parameterizable values are declared in a specific annotation, and the test method is executed independently m times.\n']

Refactored Code: 
 
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Tag;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class ElementTestClassDomMethodsTest {

    private Element el;

    @BeforeEach
    public void setupTestHasClassDomMethods() {
        Tag tag = Tag.valueOf("a");
        Attributes attribs = new Attributes();
        el = new Element(tag, "", attribs);
    }

    @Test
    public void testHasClass_Toto_PresentAtStart() {
        el.attributes().put("class", "toto");
        assertTrue(el.hasClass("toto"), "Class 'toto' should be found at the start of the class attribute.");
    }

    @Test
    public void testHasClass_Toto_PresentWithLeadingSpace() {
        el.attributes().put("class", " toto");
        assertTrue(el.hasClass("toto"), "Class 'toto' should be found with leading space.");
    }

    @Test
    public void testHasClass_Toto_PresentWithTrailingSpace() {
        el.attributes().put("class", "toto ");
        assertTrue(el.hasClass("toto"), "Class 'toto' should be found with trailing space.");
    }

    @Test
    public void testHasClass_Toto_PresentWithTabAndTrailingSpace() {
        el.attributes().put("class", "\ttoto ");
        assertTrue(el.hasClass("toto"), "Class 'toto' should be found with tab and trailing space.");
    }

    @Test
    public void testHasClass_Toto_PresentWithMultipleSpaces() {
        el.attributes().put("class", "  toto ");
        assertTrue(el.hasClass("toto"), "Class 'toto' should be found with multiple spaces.");
    }

    @Test
    public void testHasClass_Toto_NotPresent() {
        el.attributes().put("class", "ab");
        assertFalse(el.hasClass("toto"), "Class 'toto' should not be found.");
    }

    @Test
    public void testHasClass_Toto_NotPresentWithOnlySpaces() {
        el.attributes().put("class", "     ");
        assertFalse(el.hasClass("toto"), "Class 'toto' should not be found when only spaces are present.");
    }

    @Test
    public void testHasClass_Toto_NotPresentInCompositeClass() {
        el.attributes().put("class", "tototo");
        assertFalse(el.hasClass("toto"), "Class 'toto' should not be found in composite class 'tototo'.");
    }

    @Test
    public void testHasClass_Raulpismuth_PresentAtEnd() {
        el.attributes().put("class", "raulpismuth  ");
        assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found at the end of the class attribute.");
    }

    @Test
    public void testHasClass_Raulpismuth_PresentInMiddle() {
        el.attributes().put("class", " abcd  raulpismuth efgh ");
        assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found in the middle of the class attribute.");
    }

    @Test
    public void testHasClass_Raulpismuth_PresentAtEndWithSpaces() {
        el.attributes().put("class", " abcd efgh raulpismuth");
        assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found at the end with spaces.");
    }

    @Test
    public void testHasClass_Raulpismuth_PresentWithMultipleSpaces() {
        el.attributes().put("class", " abcd efgh raulpismuth ");
        assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found with multiple spaces.");
    }
}


