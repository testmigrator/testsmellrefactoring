Input Parameters:
Test Code:
 @Test
    public void testHtmlNoPretty() {
        Document doc = Jsoup.parse("<!-- a simple comment -->");
        doc.outputSettings().prettyPrint(false);
        assertEquals("<!-- a simple comment --><html><head></head><body></body></html>", doc.html());
        Node node = doc.childNode(0);
        Comment c1 = (Comment) node;
        assertEquals("<!-- a simple comment -->", c1.outerHtml());
    }
Context: /org/jsoup/nodes/Comment
Smell List: ['Assertion_Roulette']
Smell Description List: ['Test Smell Typeï¼šAssertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n']

Refactored Code: 
 
@Test
public void testHtmlNoPretty() {
    Document doc = Jsoup.parse("<!-- a simple comment -->");
    doc.outputSettings().prettyPrint(false);
    assertEquals("<!-- a simple comment --><html><head></head><body></body></html>", doc.html(), "HTML output should match expected string when pretty printing is disabled");
    Node node = doc.childNode(0);
    Comment c1 = (Comment) node;
    assertEquals("<!-- a simple comment -->", c1.outerHtml(), "Comment outer HTML should match expected string");
}


