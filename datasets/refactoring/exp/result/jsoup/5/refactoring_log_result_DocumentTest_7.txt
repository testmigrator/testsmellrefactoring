Input Parameters:
Test Code:
 @Test public void testLocation() throws IOException {
    	File in = ParseTest.getFile("/htmltests/yahoo-jp.html");
        Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html");
        String location = doc.location();
        String baseUri = doc.baseUri();
        assertEquals("http://www.yahoo.co.jp/index.html",location);
        assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/",baseUri);
        in = ParseTest.getFile("/htmltests/nyt-article-1.html");
        doc = Jsoup.parse(in, null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp");
        location = doc.location();
        baseUri = doc.baseUri();
        assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp",location);
        assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp",baseUri);
    }
Context: /org/jsoup/nodes/Document
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Mystery_Guest', 'Eager_Test', 'Resource_Optimism']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Exception_Catching_Throwing\n\nFeature:\nA test method that contains either a throw statement or a catch clause.\n', 'Test Smell Type：Mystery Guest\n\nFeature:\nA test method containing object instances of files and databases classes.\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Resource Optimism\n\nFeature:\nThis smell occurs when a test method makes an optimistic assumption that the external resource (e.g., File), utilized by the test method, exists.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Exception_Catching_Throwing\n  Description: Ensure tests use assertDoesNotThrow to verify no exceptions are thrown and remove any throws declaration in test methods.\n  Steps:\n    - Step:\n        Description: "Handle try-catch blocks containing \'fail\' calls"\n        Action: ReplaceTryCatchWithAssertThrows\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n              fail();\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            {exception} exception = assertThrows({exception}.class, () -> {\n              {tryBlock}\n            });\n            {catchBlock}\n    - Step:\n        Description: "Handle test methods with \'throws\' declaration but no try-catch block"\n        Action: WrapWithAssertDoesNotThrow\n        Parameters:\n          DetectionPattern: |\n            MethodDeclaration [throws!=null && BodyContainsTryCatch=false]\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {methodBody}\n            }, "Unexpected exception occurred during the test");\n\n    - Step:\n        Description: "Handle test methods with try-catch blocks without \'fail\' calls"\n        Action: ReplaceTryCatchWithoutFail\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {tryBlock}\n            });\n            {catchBlock}\n\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        try {\n            stmt\'\n            fail();\n        } catch (E) {\n            evs\n        }\n        stmt\'\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assertThrows(E.class, () -> {\n            stmt\'\n        });\n        evs\n        stmt\'\'\n      }\n  Variables:\n    exception: E\n    tryBlock: stmt\'\n    catchBlock: evs\n    tryBlockStatement: stmt\'i\n', 'RefactorRule:\n  SmellType: Mystery Guest\n  Description: "Use JUnit 5 Temporary Directory feature to handle temporary files in a more controlled manner."\n  Steps:\n    - Step:\n        Description: "Annotate test method with @TempDir to inject a temporary directory"\n        Action: AddAnnotation\n        Parameters:\n          TargetType: Method\n          Annotation: @TempDir File {tempDirVariable}\n    - Step:\n        Description: "Replace direct creation of temporary files with creation using the injected temporary directory"\n        Action: ReplaceMethodCall\n        Parameters:\n          TargetMethod: "File.createTempFile"\n          ReplacementPattern: "{tempDirVariable}.createTempFile"\n          Import: "org.junit.jupiter.api.io.TempDir"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          File.createTempFile(params)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T(@TempDir File D) {\n          stmt\n          D.createTempFile(params)\n          stmt\'\n      }\n  Variables:\n    tempDirVariable: "D"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Resource Optimism\n  Description: "Add an assertion to ensure that the required file or directory exists before performing operations on it, or give a hint if the test logic does not require file existence check."\n  Steps:\n    - Step:\n        Description: "Check if the file existence is critical for the test, and add an assertion if necessary."\n        Action: |\n          If {fileVariable} requires existence check:\n            AddAssertion\n            Parameters:\n              TargetPattern: |\n                File {fileVariable} = ...;\n              Assertion: |\n                if (!{fileVariable}.exists() || {fileVariable}.isDirectory()) {\n                    fail("File or directory does not exist or is not of the expected type.");\n                }\n          Else:\n            ProvideHint\n            Parameters:\n              HintMessage: "The file existence is not critical for this test. Consider reviewing if a file check is necessary. For example, \'new File(\\"\\")\' does not represent a real file."\n\n  Example:\n   Before: |\n      @Test\n      public void T() {\n        File outputFile = ...;\n        stmt\n        assert\n      }\n    After: |\n      @Test\n      public void T() {\n        File outputFile = ...;\n        if (!outputFile.exists() || outputFile.isDirectory()) {\n            // Hint: The file does not exist, but this may be expected behavior for the test.\n        }\n        stmt\n        assert\n      }\n  Variables:\n    fileVariable: "file"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All exception handling has been refactored to use the JUnit 5 Exception Handling feature.\n', '[ ] All instances of the ‘Mystery Guest’ code smell have been refactored using the JUnit 5 Temporary Directory feature, annotating a temporary directory and considering its use in the external file instantiation steps.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All instances of the ‘Resource Optimism’ code smell have been refactored by adding an assertion to check for file existence.\n']

Refactored Code: 
 
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.jsoup.Jsoup;

public class DocumentTest {

    @TempDir
    public File tempDir;

    private File yahooFile;
    private File nytFile;

    @BeforeEach
    public void setUp() throws IOException {
        yahooFile = new File(tempDir, "yahoo-jp.html");
        assertTrue(yahooFile.createNewFile(), "Failed to create Yahoo file");

        nytFile = new File(tempDir, "nyt-article-1.html");
        assertTrue(nytFile.createNewFile(), "Failed to create NYT file");
    }

    @Test
    public void testYahooLocationAndBaseUri() {
        File in = yahooFile;
        if (!in.exists() || in.isDirectory()) {
            fail("File or directory does not exist or is not of the expected type.");
        }
        Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html");
        String location = doc.location();
        String baseUri = doc.baseUri();
        assertEquals("http://www.yahoo.co.jp/index.html", location, "Yahoo location should match the expected URL");
        assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", baseUri, "Yahoo base URI should match the expected URL");
    }

    @Test
    public void testNytimesLocationAndBaseUri() {
        File in = nytFile;
        if (!in.exists() || in.isDirectory()) {
            fail("File or directory does not exist or is not of the expected type.");
        }
        Document doc = Jsoup.parse(in, null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp");
        String location = doc.location();
        String baseUri = doc.baseUri();
        assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", location, "NYT location should match the expected URL");
        assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", baseUri, "NYT base URI should match the expected URL");
    }
}


