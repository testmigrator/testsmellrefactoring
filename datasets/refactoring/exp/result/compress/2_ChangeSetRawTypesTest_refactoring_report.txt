File#1


Input#1
@ParameterizedTest
    @MethodSource("org.apache.commons.compress.changes.TestFixtures#getOutputArchiveNames")
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public void testAddAlreadyExistingWithReplaceFalse(final String archiverName) throws Exception {
        final Path inputPath = createArchive(archiverName);
        final Path result = Files.createTempFile("test", "." + archiverName);
        try (InputStream inputStream = Files.newInputStream(inputPath);
                ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
                OutputStream newOutputStream = Files.newOutputStream(result);
                ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
                InputStream csInputStream = Files.newInputStream(getPath("test.txt"));) {
            setLongFileMode(archiveOutputStream);
            final ChangeSet changeSet = new ChangeSet();
            final ArchiveEntry entry = new ZipArchiveEntry("testdata/test1.xml");
            changeSet.add(entry, csInputStream, false);
            final ChangeSetResults results = new ChangeSetPerformer(changeSet).perform(archiveInputStream, archiveOutputStream);
            assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));
            assertTrue(results.getAddedFromChangeSet().isEmpty());
            assertTrue(results.getDeleted().isEmpty());
        } finally {
            checkArchiveContent(result, archiveList);
            forceDelete(inputPath);
            forceDelete(result);
        }
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing']

Refactor#1

@ParameterizedTest
@MethodSource("org.apache.commons.compress.changes.TestFixtures#getOutputArchiveNames")
public void testAddAlreadyExistingWithReplaceFalse(final String archiverName) {
    assertDoesNotThrow(() -> {
        final Path inputPath = createArchive(archiverName);
        final Path result = Files.createTempFile("test", "." + archiverName);
        try (InputStream inputStream = Files.newInputStream(inputPath);
             ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
             OutputStream newOutputStream = Files.newOutputStream(result);
             ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
             InputStream csInputStream = Files.newInputStream(getPath("test.txt"))) {
            setLongFileMode(archiveOutputStream);
            final ChangeSet changeSet = new ChangeSet();
            final ArchiveEntry entry = new ZipArchiveEntry("testdata/test1.xml");
            changeSet.add(entry, csInputStream, false);
            final ChangeSetResults results = new ChangeSetPerformer(changeSet).perform(archiveInputStream, archiveOutputStream);
            assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"), "Expected 'testdata/test1.xml' to be added from stream");
            assertTrue(results.getAddedFromChangeSet().isEmpty(), "Expected no entries to be added from change set");
            assertTrue(results.getDeleted().isEmpty(), "Expected no entries to be deleted");
        } finally {
            checkArchiveContent(result, archiveList);
            forceDelete(inputPath);
            forceDelete(result);
        }
    }, "Unexpected exception occurred during the test");
}

Input#2
@ParameterizedTest
    @MethodSource("org.apache.commons.compress.changes.TestFixtures#getZipOutputArchiveNames")
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public void testAddAlreadyExistingWithReplaceTrue(final String archiverName) throws Exception {
        final Path inputPath = createArchive(archiverName);
        final Path result = Files.createTempFile("test", "." + archiverName);
        try (InputStream inputStream = Files.newInputStream(inputPath);
                ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
                OutputStream newOutputStream = Files.newOutputStream(result);
                ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
                InputStream csInputStream = Files.newInputStream(getPath("test.txt"))) {
            setLongFileMode(archiveOutputStream);
            final ChangeSet changeSet = new ChangeSet();
            final ArchiveEntry entry = new ZipArchiveEntry("testdata/test1.xml");
            changeSet.add(entry, csInputStream, true);
            final ChangeSetResults results = new ChangeSetPerformer(changeSet).perform(archiveInputStream, archiveOutputStream);
            assertTrue(results.getAddedFromChangeSet().contains("testdata/test1.xml"));
        } finally {
            checkArchiveContent(result, archiveList);
            forceDelete(result);
        }
    }

Refactor#2

@ParameterizedTest
@MethodSource("org.apache.commons.compress.changes.TestFixtures#getZipOutputArchiveNames")
@SuppressWarnings({ "unchecked", "rawtypes" })
public void testAddAlreadyExistingWithReplaceTrue(final String archiverName) {
    assertDoesNotThrow(() -> {
        final Path inputPath = createArchive(archiverName);
        final Path result = Files.createTempFile("test", "." + archiverName);
        try (InputStream inputStream = Files.newInputStream(inputPath);
             ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
             OutputStream newOutputStream = Files.newOutputStream(result);
             ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
             InputStream csInputStream = Files.newInputStream(getPath("test.txt"))) {
            setLongFileMode(archiveOutputStream);
            final ChangeSet changeSet = new ChangeSet();
            final ArchiveEntry entry = new ZipArchiveEntry("testdata/test1.xml");
            changeSet.add(entry, csInputStream, true);
            final ChangeSetResults results = new ChangeSetPerformer(changeSet).perform(archiveInputStream, archiveOutputStream);
            assertTrue(results.getAddedFromChangeSet().contains("testdata/test1.xml"));
        } finally {
            checkArchiveContent(result, archiveList);
            forceDelete(result);
        }
    }, "Unexpected exception occurred during the test");
}


Input#3
@Test
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public void testAddChangeTwice() throws Exception {
        try (InputStream inputStream = newInputStream("test.txt");
                InputStream inputStream2 = newInputStream("test2.xml")) {
            final ArchiveEntry e = new ZipArchiveEntry("test.txt");
            final ArchiveEntry e2 = new ZipArchiveEntry("test.txt");
            final ChangeSet changeSet = new ChangeSet();
            changeSet.add(e, inputStream);
            changeSet.add(e2, inputStream2);
            final Set<Change> changeSet2 = changeSet.getChanges();
            assertEquals(1, changeSet2.size());
            final Change change = changeSet2.iterator().next();
            @SuppressWarnings("resource") // Not allocated here
            final InputStream csInputStream = change.getInputStream();
            assertEquals(inputStream2, csInputStream);
        }
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Magic_Number_Test']
Refactor#3

@Test
public void testAddChangeTwice() {
    int expectedSize = 1;

    try (InputStream inputStream = newInputStream("test.txt");
         InputStream inputStream2 = newInputStream("test2.xml")) {
        final ArchiveEntry e = new ZipArchiveEntry("test.txt");
        final ArchiveEntry e2 = new ZipArchiveEntry("test.txt");
        final ChangeSet changeSet = new ChangeSet();
        changeSet.add(e, inputStream);
        changeSet.add(e2, inputStream2);

        final Set<Change> changeSet2 = changeSet.getChanges();
        assertEquals(expectedSize, changeSet2.size(), "The size of the change set should be 1");

        final Change change = changeSet2.iterator().next();
        final InputStream csInputStream = change.getInputStream();
        assertEquals(inputStream2, csInputStream, "The input stream of the change should match the second input stream");
    } catch (Exception e) {
        assertDoesNotThrow(() -> {
            throw e;
        }, "Unexpected exception occurred during the test");
    }
}

Input#4
@Test
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public void testAddChangeTwiceWithoutReplace() throws Exception {
        try (InputStream inputStream = newInputStream("test.txt");
                InputStream inputStream2 = newInputStream("test2.xml")) {
            final ArchiveEntry e = new ZipArchiveEntry("test.txt");
            final ArchiveEntry e2 = new ZipArchiveEntry("test.txt");
            final ChangeSet changeSet = new ChangeSet();
            changeSet.add(e, inputStream, true);
            changeSet.add(e2, inputStream2, false);
            final Set<Change> changes = changeSet.getChanges();
            assertEquals(1, changes.size());
            final Change c = changes.iterator().next();
            @SuppressWarnings("resource")
            final InputStream csInputStream = c.getInputStream();
            assertEquals(inputStream, csInputStream);
        }
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Magic_Number_Test']
Refactor#4

@Test
public void testAddChangeTwiceWithoutReplace() {
    int expectedNumberOfChanges = 1;
    String entryName = "test.txt";
    String secondEntryName = "test2.xml";

    try (InputStream inputStream = newInputStream(entryName);
         InputStream inputStream2 = newInputStream(secondEntryName)) {

        final ArchiveEntry e = new ZipArchiveEntry(entryName);
        final ArchiveEntry e2 = new ZipArchiveEntry(entryName); // Note: This should likely be secondEntryName if intended to be different
        final ChangeSet changeSet = new ChangeSet();
        changeSet.add(e, inputStream, true);
        changeSet.add(e2, inputStream2, false);

        final Set<Change> changes = changeSet.getChanges();
        assertEquals(expectedNumberOfChanges, changes.size(), "The number of changes should be " + expectedNumberOfChanges);

        final Change c = changes.iterator().next();
        final InputStream csInputStream = c.getInputStream();
        assertEquals(inputStream, csInputStream, "The input stream should match the original input stream");

    } catch (Exception e) {
        assertDoesNotThrow(() -> {
            throw e;
        }, "Unexpected exception occurred during the test");
    }

Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

