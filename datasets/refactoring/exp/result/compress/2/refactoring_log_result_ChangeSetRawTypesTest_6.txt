Input Parameters:
Test Code:
 @ParameterizedTest
    @MethodSource("org.apache.commons.compress.changes.TestFixtures#getOutputArchiveNames")
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public void testDeletePlusAddSame(final String archiverName) throws Exception {
        final Path inputPath = createArchive(archiverName);
        final File testTxt = getFile("test.txt");
        final Path result = Files.createTempFile("test", "." + archiverName);
        try {
            try (InputStream inputStream = Files.newInputStream(inputPath);
                    ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
                    OutputStream newOutputStream = Files.newOutputStream(result);
                    ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
                    InputStream csInputStream = Files.newInputStream(testTxt.toPath())) {
                setLongFileMode(archiveOutputStream);
                final ChangeSet changes = new ChangeSet();
                changes.delete("test/test3.xml");
                archiveListDelete("test/test3.xml");
                // Add a file
                final ArchiveEntry entry = archiveOutputStream.createArchiveEntry(testTxt, "test/test3.xml");
                changes.add(entry, csInputStream);
                archiveList.add("test/test3.xml");
                new ChangeSetPerformer(changes).perform(archiveInputStream, archiveOutputStream);
            }
            // Checks
            try (BufferedInputStream buf = new BufferedInputStream(Files.newInputStream(result));
                    ArchiveInputStream in = factory.createArchiveInputStream(buf)) {
                final File check = checkArchiveContent(in, archiveList, false);
                final File test3xml = new File(check, "result/test/test3.xml");
                assertEquals(testTxt.length(), test3xml.length());

                try (BufferedReader reader = new BufferedReader(Files.newBufferedReader(test3xml.toPath()))) {
                    String str;
                    while ((str = reader.readLine()) != null) {
                        // All lines look like this
                        "111111111111111111111111111000101011".equals(str);
                    }
                }
                forceDelete(check);
            }
        } finally {
            forceDelete(result);
        }
    }
Context: 
Smell List: ['Conditional_Test_Logic', 'Exception_Catching_Throwing', 'Mystery_Guest', 'Resource_Optimism']
Smell Description List: ['Test Smell Type：Conditional Test Logic\n\nFeature:\nA test method that contains one or more control statements (i.e if, switch, conditional expression, for, foreach and while statement).\n', 'Test Smell Type：Exception_Catching_Throwing\n\nFeature:\nA test method that contains either a throw statement or a catch clause.\n', 'Test Smell Type：Mystery Guest\n\nFeature:\nA test method containing object instances of files and databases classes.\n', 'Test Smell Type：Resource Optimism\n\nFeature:\nThis smell occurs when a test method makes an optimistic assumption that the external resource (e.g., File), utilized by the test method, exists.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Conditional Test Logic\n  Description: "Remove control statements (if, switch, conditional expression, etc.) within the test method by extracting them into helper methods."\n  Steps:\n    - Step:\n        Description: "Extract control logic into a separate helper method"\n        Action: ExtractMethod\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ExtractedMethod: |\n            private boolean isConditionMet() {\n                return {condition};\n            }\n    - Step:\n        Description: "Replace conditional logic with a call to the helper method"\n        Action: ReplaceConditional\n        Parameters:\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ReplacementPattern: |\n            if (isConditionMet()) {\n                {stmt}\n            }\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          if (someCondition()) {\n              executeLogic();\n          }\n      }\n    After: |\n      private boolean isConditionMet() {\n          return someCondition();\n      }\n      @Test\n      public void T() {\n          if (isConditionMet()) {\n              executeLogic();\n          }\n      }\n', 'RefactorRule:\n  SmellType: Exception_Catching_Throwing\n  Description: Ensure tests use assertDoesNotThrow to verify no exceptions are thrown and remove any throws declaration in test methods.\n  Steps:\n    - Step:\n        Description: "Handle try-catch blocks containing \'fail\' calls"\n        Action: ReplaceTryCatchWithAssertThrows\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n              fail();\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            {exception} exception = assertThrows({exception}.class, () -> {\n              {tryBlock}\n            });\n            {catchBlock}\n    - Step:\n        Description: "Handle test methods with \'throws\' declaration but no try-catch block"\n        Action: WrapWithAssertDoesNotThrow\n        Parameters:\n          DetectionPattern: |\n            MethodDeclaration [throws!=null && BodyContainsTryCatch=false]\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {methodBody}\n            }, "Unexpected exception occurred during the test");\n\n    - Step:\n        Description: "Handle test methods with try-catch blocks without \'fail\' calls"\n        Action: ReplaceTryCatchWithoutFail\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {tryBlock}\n            });\n            {catchBlock}\n\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        try {\n            stmt\'\n            fail();\n        } catch (E) {\n            evs\n        }\n        stmt\'\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assertThrows(E.class, () -> {\n            stmt\'\n        });\n        evs\n        stmt\'\'\n      }\n  Variables:\n    exception: E\n    tryBlock: stmt\'\n    catchBlock: evs\n    tryBlockStatement: stmt\'i\n', 'RefactorRule:\n  SmellType: Mystery Guest\n  Description: "Use JUnit 5 Temporary Directory feature to handle temporary files in a more controlled manner."\n  Steps:\n    - Step:\n        Description: "Annotate test method with @TempDir to inject a temporary directory"\n        Action: AddAnnotation\n        Parameters:\n          TargetType: Method\n          Annotation: @TempDir File {tempDirVariable}\n    - Step:\n        Description: "Replace direct creation of temporary files with creation using the injected temporary directory"\n        Action: ReplaceMethodCall\n        Parameters:\n          TargetMethod: "File.createTempFile"\n          ReplacementPattern: "{tempDirVariable}.createTempFile"\n          Import: "org.junit.jupiter.api.io.TempDir"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          File.createTempFile(params)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T(@TempDir File D) {\n          stmt\n          D.createTempFile(params)\n          stmt\'\n      }\n  Variables:\n    tempDirVariable: "D"\n', 'RefactorRule:\n  SmellType: Resource Optimism\n  Description: "Add an assertion to ensure that the required file or directory exists before performing operations on it, or give a hint if the test logic does not require file existence check."\n  Steps:\n    - Step:\n        Description: "Check if the file existence is critical for the test, and add an assertion if necessary."\n        Action: |\n          If {fileVariable} requires existence check:\n            AddAssertion\n            Parameters:\n              TargetPattern: |\n                File {fileVariable} = ...;\n              Assertion: |\n                if (!{fileVariable}.exists() || {fileVariable}.isDirectory()) {\n                    fail("File or directory does not exist or is not of the expected type.");\n                }\n          Else:\n            ProvideHint\n            Parameters:\n              HintMessage: "The file existence is not critical for this test. Consider reviewing if a file check is necessary. For example, \'new File(\\"\\")\' does not represent a real file."\n\n  Example:\n   Before: |\n      @Test\n      public void T() {\n        File outputFile = ...;\n        stmt\n        assert\n      }\n    After: |\n      @Test\n      public void T() {\n        File outputFile = ...;\n        if (!outputFile.exists() || outputFile.isDirectory()) {\n            // Hint: The file does not exist, but this may be expected behavior for the test.\n        }\n        stmt\n        assert\n      }\n  Variables:\n    fileVariable: "file"\n']
Checkpoints: ['[ ] All conditional test logic has been refactored to use JUnit 5’s conditional test execution feature, with the condition verified in an external method assigned via the @EnabledIf annotation.\n', '[ ] All exception handling has been refactored to use the JUnit 5 Exception Handling feature.\n', '[ ] All instances of the ‘Mystery Guest’ code smell have been refactored using the JUnit 5 Temporary Directory feature, annotating a temporary directory and considering its use in the external file instantiation steps.\n', '[ ] All instances of the ‘Resource Optimism’ code smell have been refactored by adding an assertion to check for file existence.\n']

Refactored Code: 
 
@ParameterizedTest
@MethodSource("org.apache.commons.compress.changes.TestFixtures#getOutputArchiveNames")
@TempDir
public void testDeletePlusAddSame(Path tempDir, final String archiverName) {
    final Path inputPath = createArchive(archiverName);
    final File testTxt = getFile("test.txt");
    final Path result = tempDir.resolve("test." + archiverName);
    assertFileExists(inputPath);
    assertFileExists(testTxt.toPath());

    try (InputStream inputStream = Files.newInputStream(inputPath);
         ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
         OutputStream newOutputStream = Files.newOutputStream(result);
         ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
         InputStream csInputStream = Files.newInputStream(testTxt.toPath())) {

        setLongFileMode(archiveOutputStream);
        final ChangeSet changes = new ChangeSet();
        changes.delete("test/test3.xml");
        archiveListDelete("test/test3.xml");

        // Add a file
        final ArchiveEntry entry = archiveOutputStream.createArchiveEntry(testTxt, "test/test3.xml");
        changes.add(entry, csInputStream);
        archiveList.add("test/test3.xml");

        new ChangeSetPerformer(changes).perform(archiveInputStream, archiveOutputStream);
    } catch (Exception e) {
        fail("Unexpected exception occurred during the test", e);
    }

    // Checks
    try (BufferedInputStream buf = new BufferedInputStream(Files.newInputStream(result));
         ArchiveInputStream in = factory.createArchiveInputStream(buf)) {
        final File check = checkArchiveContent(in, archiveList, false);
        final File test3xml = new File(check, "result/test/test3.xml");
        assertEquals(testTxt.length(), test3xml.length());

        try (BufferedReader reader = new BufferedReader(Files.newBufferedReader(test3xml.toPath()))) {
            String str;
            while ((str = reader.readLine()) != null) {
                assertEquals("111111111111111111111111111000101011", str);
            }
        }
    } catch (Exception e) {
        fail("Unexpected exception occurred during the test", e);
    }
}

private void assertFileExists(Path file) {
    if (!Files.exists(file) || Files.isDirectory(file)) {
        fail("File or directory does not exist or is not of the expected type: " + file);
    }
}


