Input Parameters:
Test Code:
 @Test
  public void testEqualsAcrossTypes() {
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("a"), new JsonPrimitive('a'));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(new BigInteger("0")), new JsonPrimitive(0));
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(new BigDecimal("0")), new JsonPrimitive(0));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));
  }
Context: /com/google/gson/JsonPrimitive
Smell List: ['Assertion_Roulette', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
@Test
public void testEqualsAcrossTypes() {
    String stringA = "a";
    char charA = 'a';
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(stringA), new JsonPrimitive(charA), "String and char primitives should be equal");

    BigInteger bigIntegerZero = new BigInteger("0");
    int intZero = 0;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(bigIntegerZero), new JsonPrimitive(intZero), "BigInteger and int primitives should be equal");

    int intZeroB = 0;
    long longZero = 0L;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(intZeroB), new JsonPrimitive(longZero), "int and long primitives should be equal");

    BigDecimal bigDecimalZero = new BigDecimal("0");
    int intZeroC = 0;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(bigDecimalZero), new JsonPrimitive(intZeroC), "BigDecimal and int primitives should be equal");

    float floatNaN = Float.NaN;
    double doubleNaN = Double.NaN;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(floatNaN), new JsonPrimitive(doubleNaN), "Float NaN and Double NaN should be equal");
}


