Input Parameters:
Test Code:
 @Test
  public void testNextFailuresDoNotAdvance() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":true}"));
    reader.beginObject();

    var e = assertThrows(IllegalStateException.class, () -> reader.nextString());
    assertUnexpectedStructureError(e, "a string", "NAME", "line 1 column 3 path $.");

    assertThat(reader.nextName()).isEqualTo("a");

    e = assertThrows(IllegalStateException.class, () -> reader.nextName());
    assertUnexpectedStructureError(e, "a name", "BOOLEAN", "line 1 column 10 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.beginArray());
    assertUnexpectedStructureError(e, "BEGIN_ARRAY", "BOOLEAN", "line 1 column 10 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.endArray());
    assertUnexpectedStructureError(e, "END_ARRAY", "BOOLEAN", "line 1 column 10 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.beginObject());
    assertUnexpectedStructureError(e, "BEGIN_OBJECT", "BOOLEAN", "line 1 column 10 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.endObject());
    assertUnexpectedStructureError(e, "END_OBJECT", "BOOLEAN", "line 1 column 10 path $.a");

    assertThat(reader.nextBoolean()).isTrue();

    e = assertThrows(IllegalStateException.class, () -> reader.nextString());
    assertUnexpectedStructureError(e, "a string", "END_OBJECT", "line 1 column 11 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.nextName());
    assertUnexpectedStructureError(e, "a name", "END_OBJECT", "line 1 column 11 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.beginArray());
    assertUnexpectedStructureError(e, "BEGIN_ARRAY", "END_OBJECT", "line 1 column 11 path $.a");

    e = assertThrows(IllegalStateException.class, () -> reader.endArray());
    assertUnexpectedStructureError(e, "END_ARRAY", "END_OBJECT", "line 1 column 11 path $.a");

    reader.endObject();
    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
    reader.close();
  }
Context: /com/google/gson/stream/JsonReader
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Exception_Catching_Throwing\n\nFeature:\nA test method that contains either a throw statement or a catch clause.\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Exception_Catching_Throwing\n  Description: Ensure tests use assertDoesNotThrow to verify no exceptions are thrown and remove any throws declaration in test methods.\n  Steps:\n    - Step:\n        Description: "Handle try-catch blocks containing \'fail\' calls"\n        Action: ReplaceTryCatchWithAssertThrows\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n              fail();\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            {exception} exception = assertThrows({exception}.class, () -> {\n              {tryBlock}\n            });\n            {catchBlock}\n    - Step:\n        Description: "Handle test methods with \'throws\' declaration but no try-catch block"\n        Action: WrapWithAssertDoesNotThrow\n        Parameters:\n          DetectionPattern: |\n            MethodDeclaration [throws!=null && BodyContainsTryCatch=false]\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {methodBody}\n            }, "Unexpected exception occurred during the test");\n\n    - Step:\n        Description: "Handle test methods with try-catch blocks without \'fail\' calls"\n        Action: ReplaceTryCatchWithoutFail\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {tryBlock}\n            });\n            {catchBlock}\n\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        try {\n            stmt\'\n            fail();\n        } catch (E) {\n            evs\n        }\n        stmt\'\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assertThrows(E.class, () -> {\n            stmt\'\n        });\n        evs\n        stmt\'\'\n      }\n  Variables:\n    exception: E\n    tryBlock: stmt\'\n    catchBlock: evs\n    tryBlockStatement: stmt\'i\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All exception handling has been refactored to use the JUnit 5 Exception Handling feature.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.StringReader;

public class JsonReaderTest {

  private JsonReader reader;

  @BeforeEach
  public void setUp() throws IOException {
    reader = new JsonReader(new StringReader("{\"a\":true}"));
    reader.beginObject();
  }

  @Test
  public void testNextStringFailsBeforeName() {
    var e = assertThrows(IllegalStateException.class, () -> reader.nextString(),
        "Expected IllegalStateException when calling nextString before reading the name");
    assertUnexpectedStructureError(e, "a string", "NAME", "line 1 column 3 path $.");
  }

  @Test
  public void testNextNameSucceedsAfterName() throws IOException {
    assertThat(reader.nextName(), equalTo("a"), "Expected 'a' as the next name");
  }

  @Test
  public void testNextNameFailsAfterBoolean() {
    reader.nextName();
    reader.nextBoolean();

    var e = assertThrows(IllegalStateException.class, () -> reader.nextName(),
        "Expected IllegalStateException when calling nextName after reading a boolean value");
    assertUnexpectedStructureError(e, "a name", "END_OBJECT", "line 1 column 11 path $.a");
  }

  @Test
  public void testBeginArrayFailsAfterBoolean() {
    reader.nextName();
    reader.nextBoolean();

    var e = assertThrows(IllegalStateException.class, () -> reader.beginArray(),
        "Expected IllegalStateException when calling beginArray after reading a boolean value");
    assertUnexpectedStructureError(e, "BEGIN_ARRAY", "END_OBJECT", "line 1 column 11 path $.a");
  }

  @Test
  public void testEndArrayFailsAfterBoolean() {
    reader.nextName();
    reader.nextBoolean();

    var e = assertThrows(IllegalStateException.class, () -> reader.endArray(),
        "Expected IllegalStateException when calling endArray after reading a boolean value");
    assertUnexpectedStructureError(e, "END_ARRAY", "END_OBJECT", "line 1 column 11 path $.a");
  }

  @Test
  public void testBeginObjectFailsAfterBoolean() {
    reader.nextName();
    reader.nextBoolean();

    var e = assertThrows(IllegalStateException.class, () -> reader.beginObject(),
        "Expected IllegalStateException when calling beginObject after reading a boolean value");
    assertUnexpectedStructureError(e, "BEGIN_OBJECT", "END_OBJECT", "line 1 column 11 path $.a");
  }

  @Test
  public void testEndObjectFailsAfterBoolean() {
    reader.nextName();
    reader.nextBoolean();

    var e = assertThrows(IllegalStateException.class, () -> reader.endObject(),
        "Expected IllegalStateException when calling endObject after reading a boolean value");
    assertUnexpectedStructureError(e, "END_OBJECT", "END_OBJECT", "line 1 column 11 path $.a");
  }

  @Test
  public void testNextBooleanSucceedsAfterName() throws IOException {
    reader.nextName();
    assertThat(reader.nextBoolean(), isTrue(), "Expected true as the next boolean value");
  }

  @Test
  public void testNextStringFailsAfterBoolean() {
    reader.nextName();
    reader.nextBoolean();

    var e = assertThrows(IllegalStateException.class, () -> reader.nextString(),
        "Expected IllegalStateException when calling nextString after reading a boolean value");
    assertUnexpectedStructureError(e, "a string", "END_OBJECT", "line 1 column 11 path $.a");
  }

  @Test
  public void testNextNameFailsAfterEndObject() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();

    var e = assertThrows(IllegalStateException.class, () -> reader.nextName(),
        "Expected IllegalStateException when calling nextName after endObject");
    assertUnexpectedStructureError(e, "a name", "END_DOCUMENT", "line 1 column 12 path $.a");
  }

  @Test
  public void testBeginArrayFailsAfterEndObject() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();

    var e = assertThrows(IllegalStateException.class, () -> reader.beginArray(),
        "Expected IllegalStateException when calling beginArray after endObject");
    assertUnexpectedStructureError(e, "BEGIN_ARRAY", "END_DOCUMENT", "line 1 column 12 path $.a");
  }

  @Test
  public void testEndArrayFailsAfterEndObject() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();

    var e = assertThrows(IllegalStateException.class, () -> reader.endArray(),
        "Expected IllegalStateException when calling endArray after endObject");
    assertUnexpectedStructureError(e, "END_ARRAY", "END_DOCUMENT", "line 1 column 12 path $.a");
  }

  @Test
  public void testBeginObjectFailsAfterEndObject() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();

    var e = assertThrows(IllegalStateException.class, () -> reader.beginObject(),
        "Expected IllegalStateException when calling beginObject after endObject");
    assertUnexpectedStructureError(e, "BEGIN_OBJECT", "END_DOCUMENT", "line 1 column 12 path $.a");
  }

  @Test
  public void testEndObjectFailsAfterEndObject() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();

    var e = assertThrows(IllegalStateException.class, () -> reader.endObject(),
        "Expected IllegalStateException when calling endObject after endObject");
    assertUnexpectedStructureError(e, "END_OBJECT", "END_DOCUMENT", "line 1 column 12 path $.a");
  }

  @Test
  public void testPeekReturnsEndDocumentAfterEndObject() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();

    assertThat(reader.peek(), equalTo(JsonToken.END_DOCUMENT), "Expected END_DOCUMENT after endObject");
  }

  @Test
  public void testCloseDoesNotThrowException() throws IOException {
    reader.nextName();
    reader.nextBoolean();
    reader.endObject();
    reader.close();
  }
}


