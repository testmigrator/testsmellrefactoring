File#1


Input#1
 @Test
  public void testMalformedNumbers() throws IOException {
    assertNotANumber("-");
    assertNotANumber(".");

    // plus sign is not allowed for integer part
    assertNotANumber("+1");

    // leading 0 is not allowed for integer part
    assertNotANumber("00");
    assertNotANumber("01");

    // exponent lacks digit
    assertNotANumber("e");
    assertNotANumber("0e");
    assertNotANumber(".e");
    assertNotANumber("0.e");
    assertNotANumber("-.0e");

    // no integer
    assertNotANumber("e1");
    assertNotANumber(".e1");
    assertNotANumber("-e1");

    // trailing characters
    assertNotANumber("1x");
    assertNotANumber("1.1x");
    assertNotANumber("1e1x");
    assertNotANumber("1ex");
    assertNotANumber("1.1ex");
    assertNotANumber("1.1e1x");

    // fraction has no digit
    assertNotANumber("0.");
    assertNotANumber("-0.");
    assertNotANumber("0.e1");
    assertNotANumber("-0.e1");

    // no leading digit
    assertNotANumber(".0");
    assertNotANumber("-.0");
    assertNotANumber(".0e1");
    assertNotANumber("-.0e1");
  }
Context: /com/google/gson/stream/JsonReader
Smell List: ['Exception_Catching_Throwing']

Refactor#1
@Test
public void testMalformedNumbers() {
    assertDoesNotThrow(() -> assertNotANumber("-"), "Expected no exception for malformed number: -");
    assertDoesNotThrow(() -> assertNotANumber("."), "Expected no exception for malformed number: .");
    assertDoesNotThrow(() -> assertNotANumber("+1"), "Expected no exception for malformed number: +1");
    assertDoesNotThrow(() -> assertNotANumber("00"), "Expected no exception for malformed number: 00");
    assertDoesNotThrow(() -> assertNotANumber("01"), "Expected no exception for malformed number: 01");
    assertDoesNotThrow(() -> assertNotANumber("e"), "Expected no exception for malformed number: e");
    assertDoesNotThrow(() -> assertNotANumber("0e"), "Expected no exception for malformed number: 0e");
    assertDoesNotThrow(() -> assertNotANumber(".e"), "Expected no exception for malformed number: .e");
    assertDoesNotThrow(() -> assertNotANumber("0.e"), "Expected no exception for malformed number: 0.e");
    assertDoesNotThrow(() -> assertNotANumber("-.0e"), "Expected no exception for malformed number: -.0e");
    assertDoesNotThrow(() -> assertNotANumber("e1"), "Expected no exception for malformed number: e1");
    assertDoesNotThrow(() -> assertNotANumber(".e1"), "Expected no exception for malformed number: .e1");
    assertDoesNotThrow(() -> assertNotANumber("-e1"), "Expected no exception for malformed number: -e1");
    assertDoesNotThrow(() -> assertNotANumber("1x"), "Expected no exception for malformed number: 1x");
    assertDoesNotThrow(() -> assertNotANumber("1.1x"), "Expected no exception for malformed number: 1.1x");
    assertDoesNotThrow(() -> assertNotANumber("1e1x"), "Expected no exception for malformed number: 1e1x");
    assertDoesNotThrow(() -> assertNotANumber("1ex"), "Expected no exception for malformed number: 1ex");
    assertDoesNotThrow(() -> assertNotANumber("1.1ex"), "Expected no exception for malformed number: 1.1ex");
    assertDoesNotThrow(() -> assertNotANumber("1.1e1x"), "Expected no exception for malformed number: 1.1e1x");
    assertDoesNotThrow(() -> assertNotANumber("0."), "Expected no exception for malformed number: 0.");
    assertDoesNotThrow(() -> assertNotANumber("-0."), "Expected no exception for malformed number: -0.");
    assertDoesNotThrow(() -> assertNotANumber("0.e1"), "Expected no exception for malformed number: 0.e1");
    assertDoesNotThrow(() -> assertNotANumber("-0.e1"), "Expected no exception for malformed number: -0.e1");
    assertDoesNotThrow(() -> assertNotANumber(".0"), "Expected no exception for malformed number: .0");
    assertDoesNotThrow(() -> assertNotANumber("-.0"), "Expected no exception for malformed number: -.0");
    assertDoesNotThrow(() -> assertNotANumber(".0e1"), "Expected no exception for malformed number: .0e1");
    assertDoesNotThrow(() -> assertNotANumber("-.0e1"), "Expected no exception for malformed number: -.0e1");
}

Input#2
@Test
  public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
    JsonReader reader = new JsonReader(reader("[12.34e5x]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(STRING);

    assertThrows(NumberFormatException.class, () -> reader.nextInt());
    assertThat(reader.nextString()).isEqualTo("12.34e5x");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']


Refactor#2
@Test
public void testPeekingUnquotedStringsPrefixedWithIntegers() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(reader("[12.34e5x]"));
        reader.setStrictness(Strictness.LENIENT);
        reader.beginArray();
        assertThat(reader.peek(), equalTo(JsonToken.STRING), "Expected the token to be a STRING");

        assertThrows(NumberFormatException.class, () -> reader.nextInt(), "Expected NumberFormatException when trying to read next int");

        assertThat(reader.nextString(), equalTo("12.34e5x"), "Expected the next string to be '12.34e5x'");
    });
}

Input#3
 @Test
  public void testPeekLongMinValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(NUMBER);
    assertThat(reader.nextLong()).isEqualTo(-9223372036854775808L);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Refactor#3

private JsonReader setupTestPeekLongMinValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[-9223372036854775808]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    return reader;
}

@Test
public void testPeekLongMinValue_Peek() throws IOException {
    JsonReader reader = setupTestPeekLongMinValue();
    assertThat(reader.peek(), is(equalTo(NUMBER)), "Expected peek to return NUMBER");
}

@Test
public void testPeekLongMinValue_NextLong() throws IOException {
    JsonReader reader = setupTestPeekLongMinValue();
    assertThat(reader.nextLong(), is(equalTo(-9223372036854775808L)), "Expected nextLong to return -9223372036854775808L");
}


Input#4
@Test
  public void testPeekLongMaxValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[9223372036854775807]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(NUMBER);
    assertThat(reader.nextLong()).isEqualTo(9223372036854775807L);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#4

private JsonReader setupTestPeekLongMaxValue() throws IOException {
    JsonReader reader = new JsonReader(new StringReader("[9223372036854775807]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    return reader;
}

@Test
public void testPeekLongMaxValue_Peek() {
    assertDoesNotThrow(() -> {
        JsonReader reader = setupTestPeekLongMaxValue();
        assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER).withFailMessage("Expected peek to return NUMBER token");
    }, "Unexpected exception occurred during the test");
}

@Test
public void testPeekLongMaxValue_NextLong() {
    assertDoesNotThrow(() -> {
        JsonReader reader = setupTestPeekLongMaxValue();
        assertThat(reader.nextLong()).isEqualTo(922372036854775807L).withFailMessage("Expected nextLong to return 9223372036854775807L");
    }, "Unexpected exception occurred during the test");
}



Input#5
 @Test
  public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {
    JsonReader reader = new JsonReader(reader("[22233720368547758070]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(NUMBER);
    assertThrows(NumberFormatException.class, () -> reader.nextLong());
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#5

@Test
public void testLongLargerThanMaxLongThatWrapsAround_ReaderPeek() throws IOException {
    JsonReader reader = new JsonReader(new StringReader("[22233720368547758070]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER).withFailMessage("Expected the token to be a number");
}

@Test
public void testLongLargerThanMaxLongThatWrapsAround_NextLongThrowsException() {
    JsonReader reader = new JsonReader(new StringReader("[22233720368547758070]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThrows(NumberFormatException.class, () -> reader.nextLong(), "Expected NumberFormatException when reading a long larger than max long");
}


Input#6
 @Test
  public void testLongLargerThanMinLongThatWrapsAround() throws IOException {
    JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(NUMBER);
    assertThrows(NumberFormatException.class, () -> reader.nextLong());
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']


Refactor#6
@Test
public void testLongLargerThanMinLongThatWrapsAround() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(reader("[-22233720368547758070]"));
        reader.setStrictness(Strictness.LENIENT);
        reader.beginArray();
        assertThat(reader.peek(), is(equalTo(NUMBER)), "Expected the next token to be a number");
        assertThrows(NumberFormatException.class, () -> reader.nextLong(), "Expected NumberFormatException when reading long value that wraps around");
    });
}

Input#7
 @Test
  public void testNegativeZero() throws Exception {
    JsonReader reader = new JsonReader(reader("[-0]"));
    reader.setStrictness(Strictness.LEGACY_STRICT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(NUMBER);
    assertThat(reader.nextString()).isEqualTo("-0");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#7
 private JsonReader setupTestNegativeZero() {
        JsonReader reader = new JsonReader(reader("[-0]"));
        reader.setStrictness(Strictness.LEGACY_STRICT);
        return reader;
    }

    @Test
    public void testNegativeZero_BeginArray() {
        JsonReader reader = setupTestNegativeZero();
        assertDoesNotThrow(()->{
            reader.beginArray();
            assertThat(reader.peek()).isEqualTo(JsonToken.NUMBER);
        });
    }

    @Test
    public void testNegativeZero_NextString() {
        JsonReader reader = setupTestNegativeZero();
        assertDoesNotThrow(()-> {
            reader.beginArray();
            assertThat(reader.nextString()).isEqualTo("-0");
        });
    }

Input#8
@Test
  public void testPeekMuchLargerThanLongMinValue() throws IOException {
    @SuppressWarnings("FloatingPointLiteralPrecision")
    double d = -92233720368547758080d;
    JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(NUMBER);
    assertThrows(NumberFormatException.class, () -> reader.nextLong());
    assertThat(reader.nextDouble()).isEqualTo(d);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#8
private JsonReader setupTestPeekMuchLargerThanLongMinValue() throws IOException {
    @SuppressWarnings("FloatingPointLiteralPrecision")
    double d = -92233720368547758080d;
    JsonReader reader = new JsonReader(reader("[-92233720368547758080]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    return reader;
}

@Test
public void testPeekMuchLargerThanLongMinValue_Peek() throws IOException {
    JsonReader reader = setupTestPeekMuchLargerThanLongMinValue();
    assertThat(reader.peek(), is(NUMBER), "Expected peek to return NUMBER");
}

@Test
public void testPeekMuchLargerThanLongMinValue_NextLong() throws IOException {
    JsonReader reader = setupTestPeekMuchLargerThanLongMinValue();
    assertThrows(NumberFormatException.class, () -> reader.nextLong(), "Expected NumberFormatException when calling nextLong");
}

@Test
public void testPeekMuchLargerThanLongMinValue_NextDouble() throws IOException {
    @SuppressWarnings("FloatingPointLiteralPrecision")
    double d = -92233720368547758080d;
    JsonReader reader = setupTestPeekMuchLargerThanLongMinValue();
    assertThat(reader.nextDouble(), is(d), "Expected nextDouble to return the correct value");
}


Input#9
@Test
  public void testQuotedNumberWithEscape() throws IOException {
    JsonReader reader = new JsonReader(reader("[\"12\\u00334\"]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.peek()).isEqualTo(STRING);
    assertThat(reader.nextInt()).isEqualTo(1234);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#9

private JsonReader setupTestQuotedNumberWithEscape() throws IOException {
    JsonReader reader = new JsonReader(new StringReader("[\"12\\u00334\"]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    return reader;
}

@Test
public void testQuotedNumberWithEscape_PeekString() {
    JsonReader reader = setupTestQuotedNumberWithEscape();
    assertThat(reader.peek(), is(equalTo(JsonToken.STRING)), "Expected token type to be STRING");
}

@Test
public void testQuotedNumberWithEscape_ReadInt() {
    JsonReader reader = setupTestQuotedNumberWithEscape();
    assertThat(reader.nextInt(), is(equalTo(1234)), "Expected integer value to be 1234");
}


Input#10
@Test
  public void testMixedCaseLiterals() throws IOException {
    JsonReader reader = new JsonReader(reader("[True,TruE,False,FALSE,NULL,nulL]"));
    reader.beginArray();
    assertThat(reader.nextBoolean()).isTrue();
    assertThat(reader.nextBoolean()).isTrue();
    assertThat(reader.nextBoolean()).isFalse();
    assertThat(reader.nextBoolean()).isFalse();
    reader.nextNull();
    reader.nextNull();
    reader.endArray();
    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']


Refactor#10
private JsonReader createJsonReader(String content) {
    return new JsonReader(new StringReader(content));
  }

  @Test
  public void testMixedCaseLiterals_BooleanTrue() {
    JsonReader reader = createJsonReader("[True]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      assertTrue(reader.nextBoolean(), "Expected true for 'True'");
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testMixedCaseLiterals_BooleanTrueMixedCase() {
    JsonReader reader = createJsonReader("[TruE]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      assertTrue(reader.nextBoolean(), "Expected true for 'TruE'");
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testMixedCaseLiterals_BooleanFalse() {
    JsonReader reader = createJsonReader("[False]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      assertFalse(reader.nextBoolean(), "Expected false for 'False'");
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testMixedCaseLiterals_BooleanFalseMixedCase() {
    JsonReader reader = createJsonReader("[FALSe]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      assertFalse(reader.nextBoolean(), "Expected false for 'FALSe'");
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testMixedCaseLiterals_Null() {
    JsonReader reader = createJsonReader("[NULL]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      reader.nextNull();
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testMixedCaseLiterals_NullMixedCase() {
    JsonReader reader = createJsonReader("[NuLL]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      reader.nextNull();
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testMixedCaseLiterals_EndDocument() {
    JsonReader reader = createJsonReader("[True, TruE, False, FALSe, NULL, NuLL]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      reader.nextBoolean();
      reader.nextBoolean();
      reader.nextBoolean();
      reader.nextBoolean();
      reader.nextNull();
      reader.nextNull();
      reader.endArray();
      assertEquals(JsonToken.END_DOCUMENT, reader.peek(), "Expected END_DOCUMENT after processing all elements");
    }, "Unexpected exception occurred during the test");
  }




Input#11
@Test
  public void testMissingValue() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());
    assertThat(e)
        .hasMessageThat()
        .isEqualTo(
            "Expected value at line 1 column 6 path $.a\n"
                + "See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Refactor#11

@Test
public void testMissingValue() {
    JsonReader reader = new JsonReader(new StringReader("{\"a\":}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a", "The next name should be 'a'");
    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> {
        reader.nextString();
    }, "Reading the next string should throw a MalformedJsonException");
    assertThat(e.getMessage())
        .isEqualTo(
            "Expected value at line 1 column 6 path $.a\n" +
            "See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json",
            "The exception message should match the expected message");
}

Input#12
@Test
  public void testPrematureEndOfInput() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":true,"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    assertThat(reader.nextBoolean()).isTrue();
    assertThrows(EOFException.class, () -> reader.nextName());
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#12

private JsonReader setupTestPrematureEndOfInput() throws IOException {
    JsonReader reader = new JsonReader(new StringReader("{\"a\":true,"));
    reader.beginObject();
    return reader;
}

@Test
public void testPrematureEndOfInput_Name() throws IOException {
    JsonReader reader = setupTestPrematureEndOfInput();
    assertThat(reader.nextName(), is("a"), "Expected 'a' as the next name");
}

@Test
public void testPrematureEndOfInput_BooleanValue() throws IOException {
    JsonReader reader = setupTestPrematureEndOfInput();
    assertThat(reader.nextBoolean(), is(true), "Expected true as the next boolean value");
}

@Test
public void testPrematureEndOfInput_EndOfInputException() {
    JsonReader reader = setupTestPrematureEndOfInput();
    assertThrows(EOFException.class, () -> reader.nextName(), "Expected EOFException when reading next name");
}



Input#13
@Test
  public void testPrematurelyClosed() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":[]}"));
    reader.beginObject();
    reader.close();
    var e = assertThrows(IllegalStateException.class, () -> reader.nextName());
    assertThat(e).hasMessageThat().isEqualTo("JsonReader is closed");

    JsonReader reader2 = new JsonReader(reader("{\"a\":[]}"));
    reader2.close();
    e = assertThrows(IllegalStateException.class, () -> reader2.beginObject());
    assertThat(e).hasMessageThat().isEqualTo("JsonReader is closed");

    JsonReader reader3 = new JsonReader(reader("{\"a\":true}"));
    reader3.beginObject();
    String unused1 = reader3.nextName();
    JsonToken unused2 = reader3.peek();
    reader3.close();
    e = assertThrows(IllegalStateException.class, () -> reader3.nextBoolean());
    assertThat(e).hasMessageThat().isEqualTo("JsonReader is closed");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']


Refactor#13
private JsonReader createJsonReader(String json) throws IOException {
    return new JsonReader(new java.io.StringReader(json));
  }

  @Test
  public void testPrematurelyClosed_beginObject() throws IOException {
    JsonReader reader = createJsonReader("{\"a\":[]}");
    reader.beginObject();
    reader.close();
    IllegalStateException e = assertThrows(IllegalStateException.class, () -> reader.nextName(),
        "Expected IllegalStateException when calling nextName on a closed JsonReader");
    assertThat(e.getMessage(), equalTo("JsonReader is closed"), "Exception message should match expected value");
  }

  @Test
  public void testPrematurelyClosed_closeBeforeBeginObject() throws IOException {
    JsonReader reader = createJsonReader("{\"a\":[]}");
    reader.close();
    IllegalStateException e = assertThrows(IllegalStateException.class, () -> reader.beginObject(),
        "Expected IllegalStateException when calling beginObject on a closed JsonReader");
    assertThat(e.getMessage(), equalTo("JsonReader is closed"), "Exception message should match expected value");
  }

  @Test
  public void testPrematurelyClosed_nextBoolean() throws IOException {
    JsonReader reader = createJsonReader("{\"a\":true}");
    reader.beginObject();
    reader.nextName();
    reader.peek();
    reader.close();
    IllegalStateException e = assertThrows(IllegalStateException.class, () -> reader.nextBoolean(),
        "Expected IllegalStateException when calling nextBoolean on a closed JsonReader");
    assertThat(e.getMessage(), equalTo("JsonReader is closed"), "Exception message should match expected value");
  }

Input#14

Refactor#14


Input#15
 @Test
  public void testIntegerMismatchFailuresDoNotAdvance() throws IOException {
    JsonReader reader = new JsonReader(reader("[1.5]"));
    reader.beginArray();
    assertThrows(NumberFormatException.class, () -> reader.nextInt());
    assertThat(reader.nextDouble()).isEqualTo(1.5d);
    reader.endArray();
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#15
private JsonReader setupTestIntegerMismatchFailuresDoNotAdvance() throws IOException {
    JsonReader reader = new JsonReader(new StringReader("[1.5]"));
    reader.beginArray();
    return reader;
}

@Test
public void testIntegerMismatchFailuresDoNotAdvance_ExceptionThrown() {
    JsonReader reader = setupTestIntegerMismatchFailuresDoNotAdvance();
    assertThrows(NumberFormatException.class, () -> reader.nextInt(), "nextInt should throw NumberFormatException when reading 1.5");
}

@Test
public void testIntegerMismatchFailuresDoNotAdvance_ReadDouble() {
    JsonReader reader = setupTestIntegerMismatchFailuresDoNotAdvance();
    double value = reader.nextDouble();
    assertThat(value).isEqualTo(1.5d, "nextDouble should read 1.5 correctly after NumberFormatException");
    reader.endArray();
}

Input#16
@Test
  public void testStringNullIsNotNull() throws IOException {
    JsonReader reader = new JsonReader(reader("[\"null\"]"));
    reader.beginArray();
    var e = assertThrows(IllegalStateException.class, () -> reader.nextNull());
    assertUnexpectedStructureError(e, "null", "STRING", "line 1 column 3 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#16
@Test
public void testStringNullIsNotNull() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(new StringReader("[\"null\"]"));
        reader.beginArray();
        IllegalStateException e = assertThrows(IllegalStateException.class, () -> reader.nextNull());
        assertUnexpectedStructureError(e, "null", "STRING", "line 1 column 3 path $[0]");
    });
}

Input#17
 @Test
  public void testNullLiteralIsNotAString() throws IOException {
    JsonReader reader = new JsonReader(reader("[null]"));
    reader.beginArray();
    var e = assertThrows(IllegalStateException.class, () -> reader.nextString());
    assertUnexpectedStructureError(e, "a string", "NULL", "line 1 column 6 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']
Refactor#17
@Test
public void testNullLiteralIsNotAString() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(new StringReader("[null]"));
        reader.beginArray();
        IllegalStateException e = assertThrows(IllegalStateException.class, () -> reader.nextString());
        assertUnexpectedStructureError(e, "a string", "NULL", "line 1 column 6 path $[0]");
    });
}

Input#18


Refactor#18



Input#19
@Test
  public void testLenientNameValueSeparator() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    assertThat(reader.nextBoolean()).isTrue();

    reader = new JsonReader(reader("{\"a\"=>true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    assertThat(reader.nextBoolean()).isTrue();
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']

Refactor#19

  private JsonReader createLenientReader(String json) {
    JsonReader reader = new JsonReader(new StringReader(json));
    reader.setStrictness(Strictness.LENIENT);
    return reader;
  }

  @Test
  public void testLenientNameValueSeparator_EqualSign() {
    JsonReader reader = createLenientReader("{\"a\"=true}");
    assertDoesNotThrow(() -> {
      reader.beginObject();
      assertEquals("a", reader.nextName(), "Expected name 'a' with '=' separator");
      assertEquals(true, reader.nextBoolean(), "Expected boolean value 'true' with '=' separator");
    }, "Unexpected exception occurred during the test with '=' separator");
  }

  @Test
  public void testLenientNameValueSeparator_DoubleArrow() {
    JsonReader reader = createLenientReader("{\"a\"=>true}");
    assertDoesNotThrow(() -> {
      reader.beginObject();
      assertEquals("a", reader.nextName(), "Expected name 'a' with '=>' separator");
      assertEquals(true, reader.nextBoolean(), "Expected boolean value 'true' with '=>' separator");
    }, "Unexpected exception occurred during the test with '=>' separator");
  }


Input#20
@Test
  public void testStrictNameValueSeparatorWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\"=true}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 6 path $.a");

    JsonReader reader2 = new JsonReader(reader("{\"a\"=>true}"));
    reader2.beginObject();
    assertThat(reader2.nextName()).isEqualTo("a");

    e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());
    assertStrictError(e, "line 1 column 6 path $.a");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#20
private JsonReader createJsonReader(String json) throws IOException {
    return new JsonReader(new StringReader(json));
}

@Test
public void testStrictNameValueSeparatorWithSkipValue_EqualsSign() throws IOException {
    JsonReader reader = createJsonReader("{\"a\"=true}");
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a", "Expected key 'a' to be read correctly");

    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue(),
            "Expected MalformedJsonException to be thrown when using '=' as separator");
    assertStrictError(e, "line 1 column 6 path $.a", "Expected error at line 1 column 6 path $.a");
}

@Test
public void testStrictNameValueSeparatorWithSkipValue_GreaterThanSign() throws IOException {
    JsonReader reader = createJsonReader("{\"a\"=>true}");
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a", "Expected key 'a' to be read correctly");

    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue(),
            "Expected MalformedJsonException to be thrown when using '=>' as separator");
    assertStrictError(e, "line 1 column 6 path $.a", "Expected error at line 1 column 6 path $.a");
}


Input#21
@Test
  public void testCommentsInStringValue() throws Exception {
    JsonReader reader = new JsonReader(reader("[\"// comment\"]"));
    reader.beginArray();
    assertThat(reader.nextString()).isEqualTo("// comment");
    reader.endArray();

    reader = new JsonReader(reader("{\"a\":\"#someComment\"}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    assertThat(reader.nextString()).isEqualTo("#someComment");
    reader.endObject();

    reader = new JsonReader(reader("{\"#//a\":\"#some //Comment\"}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("#//a");
    assertThat(reader.nextString()).isEqualTo("#some //Comment");
    reader.endObject();
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']


Refactor#21

  private JsonReader createJsonReader(String json) {
    return new JsonReader(new StringReader(json));
  }

  @Test
  public void testCommentsInStringValue_Array() {
    JsonReader reader = createJsonReader("[\"// comment\"]");
    assertDoesNotThrow(() -> {
      reader.beginArray();
      assertThat(reader.nextString(), equalTo("// comment"), "Expected string value to be '// comment'");
      reader.endArray();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testCommentsInStringValue_ObjectKey() {
    JsonReader reader = createJsonReader("{\"a\":\"#someComment\"}");
    assertDoesNotThrow(() -> {
      reader.beginObject();
      assertThat(reader.nextName(), equalTo("a"), "Expected object key to be 'a'");
      assertThat(reader.nextString(), equalTo("#someComment"), "Expected string value to be '#someComment'");
      reader.endObject();
    }, "Unexpected exception occurred during the test");
  }

  @Test
  public void testCommentsInStringValue_ComplexObject() {
    JsonReader reader = createJsonReader("{\"#//a\":\"#some //Comment\"}");
    assertDoesNotThrow(() -> {
      reader.beginObject();
      assertThat(reader.nextName(), equalTo("#//a"), "Expected object key to be '#//a'");
      assertThat(reader.nextString(), equalTo("#some //Comment"), "Expected string value to be '#some //Comment'");
      reader.endObject();
    }, "Unexpected exception occurred during the test");
  }

Input#22

Refactor#22


Input#23

Refactor#23


Input#24
 @Test
  public void testStrictCommentsWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[// comment \n true]"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 3 path $[0]");

    JsonReader reader2 = new JsonReader(reader("[# comment \n true]"));
    reader2.beginArray();
    e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());
    assertStrictError(e, "line 1 column 3 path $[0]");

    JsonReader reader3 = new JsonReader(reader("[/* comment */ true]"));
    reader3.beginArray();
    e = assertThrows(MalformedJsonException.class, () -> reader3.skipValue());
    assertStrictError(e, "line 1 column 3 path $[0]");
  }
Context: /com/google/gson/stream/JsonReader
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']


Refactor#24

private JsonReader createJsonReader(String json) {
    return new JsonReader(reader(json));
}

private void validateStrictCommentError(String json, String expectedError) {
    JsonReader reader = createJsonReader(json);
    reader.beginArray();
    MalformedJsonException exception = assertThrows(
        MalformedJsonException.class,
        reader::skipValue,
        "Expected MalformedJsonException for JSON: " + json
    );
    assertStrictError(exception, expectedError);
}

@Test
public void testStrictComments_SlashComment() {
    validateStrictCommentError(
        "[// comment \n true]",
        "line 1 column 3 path $[0]"
    );
}

@Test
public void testStrictComments_HashComment() {
    validateStrictCommentError(
        "[# comment \n true]",
        "line 1 column 3 path $[0]"
    );
}

@Test
public void testStrictComments_BlockComment() {
    validateStrictCommentError(
        "[/* comment */ true]",
        "line 1 column 3 path $[0]"
    );
}

Input#25
 @Test
  public void testStrictUnquotedNames() throws IOException {
    JsonReader reader = new JsonReader(reader("{a:true}"));
    reader.beginObject();
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());
    assertStrictError(e, "line 1 column 3 path $.");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#25
@Test
public void testStrictUnquotedNames() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(reader("{a:true}"));
        reader.beginObject();
        MalformedJsonException exception = assertThrows(MalformedJsonException.class, () -> {
            reader.nextName();
        });
        assertStrictError(exception, "line 1 column 3 path $.");
    });
}


Input#26
@Test
  public void testLenientUnquotedNames() throws IOException {
    JsonReader reader = new JsonReader(reader("{a:true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#26
@Test
public void testLenientUnquotedNames() {
  assertDoesNotThrow(() -> {
    JsonReader reader = new JsonReader(new StringReader("{a:true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
  }, "Unexpected exception occurred during the test");
}

Input#27
@Test
  public void testStrictUnquotedNamesWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("{a:true}"));
    reader.beginObject();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 3 path $.");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#27
@Test
public void testStrictUnquotedNamesWithSkipValue() {
  assertDoesNotThrow(()->{
    JsonReader reader = new JsonReader(new StringReader("{a:true}"));
        reader.beginObject();
    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> {
        reader.skipValue();
    });
    assertStrictError(e, "line 1 column 3 path $.");
  });
}



Input#28
 @Test
  public void testStrictSingleQuotedNames() throws IOException {
    JsonReader reader = new JsonReader(reader("{'a':true}"));
    reader.beginObject();
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextName());
    assertStrictError(e, "line 1 column 3 path $.");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#28
@Test
public void testStrictSingleQuotedNames() {
    assertDoesNotThrow(()->{
      JsonReader reader = new JsonReader(reader("{'a':true}"));
      reader.beginObject();
      MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextName());
      assertStrictError(e, "line 1 column 3 path $.");
    });
}



Input#29
 @Test
  public void testLenientSingleQuotedNames() throws IOException {
    JsonReader reader = new JsonReader(reader("{'a':true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#29
@Test
public void testLenientSingleQuotedNames() {
  assertDoesNotThrow(() -> {
    JsonReader reader = new JsonReader(reader("{'a':true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
  }, "Unexpected exception occurred during the test");
}

Input#30
 @Test
  public void testStrictSingleQuotedNamesWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("{'a':true}"));
    reader.beginObject();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 3 path $.");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#30
@Test
public void testStrictSingleQuotedNamesWithSkipValue() {
  assertDoesNotThrow(() -> {
    JsonReader reader = new JsonReader(reader("{'a':true}"));
    reader.beginObject();
    MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 3 path $.");
    }, "Unexpected exception occurred during the test");
}


Input#31
 @Test
  public void testStrictUnquotedStrings() throws IOException {
    JsonReader reader = new JsonReader(reader("[a]"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());
    assertStrictError(e, "line 1 column 2 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#31
@Test
public void testStrictUnquotedStrings() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(new StringReader("[a]"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextString());
        assertStrictError(e, "line 1 column 2 path $[0]");
    });
}



Input#32
 @Test
  public void testStrictUnquotedStringsWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[a]"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 2 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#32
@Test
public void testStrictUnquotedStringsWithSkipValue() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(new StringReader("[a]"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertStrictError(e, "line 1 column 2 path $[0]");
    });
}


Input#33
 @Test
  public void testLenientUnquotedStrings() throws IOException {
    JsonReader reader = new JsonReader(reader("[a]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextString()).isEqualTo("a");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#33
@Test
public void testLenientUnquotedStrings() {
  assertDoesNotThrow(() -> {
    JsonReader reader = new JsonReader(new StringReader("[a]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextString()).isEqualTo("a");
  }, "Unexpected exception occurred during the test");
}


Input#34
 @Test
  public void testStrictSingleQuotedStrings() throws IOException {
    JsonReader reader = new JsonReader(reader("['a']"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextString());
    assertStrictError(e, "line 1 column 3 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#34
@Test
public void testStrictSingleQuotedStrings() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(reader("['a']"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextString());
        assertStrictError(e, "line 1 column 3 path $[0]");
    }, "Unexpected exception occurred during the test");
}


Input#35
@Test
  public void testLenientSingleQuotedStrings() throws IOException {
    JsonReader reader = new JsonReader(reader("['a']"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextString()).isEqualTo("a");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#35
@Test
public void testLenientSingleQuotedStrings() {
  assertDoesNotThrow(() -> {
    JsonReader reader = new JsonReader(reader("['a']"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextString()).isEqualTo("a");
  }, "Unexpected exception occurred during the test");
}


Input#36
 @Test
  public void testStrictSingleQuotedStringsWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("['a']"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 3 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#36

@Test
public void testStrictSingleQuotedStringsWithSkipValue() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(reader("['a']"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertStrictError(e, "line 1 column 3 path $[0]");
    }, "Unexpected exception occurred during the test");
}

Input#37
 @Test
  public void testStrictSemicolonDelimitedArray() throws IOException {
    JsonReader reader = new JsonReader(reader("[true;true]"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());
    assertStrictError(e, "line 1 column 2 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#37
@Test
public void testStrictSemicolonDelimitedArray() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(new StringReader("[true;true]"));
        assertThrows(MalformedJsonException.class, () -> {
            reader.beginArray();
            reader.nextBoolean();
        });
    });
}


Input#38
 @Test
  public void testLenientSemicolonDelimitedArray() throws IOException {
    JsonReader reader = new JsonReader(reader("[true;true]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextBoolean()).isTrue();
    assertThat(reader.nextBoolean()).isTrue();
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']


Refactor#38
private JsonReader createLenientReader(String input) throws IOException {
    JsonReader reader = new JsonReader(new StringReader(input));
    reader.setStrictness(Strictness.LENIENT);
    return reader;
  }

  @Test
  public void testLenientSemicolonDelimitedArray_FirstBoolean() throws IOException {
    JsonReader reader = createLenientReader("[true;true]");
    reader.beginArray();
    assertThat(reader.nextBoolean(), "First boolean should be true").isTrue();
  }

  @Test
  public void testLenientSemicolonDelimitedArray_SecondBoolean() throws IOException {
    JsonReader reader = createLenientReader("[true;true]");
    reader.beginArray();
    reader.nextBoolean(); // Skip the first boolean
    assertThat(reader.nextBoolean(), "Second boolean should be true").isTrue();
  }

  @Test
  public void testLenientSemicolonDelimitedArray_NoExceptionThrown() {
    assertDoesNotThrow(() -> {
      JsonReader reader = createLenientReader("[true;true]");
      reader.beginArray();
      reader.nextBoolean();
      reader.nextBoolean();
    }, "No exception should be thrown when reading the array");
  }

Input#39
 @Test
  public void testStrictSemicolonDelimitedArrayWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[true;true]"));
    reader.beginArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 2 path $[0]");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#39
@Test
public void testStrictSemicolonDelimitedArrayWithSkipValue() {
    assertDoesNotThrow(()->{
        JsonReader reader = new JsonReader(new StringReader("[true;true]"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertStrictError(e, "line 1 column 2 path $[0]");
    });
}

Input#40
 @Test
  public void testStrictSemicolonDelimitedNameValuePair() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextBoolean());
    assertStrictError(e, "line 1 column 6 path $.a");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#40
@Test
public void testStrictSemicolonDelimitedNameValuePair_BeginObject() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
    }, "Unexpected exception occurred during beginObject call");
}

@Test
public void testStrictSemicolonDelimitedNameValuePair_NextName() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        assertThat(reader.nextName(), is("a"), "Expected next name to be 'a'");
    }, "Unexpected exception occurred during beginObject call");
}

@Test
public void testStrictSemicolonDelimitedNameValuePair_NextBoolean() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        reader.nextName();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> {
            reader.nextBoolean();
        }, "Expected MalformedJsonException to be thrown");
        assertStrictError(e, "line 1 column 6 path $.a", "Expected error message to match");
    }, "Unexpected exception occurred during beginObject call");
}


Input#41
 @Test
  public void testLenientSemicolonDelimitedNameValuePair() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    assertThat(reader.nextBoolean()).isTrue();
    assertThat(reader.nextName()).isEqualTo("b");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']

Refactor#41
 private JsonReader createJsonReader(String json) throws IOException {
        return new JsonReader(new StringReader(json));
    }

    @Test
    public void testLenientSemicolonDelimitedNameValuePair_BeginObject() {
        JsonReader reader = null;
        assertDoesNotThrow(() -> {
            reader = createJsonReader("{\"a\":true;\"b\":true}");
            reader.setStrictness(Strictness.LENIENT);
            reader.beginObject();

            assertThat(reader.hasNext(), "Expected hasNext to be true after beginObject").isTrue();
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testLenientSemicolonDelimitedNameValuePair_ReadA() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("{\"a\":true;\"b\":true}");
            reader.setStrictness(Strictness.LENIENT);
            reader.beginObject();

            assertThat(reader.nextName(), "Expected nextName to be 'a'").isEqualTo("a");
            assertThat(reader.nextBoolean(), "Expected nextBoolean to be true for 'a'").isTrue();
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testLenientSemicolonDelimitedNameValuePair_ReadB() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("{\"a\":true;\"b\":true}");
            reader.setStrictness(Strictness.LENIENT);
            reader.beginObject();

            reader.nextName();
            reader.nextBoolean();

            assertThat(reader.nextName(), "Expected nextName to be 'b'").isEqualTo("b");
        }, "Unexpected exception occurred during the test when beginning object");
    }

Input#42
@Test
  public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("{\"a\":true;\"b\":true}"));
    reader.beginObject();
    assertThat(reader.nextName()).isEqualTo("a");
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 6 path $.a");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#42
   @Test
    public void testStrictSemicolonDelimitedNameValuePairWithSkipValue() {
        assertDoesNotThrow(() -> {
            JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}"));
            reader.beginObject();
            assertThat(reader.nextName(), "Expected 'a' as the next name").isEqualTo("a");
            MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> {
                reader.skipValue();
            }, "Expected MalformedJsonException when skipping value after semicolon");
            assertStrictError(e, "line 1 column 6 path $.a", "Expected error at line 1 column 6 path $.a");
        }, "Unexpected exception occurred during the test when beginning object");
    }


Input#43
@Test
  public void testStrictUnnecessaryArraySeparators() throws IOException {
    // The following calls `nextNull()` because a lenient JsonReader would treat redundant array
    // separators as implicit JSON null

    JsonReader reader = new JsonReader(reader("[true,,true]"));
    reader.beginArray();
    assertThat(reader.nextBoolean()).isTrue();
    var e = assertThrows(MalformedJsonException.class, () -> reader.nextNull());
    assertStrictError(e, "line 1 column 8 path $[1]");

    JsonReader reader2 = new JsonReader(reader("[,true]"));
    reader2.beginArray();
    e = assertThrows(MalformedJsonException.class, () -> reader2.nextNull());
    assertStrictError(e, "line 1 column 3 path $[0]");

    JsonReader reader3 = new JsonReader(reader("[true,]"));
    reader3.beginArray();
    assertThat(reader3.nextBoolean()).isTrue();
    e = assertThrows(MalformedJsonException.class, () -> reader3.nextNull());
    assertStrictError(e, "line 1 column 8 path $[1]");

    JsonReader reader4 = new JsonReader(reader("[,]"));
    reader4.beginArray();
    e = assertThrows(MalformedJsonException.class, () -> reader4.nextNull());
    assertStrictError(e, "line 1 column 3 path $[0]");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#43
 @Test
    public void testStrictUnnecessaryArraySeparators_FirstCase() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("[true,,true]");
            reader.beginArray();
            assertThat(reader.nextBoolean(), is(true), "Expected true at the first position");
            MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextNull(), "Expected MalformedJsonException when reading null at the second position");
            assertStrictError(e, "line 1 column 8 path $[1]", "Expected error at line 1 column 8 path $[1]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testStrictUnnecessaryArraySeparators_SecondCase() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("[,true]");
            reader.beginArray();
            MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextNull(), "Expected MalformedJsonException when reading null at the first position");
            assertStrictError(e, "line 1 column 3 path $[0]", "Expected error at line 1 column 3 path $[0]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testStrictUnnecessaryArraySeparators_ThirdCase() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("[true,]");
            reader.beginArray();
            assertThat(reader.nextBoolean(), is(true), "Expected true at the first position");
            MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextNull(), "Expected MalformedJsonException when reading null at the second position");
            assertStrictError(e, "line 1 column 8 path $[1]", "Expected error at line 1 column 8 path $[1]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testStrictUnnecessaryArraySeparators_FourthCase() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("[,]");
            reader.beginArray();
            MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.nextNull(), "Expected MalformedJsonException when reading null at the first position");
            assertStrictError(e, "line 1 column 3 path $[0]", "Expected error at line 1 column 3 path $[0]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

Input#44
@Test
  public void testLenientUnnecessaryArraySeparators() throws IOException {
    JsonReader reader = new JsonReader(reader("[true,,true]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextBoolean()).isTrue();
    // Redundant array separators are treated as implicit JSON null
    reader.nextNull();
    assertThat(reader.nextBoolean()).isTrue();
    reader.endArray();

    reader = new JsonReader(reader("[,true]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    reader.nextNull();
    assertThat(reader.nextBoolean()).isTrue();
    reader.endArray();

    reader = new JsonReader(reader("[true,]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    assertThat(reader.nextBoolean()).isTrue();
    reader.nextNull();
    reader.endArray();

    reader = new JsonReader(reader("[,]"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    reader.nextNull();
    reader.nextNull();
    reader.endArray();
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test', 'Duplicate_Assert']

Refactor#44
 private JsonReader createLenientReader(String json) throws IOException {
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.setStrictness(Strictness.LENIENT);
        return reader;
    }

    @Test
    public void testLenientUnnecessaryArraySeparators_WithEmptyEntries() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createLenientReader("[true,,true]");
            reader.beginArray();
            assertThat(reader.nextBoolean(), "First boolean should be true").isTrue();
            reader.nextNull(); // Redundant array separators are treated as implicit JSON null
            assertThat(reader.nextBoolean(), "Second boolean should be true").isTrue();
            reader.endArray();
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testLenientUnnecessaryArraySeparators_WithLeadingNull() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createLenientReader("[,true]");
            reader.beginArray();
            reader.nextNull(); // Leading null
            assertThat(reader.nextBoolean(), "Boolean should be true").isTrue();
            reader.endArray();
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testLenientUnnecessaryArraySeparators_WithTrailingNull() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createLenientReader("[true,]");
            reader.beginArray();
            assertThat(reader.nextBoolean(), "Boolean should be true").isTrue();
            reader.nextNull(); // Trailing null
            reader.endArray();
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testLenientUnnecessaryArraySeparators_WithEmptyEntriesOnly() {
        assertDoesNotThrow(() -> {

            JsonReader reader = createLenientReader("[,]");
            reader.beginArray();
            reader.nextNull(); // First null
            reader.nextNull(); // Second null
            reader.endArray();
        }, "Unexpected exception occurred during the test when beginning object");
    }


Input#45
@Test
  public void testStrictUnnecessaryArraySeparatorsWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[true,,true]"));
    reader.beginArray();
    assertThat(reader.nextBoolean()).isTrue();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 8 path $[1]");

    JsonReader reader2 = new JsonReader(reader("[,true]"));
    reader2.beginArray();
    e = assertThrows(MalformedJsonException.class, () -> reader2.skipValue());
    assertStrictError(e, "line 1 column 3 path $[0]");

    JsonReader reader3 = new JsonReader(reader("[true,]"));
    reader3.beginArray();
    assertThat(reader3.nextBoolean()).isTrue();
    e = assertThrows(MalformedJsonException.class, () -> reader3.skipValue());
    assertStrictError(e, "line 1 column 8 path $[1]");

    JsonReader reader4 = new JsonReader(reader("[,]"));
    reader4.beginArray();
    e = assertThrows(MalformedJsonException.class, () -> reader4.skipValue());
    assertStrictError(e, "line 1 column 3 path $[0]");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']


Refactor#45
 private JsonReader createJsonReader(String json) throws IOException {
        return new JsonReader(new StringReader(json));
    }

    private void assertMalformedJsonException(JsonReader reader, String expectedMessage) {
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertStrictError(e, expectedMessage);
    }

    @Test
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_1() {
        assertDoesNotThrow(() -> {
            JsonReader reader = createJsonReader("[true,,true]");
            reader.beginArray();
            assertThat(reader.nextBoolean(), is(true), "First boolean value should be true");
            assertMalformedJsonException(reader, "line 1 column 8 path $[1]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_2() {
        assertDoesNotThrow(() -> {

            JsonReader reader = createJsonReader("[,true]");
            reader.beginArray();
            assertMalformedJsonException(reader, "line 1 column 3 path $[0]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_3() {
        assertDoesNotThrow(() -> {

            JsonReader reader = createJsonReader("[true,]");
            reader.beginArray();
            assertThat(reader.nextBoolean(), is(true), "First boolean value should be true");
            assertMalformedJsonException(reader, "line 1 column 8 path $[1]");
        }, "Unexpected exception occurred during the test when beginning object");
    }

    @Test
    public void testStrictUnnecessaryArraySeparatorsWithSkipValue_4() {
        assertDoesNotThrow(() -> {

            JsonReader reader = createJsonReader("[,]");
            reader.beginArray();
            assertMalformedJsonException(reader, "line 1 column 3 path $[0]");
        }, "Unexpected exception occurred during the test when beginning object");
    }


Input#46
 @Test
  public void testStrictMultipleTopLevelValues() throws IOException {
    JsonReader reader = new JsonReader(reader("[] []"));
    reader.beginArray();
    reader.endArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.peek());
    assertStrictError(e, "line 1 column 5 path $");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#46
@Test
public void testStrictMultipleTopLevelValues() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.endArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.peek());
        assertStrictError(e, "line 1 column 5 path $");
    }, "Unexpected exception occurred during the test when beginning object");
}


Input#47
 @Test
  public void testLenientMultipleTopLevelValues() throws IOException {
    JsonReader reader = new JsonReader(reader("[] true {}"));
    reader.setStrictness(Strictness.LENIENT);
    reader.beginArray();
    reader.endArray();
    assertThat(reader.nextBoolean()).isTrue();
    reader.beginObject();
    reader.endObject();
    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']

Refactor#47
private JsonReader setupTestLenientMultipleTopLevelValues() {
    JsonReader reader = new JsonReader(reader("[] true {}"));
    reader.setStrictness(Strictness.LENIENT);
    return reader;
}

@Test
public void testLenientMultipleTopLevelValues_Array() {
    assertDoesNotThrow(() -> {
        JsonReader reader = setupTestLenientMultipleTopLevelValues();
        reader.beginArray();
        reader.endArray();
        assertThat(reader.peek()).isEqualTo(JsonToken.BOOLEAN, "Expected next token to be BOOLEAN after processing array");
    }, "Unexpected exception occurred during the test when beginning object");
}

@Test
public void testLenientMultipleTopLevelValues_Boolean() {
    assertDoesNotThrow(() -> {
        JsonReader reader = setupTestLenientMultipleTopLevelValues();
        assertThat(reader.nextBoolean()).isTrue("Expected boolean value to be true");
    }, "Unexpected exception occurred during the test when beginning object");
}

@Test
public void testLenientMultipleTopLevelValues_Object() {
    assertDoesNotThrow(() -> {
        JsonReader reader = setupTestLenientMultipleTopLevelValues();
        reader.beginObject();
        reader.endObject();
        assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT, "Expected next token to be END_DOCUMENT after processing object");
    }, "Unexpected exception occurred during the test when beginning object");
}

Input#48
 @Test
  public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("[] []"));
    reader.beginArray();
    reader.endArray();
    var e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
    assertStrictError(e, "line 1 column 5 path $");
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']


Refactor#48
@Test
public void testStrictMultipleTopLevelValuesWithSkipValue() {
    assertDoesNotThrow(() -> {
        JsonReader reader = new JsonReader(reader("[] []"));
        reader.beginArray();
        reader.endArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertStrictError(e, "line 1 column 5 path $");
    }, "Unexpected exception occurred during the test when beginning object");
}

Input#49

Refactor#49


Input#50
 @Test
  public void testTopLevelValueTypeWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader("true"));
    reader.skipValue();
    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
  }
Smell List: ['Exception_Catching_Throwing', 'Eager_Test']

Refactor#50

@Test
public void testTopLevelValueTypeWithSkipValue() {
  assertDoesNotThrow(() -> {
    JsonReader reader = new JsonReader(reader("true"));
    reader.skipValue();
    assertThat(reader.peek()).isEqualTo(JsonToken.END_DOCUMENT);
  }, "Unexpected exception occurred during the test");
}
