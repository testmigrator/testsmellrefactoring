File#1


Input#1
@Test
  public void testOverridesDefaultExcluder() {
    Gson gson =
        new Gson(
            CUSTOM_EXCLUDER,
            CUSTOM_FIELD_NAMING_STRATEGY,
            new HashMap<>(),
            true,
            false,
            true,
            false,
            FormattingStyle.PRETTY,
            Strictness.LENIENT,
            false,
            true,
            LongSerializationPolicy.DEFAULT,
            null,
            DateFormat.DEFAULT,
            DateFormat.DEFAULT,
            new ArrayList<>(),
            new ArrayList<>(),
            new ArrayList<>(),
            CUSTOM_OBJECT_TO_NUMBER_STRATEGY,
            CUSTOM_NUMBER_TO_NUMBER_STRATEGY,
            Collections.emptyList());

    assertThat(gson.excluder).isEqualTo(CUSTOM_EXCLUDER);
    assertThat(gson.fieldNamingStrategy()).isEqualTo(CUSTOM_FIELD_NAMING_STRATEGY);
    assertThat(gson.serializeNulls()).isTrue();
    assertThat(gson.htmlSafe()).isFalse();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#1

private Gson createGsonWithCustomExcluder() {
    return new Gson(
        CUSTOM_EXCLUDER,
        CUSTOM_FIELD_NAMING_STRATEGY,
        new HashMap<>(),
        true,
        false,
        true,
        false,
        FormattingStyle.PRETTY,
        Strictness.LENIENT,
        false,
        true,
        LongSerializationPolicy.DEFAULT,
        null,
        DateFormat.DEFAULT,
        DateFormat.DEFAULT,
        new ArrayList<>(),
        new ArrayList<>(),
        new ArrayList<>(),
        CUSTOM_OBJECT_TO_NUMBER_STRATEGY,
        CUSTOM_NUMBER_TO_NUMBER_STRATEGY,
        Collections.emptyList());
}

@Test
public void testOverridesDefaultExcluder_Excluder() {
    Gson gson = createGsonWithCustomExcluder();
    assertThat(gson.excluder).isEqualTo(CUSTOM_EXCLUDER, "Excluder should be overridden");
}

@Test
public void testOverridesDefaultExcluder_FieldNamingStrategy() {
    Gson gson = createGsonWithCustomExcluder();
    assertThat(gson.fieldNamingStrategy()).isEqualTo(CUSTOM_FIELD_NAMING_STRATEGY, "Field naming strategy should be overridden");
}

@Test
public void testOverridesDefaultExcluder_SerializeNulls() {
    Gson gson = createGsonWithCustomExcluder();
    assertThat(gson.serializeNulls()).isTrue("Serialize nulls should be true");
}

@Test
public void testOverridesDefaultExcluder_HtmlSafe() {
    Gson gson = createGsonWithCustomExcluder();
    assertThat(gson.htmlSafe()).isFalse("Html safe should be false");
}




Input#2
@Test
  public void testGetAdapter_Null() {
    Gson gson = new Gson();
    NullPointerException e =
        assertThrows(NullPointerException.class, () -> gson.getAdapter((TypeToken<?>) null));
    assertThat(e).hasMessageThat().isEqualTo("type must not be null");
  }
Smell List: ['Assertion_Roulette']

Refactor#2
@Test
public void testGetAdapter_Null() {
  Gson gson = new Gson();
  NullPointerException e =
      assertThrows(NullPointerException.class, () -> gson.getAdapter((TypeToken<?>) null), "Expected NullPointerException when passing null to getAdapter");
  assertThat(e).hasMessageThat().isEqualTo("type must not be null").withFailMessage("Expected exception message to match 'type must not be null'");
}


Input#3
 @Test
  public void testGetAdapter_Concurrency() {
    class DummyAdapter<T> extends TypeAdapter<T> {
      @Override
      public void write(JsonWriter out, T value) throws IOException {
        throw new AssertionError("not needed for this test");
      }

      @Override
      public T read(JsonReader in) throws IOException {
        throw new AssertionError("not needed for this test");
      }
    }

    final AtomicInteger adapterInstancesCreated = new AtomicInteger(0);
    final AtomicReference<TypeAdapter<?>> threadAdapter = new AtomicReference<>();
    final Class<?> requestedType = Number.class;

    Gson gson =
        new GsonBuilder()
            .registerTypeAdapterFactory(
                new TypeAdapterFactory() {
                  private volatile boolean isFirstCall = true;

                  @Override
                  public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
                    if (isFirstCall) {
                      isFirstCall = false;

                      // Create a separate thread which requests an adapter for the same type
                      // This will cause this factory to return a different adapter instance than
                      // the one it is currently creating
                      Thread thread =
                          new Thread() {
                            @Override
                            public void run() {
                              threadAdapter.set(gson.getAdapter(requestedType));
                            }
                          };
                      thread.start();
                      try {
                        thread.join();
                      } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                      }
                    }

                    // Create a new dummy adapter instance
                    adapterInstancesCreated.incrementAndGet();
                    return new DummyAdapter<>();
                  }
                })
            .create();

    TypeAdapter<?> adapter = gson.getAdapter(requestedType);
    assertThat(adapterInstancesCreated.get()).isEqualTo(2);
    assertThat(adapter).isInstanceOf(DummyAdapter.class);
    assertThat(threadAdapter.get()).isInstanceOf(DummyAdapter.class);
  }
Smell List: ['Assertion_Roulette']

Refactor#3

@Test
public void testGetAdapter_Concurrency() {
  class DummyAdapter<T> extends TypeAdapter<T> {
    @Override
    public void write(JsonWriter out, T value) throws IOException {
      throw new AssertionError("not needed for this test");
    }

    @Override
    public T read(JsonReader in) throws IOException {
      throw new AssertionError("not needed for this test");
    }
  }

  final AtomicInteger adapterInstancesCreated = new AtomicInteger(0);
  final AtomicReference<TypeAdapter<?>> threadAdapter = new AtomicReference<>();
  final Class<?> requestedType = Number.class;

  Gson gson =
      new GsonBuilder()
          .registerTypeAdapterFactory(
              new TypeAdapterFactory() {
                private volatile boolean isFirstCall = true;

                @Override
                public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
                  if (isFirstCall) {
                    isFirstCall = false;

                    // Create a separate thread which requests an adapter for the same type
                    // This will cause this factory to return a different adapter instance than
                    // the one it is currently creating
                    Thread thread =
                        new Thread() {
                          @Override
                          public void run() {
                            threadAdapter.set(gson.getAdapter(requestedType));
                          }
                        };
                    thread.start();
                    try {
                      thread.join();
                    } catch (InterruptedException e) {
                      throw new RuntimeException(e);
                    }
                  }

                  // Create a new dummy adapter instance
                  adapterInstancesCreated.incrementAndGet();
                  return new DummyAdapter<>();
                }
              })
          .create();

  TypeAdapter<?> adapter = gson.getAdapter(requestedType);
  assertThat(adapterInstancesCreated.get(), "Expected 2 adapter instances to be created")
      .isEqualTo(2);
  assertThat(adapter, "Expected the main thread adapter to be an instance of DummyAdapter")
      .isInstanceOf(DummyAdapter.class);
  assertThat(threadAdapter.get(), "Expected the thread adapter to be an instance of DummyAdapter")
      .isInstanceOf(DummyAdapter.class);
}


Input#4

Refactor#4


Input#5

Refactor#5


Input#6
@Test
  public void testNewJsonWriter_Default() throws IOException {
    StringWriter writer = new StringWriter();
    JsonWriter jsonWriter = new Gson().newJsonWriter(writer);
    jsonWriter.beginObject();
    jsonWriter.name("test");
    jsonWriter.nullValue();
    jsonWriter.name("<test2");
    jsonWriter.value(true);
    jsonWriter.endObject();

    // Additional top-level value
    IllegalStateException e = assertThrows(IllegalStateException.class, () -> jsonWriter.value(1));
    assertThat(e).hasMessageThat().isEqualTo("JSON must have only one top-level value.");

    jsonWriter.close();
    assertThat(writer.toString()).isEqualTo("{\"\\u003ctest2\":true}");
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Sensitive_Equality', 'Eager_Test']


Refactor#6

private StringWriter setupTestNewJsonWriter_Default() {
    StringWriter writer = new StringWriter();
    JsonWriter jsonWriter = null;
    try {
      jsonWriter = new Gson().newJsonWriter(writer);
      jsonWriter.beginObject();
      jsonWriter.name("test");
      jsonWriter.nullValue();
      jsonWriter.name("<test2");
      jsonWriter.value(true);
      jsonWriter.endObject();
      return writer;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  @Test
  public void testNewJsonWriter_Default_WritesCorrectJson() {
    StringWriter writer = setupTestNewJsonWriter_Default();
    String actualValue = writer.toString();
//    "JSON output should match expected format"
    assertThat(actualValue).isEqualTo("{\"\\u003ctest2\":true}");
  }

  @Test
  public void testNewJsonWriter_Default_ThrowsExceptionOnAdditionalTopLevelValue() {
    StringWriter writer = setupTestNewJsonWriter_Default();

    IllegalStateException exception = assertThrows(IllegalStateException.class, () -> {
      JsonWriter jsonWriter = new Gson().newJsonWriter(writer);
      jsonWriter.value(1);
    });
//    "Exception message should indicate only one top-level value is allowed"
    assertThat(exception).hasMessageThat().isEqualTo("JSON must have only one top-level value.");
}



Input#7
 @Test
  public void testNewJsonWriter_Custom() throws IOException {
    StringWriter writer = new StringWriter();
    JsonWriter jsonWriter =
        new GsonBuilder()
            .disableHtmlEscaping()
            .generateNonExecutableJson()
            .setPrettyPrinting()
            .serializeNulls()
            .setLenient()
            .create()
            .newJsonWriter(writer);
    jsonWriter.beginObject();
    jsonWriter.name("test");
    jsonWriter.nullValue();
    jsonWriter.name("<test2");
    jsonWriter.value(true);
    jsonWriter.endObject();

    // Additional top-level value
    jsonWriter.value(1);

    jsonWriter.close();
    assertThat(writer.toString()).isEqualTo(")]}'\n{\n  \"test\": null,\n  \"<test2\": true\n}1");
  }
Smell List: ['Exception_Catching_Throwing', 'Sensitive_Equality', 'Eager_Test']


Refactor#7
 @Test
  public void testNewJsonWriter_Custom() {
    assertDoesNotThrow(() -> {
      StringWriter writer = new StringWriter();
      JsonWriter jsonWriter =
              new GsonBuilder()
                      .disableHtmlEscaping()
                      .generateNonExecutableJson()
                      .setPrettyPrinting()
                      .serializeNulls()
                      .setLenient()
                      .create()
                      .newJsonWriter(writer);
      jsonWriter.beginObject();
      jsonWriter.name("test");
      jsonWriter.nullValue();
      jsonWriter.name("<test2");
      jsonWriter.value(true);
      jsonWriter.endObject();

      // Additional top-level value
      jsonWriter.value(1);

      jsonWriter.close();
      assertThat(writer.toString()).isEqualTo(")]}'\n{\n  \"test\": null,\n  \"<test2\": true\n}1");
    });
  }

Input#8
@Test
  public void testNewJsonReader_Default() throws IOException {
    String json = "test"; // String without quotes
    JsonReader jsonReader = new Gson().newJsonReader(new StringReader(json));
    assertThrows(MalformedJsonException.class, jsonReader::nextString);
    jsonReader.close();
  }
Smell List: ['Exception_Catching_Throwing']

Refactor#8
@Test
public void testNewJsonReader_Default() {
    String json = "test"; // String without quotes
    JsonReader jsonReader = new Gson().newJsonReader(new StringReader(json));
    assertThrows(MalformedJsonException.class, jsonReader::nextString);
    assertDoesNotThrow(jsonReader::close, "Unexpected exception occurred while closing the JsonReader");
}


Input#9
 @Test
  public void testNewJsonReader_Custom() throws IOException {
    String json = "test"; // String without quotes
    JsonReader jsonReader =
        new GsonBuilder().setLenient().create().newJsonReader(new StringReader(json));
    assertThat(jsonReader.nextString()).isEqualTo("test");
    jsonReader.close();
  }
Smell List: ['Exception_Catching_Throwing']

Refactor#9
@Test
public void testNewJsonReader_Custom() {
  String json = "test"; // String without quotes
  assertDoesNotThrow(() -> {
    JsonReader jsonReader =
        new GsonBuilder().setLenient().create().newJsonReader(new StringReader(json));
    assertThat(jsonReader.nextString()).isEqualTo("test");
    jsonReader.close();
  }, "Unexpected exception occurred during the test");
}

Input#10
@Test
  public void testDefaultGsonNewBuilderModification() {
    Gson gson = new Gson();
    GsonBuilder gsonBuilder = gson.newBuilder();

    // Modifications of `gsonBuilder` should not affect `gson` object
    gsonBuilder.registerTypeAdapter(
        CustomClass1.class,
        new TypeAdapter<CustomClass1>() {
          @Override
          public CustomClass1 read(JsonReader in) throws IOException {
            throw new UnsupportedOperationException();
          }

          @Override
          public void write(JsonWriter out, CustomClass1 value) throws IOException {
            out.value("custom-adapter");
          }
        });
    gsonBuilder.registerTypeHierarchyAdapter(
        CustomClass2.class,
        new JsonSerializer<CustomClass2>() {
          @Override
          public JsonElement serialize(
              CustomClass2 src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive("custom-hierarchy-adapter");
          }
        });
    gsonBuilder.registerTypeAdapter(
        CustomClass3.class,
        new InstanceCreator<CustomClass3>() {
          @Override
          public CustomClass3 createInstance(Type type) {
            return new CustomClass3("custom-instance");
          }
        });

    assertDefaultGson(gson);
    // New GsonBuilder created from `gson` should not have been affected by changes either
    assertDefaultGson(gson.newBuilder().create());

    // But new Gson instance from `gsonBuilder` should use custom adapters
    assertCustomGson(gsonBuilder.create());
  }
Smell List: ['Eager_Test']

Refactor#10
private void setupTestDefaultGsonNewBuilderModification() {
    Gson gson = new Gson();
    GsonBuilder gsonBuilder = gson.newBuilder();

    // Modifications of `gsonBuilder` should not affect `gson` object
    gsonBuilder.registerTypeAdapter(
        CustomClass1.class,
        new TypeAdapter<CustomClass1>() {
          @Override
          public CustomClass1 read(JsonReader in) throws IOException {
            throw new UnsupportedOperationException();
          }

          @Override
          public void write(JsonWriter out, CustomClass1 value) throws IOException {
            out.value("custom-adapter");
          }
        });
    gsonBuilder.registerTypeHierarchyAdapter(
        CustomClass2.class,
        new JsonSerializer<CustomClass2>() {
          @Override
          public JsonElement serialize(
              CustomClass2 src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive("custom-hierarchy-adapter");
          }
        });
    gsonBuilder.registerTypeAdapter(
        CustomClass3.class,
        new InstanceCreator<CustomClass3>() {
          @Override
          public CustomClass3 createInstance(Type type) {
            return new CustomClass3("custom-instance");
          }
        });

    this.gson = gson;
    this.gsonBuilder = gsonBuilder;
}

@Test
public void testDefaultGsonNewBuilderModification_GsonUnaffected() {
    setupTestDefaultGsonNewBuilderModification();
    assertDefaultGson(gson);
}

@Test
public void testDefaultGsonNewBuilderModification_NewGsonUnaffected() {
    setupTestDefaultGsonNewBuilderModification();
    assertDefaultGson(gson.newBuilder().create());
}

@Test
public void testDefaultGsonNewBuilderModification_CustomAdaptersApplied() {
    setupTestDefaultGsonNewBuilderModification();
    assertCustomGson(gsonBuilder.create());
}

Input#11
@Test
  public void testNewBuilderModification() {
    Gson gson =
        new GsonBuilder()
            .registerTypeAdapter(
                CustomClass1.class,
                new TypeAdapter<CustomClass1>() {
                  @Override
                  public CustomClass1 read(JsonReader in) throws IOException {
                    throw new UnsupportedOperationException();
                  }

                  @Override
                  public void write(JsonWriter out, CustomClass1 value) throws IOException {
                    out.value("custom-adapter");
                  }
                })
            .registerTypeHierarchyAdapter(
                CustomClass2.class,
                new JsonSerializer<CustomClass2>() {
                  @Override
                  public JsonElement serialize(
                      CustomClass2 src, Type typeOfSrc, JsonSerializationContext context) {
                    return new JsonPrimitive("custom-hierarchy-adapter");
                  }
                })
            .registerTypeAdapter(
                CustomClass3.class,
                new InstanceCreator<CustomClass3>() {
                  @Override
                  public CustomClass3 createInstance(Type type) {
                    return new CustomClass3("custom-instance");
                  }
                })
            .create();

    assertCustomGson(gson);

    // Modify `gson.newBuilder()`
    GsonBuilder gsonBuilder = gson.newBuilder();
    gsonBuilder.registerTypeAdapter(
        CustomClass1.class,
        new TypeAdapter<CustomClass1>() {
          @Override
          public CustomClass1 read(JsonReader in) throws IOException {
            throw new UnsupportedOperationException();
          }

          @Override
          public void write(JsonWriter out, CustomClass1 value) throws IOException {
            out.value("overwritten custom-adapter");
          }
        });
    gsonBuilder.registerTypeHierarchyAdapter(
        CustomClass2.class,
        new JsonSerializer<CustomClass2>() {
          @Override
          public JsonElement serialize(
              CustomClass2 src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive("overwritten custom-hierarchy-adapter");
          }
        });
    gsonBuilder.registerTypeAdapter(
        CustomClass3.class,
        new InstanceCreator<CustomClass3>() {
          @Override
          public CustomClass3 createInstance(Type type) {
            return new CustomClass3("overwritten custom-instance");
          }
        });

    // `gson` object should not have been affected by changes to new GsonBuilder
    assertCustomGson(gson);
    // New GsonBuilder based on `gson` should not have been affected either
    assertCustomGson(gson.newBuilder().create());

    // But new Gson instance from `gsonBuilder` should be affected by changes
    Gson otherGson = gsonBuilder.create();
    String json1 = otherGson.toJson(new CustomClass1());
    assertThat(json1).isEqualTo("\"overwritten custom-adapter\"");

    String json2 = otherGson.toJson(new CustomClass2());
    assertThat(json2).isEqualTo("\"overwritten custom-hierarchy-adapter\"");

    CustomClass3 customClass3 = otherGson.fromJson("{}", CustomClass3.class);
    assertThat(customClass3.s).isEqualTo("overwritten custom-instance");
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#11


private Gson createCustomGson() {
    return new GsonBuilder()
        .registerTypeAdapter(
            CustomClass1.class,
            new TypeAdapter<CustomClass1>() {
              @Override
              public CustomClass1 read(JsonReader in) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public void write(JsonWriter out, CustomClass1 value) throws IOException {
                out.value("custom-adapter");
              }
            })
        .registerTypeHierarchyAdapter(
            CustomClass2.class,
            new JsonSerializer<CustomClass2>() {
              @Override
              public JsonElement serialize(
                  CustomClass2 src, Type typeOfSrc, JsonSerializationContext context) {
                return new JsonPrimitive("custom-hierarchy-adapter");
              }
            })
        .registerTypeAdapter(
            CustomClass3.class,
            new InstanceCreator<CustomClass3>() {
              @Override
              public CustomClass3 createInstance(Type type) {
                return new CustomClass3("custom-instance");
              }
            })
        .create();
}

private GsonBuilder modifyGsonBuilder(GsonBuilder gsonBuilder) {
    return gsonBuilder
        .registerTypeAdapter(
            CustomClass1.class,
            new TypeAdapter<CustomClass1>() {
              @Override
              public CustomClass1 read(JsonReader in) throws IOException {
                throw new UnsupportedOperationException();
              }

              @Override
              public void write(JsonWriter out, CustomClass1 value) throws IOException {
                out.value("overwritten custom-adapter");
              }
            })
        .registerTypeHierarchyAdapter(
            CustomClass2.class,
            new JsonSerializer<CustomClass2>() {
              @Override
              public JsonElement serialize(
                  CustomClass2 src, Type typeOfSrc, JsonSerializationContext context) {
                return new JsonPrimitive("overwritten custom-hierarchy-adapter");
              }
            })
        .registerTypeAdapter(
            CustomClass3.class,
            new InstanceCreator<CustomClass3>() {
              @Override
              public CustomClass3 createInstance(Type type) {
                return new CustomClass3("overwritten custom-instance");
              }
            });
}

@Test
public void testNewBuilderModification_CustomGsonUnaffected() {
    Gson gson = createCustomGson();
    assertCustomGson(gson, "Initial custom Gson should match expected configuration");
    GsonBuilder gsonBuilder = gson.newBuilder();
    modifyGsonBuilder(gsonBuilder);
    assertCustomGson(gson, "Original Gson should remain unaffected after modifying builder");
    assertCustomGson(gson.newBuilder().create(), "New Gson from original builder should remain unaffected");
}

@Test
public void testNewBuilderModification_ModifiedGsonAffected() {
    Gson gson = createCustomGson();
    GsonBuilder gsonBuilder = gson.newBuilder();
    GsonBuilder modifiedGsonBuilder = modifyGsonBuilder(gsonBuilder);
    Gson otherGson = modifiedGsonBuilder.create();

    String json1 = otherGson.toJson(new CustomClass1());
    assertThat(json1).isEqualTo("\"overwritten custom-adapter\"").withFailMessage("CustomClass1 serialization should be overwritten");

    String json2 = otherGson.toJson(new CustomClass2());
    assertThat(json2).isEqualTo("\"overwritten custom-hierarchy-adapter\"").withFailMessage("CustomClass2 serialization should be overwritten");

    CustomClass3 customClass3 = otherGson.fromJson("{}", CustomClass3.class);
    assertThat(customClass3.s).isEqualTo("overwritten custom-instance").withFailMessage("CustomClass3 deserialization should be overwritten");
}

Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

