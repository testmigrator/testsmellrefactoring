File#1


Input#1
@Test
  public void testWriterForAppendable() throws IOException {
    StringBuilder stringBuilder = new StringBuilder();
    Writer writer = Streams.writerForAppendable(stringBuilder);

    writer.append('a');
    writer.append('\u1234');
    writer.append("test");
    writer.append(null); // test custom null handling mandated by `append`
    writer.append("abcdef", 2, 4);
    writer.append(null, 1, 3); // test custom null handling mandated by `append`
    writer.append(',');

    writer.write('a');
    writer.write('\u1234');
    // Should only consider the 16 low-order bits
    writer.write(0x4321_1234);
    writer.append(',');

    writer.write("chars".toCharArray());
    assertThrows(NullPointerException.class, () -> writer.write((char[]) null));

    writer.write("chars".toCharArray(), 1, 2);
    assertThrows(NullPointerException.class, () -> writer.write((char[]) null, 1, 2));
    writer.append(',');

    writer.write("string");
    assertThrows(NullPointerException.class, () -> writer.write((String) null));

    writer.write("string", 1, 2);
    assertThrows(NullPointerException.class, () -> writer.write((String) null, 1, 2));

    String actualOutput = stringBuilder.toString();
    assertThat(actualOutput).isEqualTo("a\u1234testnullcdul,a\u1234\u1234,charsha,stringtr");

    writer.flush();
    writer.close();

    // flush() and close() calls should have had no effect
    assertThat(stringBuilder.toString()).isEqualTo(actualOutput);
  }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Sensitive_Equality', 'Eager_Test']


Refactor#1
private StringBuilder stringBuilder;
  private Writer writer;

  private void setupTestWriterForAppendable() throws IOException {
    stringBuilder = new StringBuilder();
    writer = Streams.writerForAppendable(stringBuilder);
  }

  @Test
  public void testWriterForAppendable_AppendMethods() throws IOException {
    setupTestWriterForAppendable();

    writer.append('a');
    writer.append('\u1234');
    writer.append("test");
    writer.append(null); // test custom null handling mandated by `append`
    writer.append("abcdef", 2, 4);
    writer.append(null, 1, 3); // test custom null handling mandated by `append`
    writer.append(',');

    writer.write('a');
    writer.write('\u1234');
    // Should only consider the 16 low-order bits
    writer.write(0x4321_1234);
    writer.append(',');

    writer.write("chars".toCharArray());
    assertThrows(NullPointerException.class, () -> writer.write((char[]) null), "Expected NullPointerException when writing null char array");

    writer.write("chars".toCharArray(), 1, 2);
    assertThrows(NullPointerException.class, () -> writer.write((char[]) null, 1, 2), "Expected NullPointerException when writing null char array with offset and length");

    writer.append(',');

    String actualOutput = stringBuilder.toString();
    assertThat(actualOutput, equalTo("a\u1234testnullcdul,a\u1234\u1234,charsha,stringtr"), "Expected output from append and write methods");

    writer.flush();
    writer.close();

    // flush() and close() calls should have had no effect
    assertThat(stringBuilder.toString(), equalTo(actualOutput), "Expected output after flush and close");
  }

  @Test
  public void testWriterForAppendable_WriteStringMethods() throws IOException {
    setupTestWriterForAppendable();

    writer.write("string");
    assertThrows(NullPointerException.class, () -> writer.write((String) null), "Expected NullPointerException when writing null string");

    writer.write("string", 1, 2);
    assertThrows(NullPointerException.class, () -> writer.write((String) null, 1, 2), "Expected NullPointerException when writing null string with offset and length");

    String actualOutput = stringBuilder.toString();
    assertThat(actualOutput, equalTo("stringtr"), "Expected output from write string methods");

    writer.flush();
    writer.close();

    // flush() and close() calls should have had no effect
    assertThat(stringBuilder.toString(), equalTo(actualOutput), "Expected output after flush and close");
  }

Input#2

Refactor#2


Input#3

Refactor#3


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

