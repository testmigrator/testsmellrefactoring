Input Parameters:
Test Code:
 @Test
  public void testGetDelegateAdapter() {
    class DummyAdapter extends TypeAdapter<Number> {
      private final int number;

      DummyAdapter(int number) {
        this.number = number;
      }

      @Override
      public Number read(JsonReader in) throws IOException {
        throw new AssertionError("not needed for test");
      }

      @Override
      public void write(JsonWriter out, Number value) throws IOException {
        throw new AssertionError("not needed for test");
      }

      // Override toString() for better assertion error messages
      @Override
      public String toString() {
        return "adapter-" + number;
      }
    }

    class DummyFactory implements TypeAdapterFactory {
      private final DummyAdapter adapter;

      DummyFactory(DummyAdapter adapter) {
        this.adapter = adapter;
      }

      @SuppressWarnings("unchecked")
      @Override
      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
        return (TypeAdapter<T>) adapter;
      }

      // Override equals to verify that reference equality check is performed by Gson,
      // and this method is ignored
      @Override
      public boolean equals(Object obj) {
        return obj instanceof DummyFactory && ((DummyFactory) obj).adapter.equals(adapter);
      }

      @Override
      public int hashCode() {
        return adapter.hashCode();
      }
    }

    DummyAdapter adapter1 = new DummyAdapter(1);
    DummyFactory factory1 = new DummyFactory(adapter1);
    DummyAdapter adapter2 = new DummyAdapter(2);
    DummyFactory factory2 = new DummyFactory(adapter2);

    Gson gson =
        new GsonBuilder()
            // Note: This is 'last in, first out' order; Gson will first use factory2, then factory1
            .registerTypeAdapterFactory(factory1)
            .registerTypeAdapterFactory(factory2)
            .create();

    TypeToken<?> type = TypeToken.get(Number.class);

    assertThrows(NullPointerException.class, () -> gson.getDelegateAdapter(null, type));
    assertThrows(NullPointerException.class, () -> gson.getDelegateAdapter(factory1, null));

    // For unknown factory the first adapter for that type should be returned
    assertThat(gson.getDelegateAdapter(new DummyFactory(new DummyAdapter(0)), type))
        .isEqualTo(adapter2);

    assertThat(gson.getDelegateAdapter(factory2, type)).isEqualTo(adapter1);
    // Default Gson adapter should be returned
    assertThat(gson.getDelegateAdapter(factory1, type)).isNotInstanceOf(DummyAdapter.class);

    DummyFactory factory1Eq = new DummyFactory(adapter1);
    // Verify that test setup is correct
    assertThat(factory1.equals(factory1Eq)).isTrue();
    // Should only consider reference equality and ignore that custom `equals` method considers
    // factories to be equal, therefore returning `adapter2` which came from `factory2` instead
    // of skipping past `factory1`
    assertThat(gson.getDelegateAdapter(factory1Eq, type)).isEqualTo(adapter2);
  }
Context: /com/google/gson/Gson
Smell List: ['Assertion_Roulette', 'Eager_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
private DummyAdapter createDummyAdapter(int number) {
  return new DummyAdapter(number);
}

private DummyFactory createDummyFactory(DummyAdapter adapter) {
  return new DummyFactory(adapter);
}

private Gson createGsonWithFactories(DummyFactory... factories) {
  GsonBuilder builder = new GsonBuilder();
  for (DummyFactory factory : factories) {
    builder.registerTypeAdapterFactory(factory);
  }
  return builder.create();
}

@Test
public void testGetDelegateAdapter_NullContext() {
  TypeToken<?> type = TypeToken.get(Number.class);
  Gson gson = createGsonWithFactories();
  assertThrows(NullPointerException.class, () -> gson.getDelegateAdapter(null, type), "Context should not be null");
}

@Test
public void testGetDelegateAdapter_NullType() {
  DummyAdapter adapter1 = createDummyAdapter(1);
  DummyFactory factory1 = createDummyFactory(adapter1);
  Gson gson = createGsonWithFactories(factory1);
  assertThrows(NullPointerException.class, () -> gson.getDelegateAdapter(factory1, null), "Type should not be null");
}

@Test
public void testGetDelegateAdapter_UnknownFactory() {
  DummyAdapter adapter1 = createDummyAdapter(1);
  DummyFactory factory1 = createDummyFactory(adapter1);
  DummyAdapter adapter2 = createDummyAdapter(2);
  DummyFactory factory2 = createDummyFactory(adapter2);
  Gson gson = createGsonWithFactories(factory1, factory2);
  TypeToken<?> type = TypeToken.get(Number.class);
  assertThat(gson.getDelegateAdapter(new DummyFactory(createDummyAdapter(0)), type), "For unknown factory, the first adapter for that type should be returned").isEqualTo(adapter2);
}

@Test
public void testGetDelegateAdapter_SpecificFactory() {
  DummyAdapter adapter1 = createDummyAdapter(1);
  DummyFactory factory1 = createDummyFactory(adapter1);
  DummyAdapter adapter2 = createDummyAdapter(2);
  DummyFactory factory2 = createDummyFactory(adapter2);
  Gson gson = createGsonWithFactories(factory1, factory2);
  TypeToken<?> type = TypeToken.get(Number.class);
  assertThat(gson.getDelegateAdapter(factory2, type), "For specific factory, the expected adapter should be returned").isEqualTo(adapter1);
}

@Test
public void testGetDelegateAdapter_DefaultAdapter() {
  DummyAdapter adapter1 = createDummyAdapter(1);
  DummyFactory factory1 = createDummyFactory(adapter1);
  Gson gson = createGsonWithFactories(factory1);
  TypeToken<?> type = TypeToken.get(Number.class);
  assertThat(gson.getDelegateAdapter(factory1, type), "Default Gson adapter should be returned").isNotInstanceOf(DummyAdapter.class);
}

@Test
public void testGetDelegateAdapter_ReferenceEquality() {
  DummyAdapter adapter1 = createDummyAdapter(1);
  DummyFactory factory1 = createDummyFactory(adapter1);
  Gson gson = createGsonWithFactories(factory1);
  DummyFactory factory1Eq = createDummyFactory(adapter1);
  TypeToken<?> type = TypeToken.get(Number.class);
  assertThat(factory1.equals(factory1Eq), "Verify that test setup is correct").isTrue();
  assertThat(gson.getDelegateAdapter(factory1Eq, type), "Should only consider reference equality and ignore that custom `equals` method considers factories to be equal").isEqualTo(adapter1);
}


