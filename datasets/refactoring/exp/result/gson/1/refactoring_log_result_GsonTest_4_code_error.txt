Input Parameters:
Test Code:
 @Test
  public void testGetAdapter_FutureAdapterConcurrency() throws Exception {
    /**
     * Adapter which wraps another adapter. Can be imagined as a simplified version of the {@code
     * ReflectiveTypeAdapterFactory$Adapter}.
     */
    class WrappingAdapter<T> extends TypeAdapter<T> {
      final TypeAdapter<?> wrapped;
      boolean isFirstCall = true;

      WrappingAdapter(TypeAdapter<?> wrapped) {
        this.wrapped = wrapped;
      }

      @Override
      public void write(JsonWriter out, T value) throws IOException {
        // Due to how this test is set up there is infinite recursion, therefore
        // need to track how deeply nested this call is
        if (isFirstCall) {
          isFirstCall = false;
          out.beginArray();
          wrapped.write(out, null);
          out.endArray();
          isFirstCall = true;
        } else {
          out.value("wrapped-nested");
        }
      }

      @Override
      public T read(JsonReader in) throws IOException {
        throw new AssertionError("not needed for this test");
      }
    }

    final CountDownLatch isThreadWaiting = new CountDownLatch(1);
    final CountDownLatch canThreadProceed = new CountDownLatch(1);

    final Gson gson =
        new GsonBuilder()
            .registerTypeAdapterFactory(
                new TypeAdapterFactory() {
                  // volatile instead of AtomicBoolean is safe here because CountDownLatch prevents
                  // "true" concurrency
                  volatile boolean isFirstCaller = true;

                  @Override
                  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
                    Class<?> raw = type.getRawType();

                    if (raw == CustomClass1.class) {
                      // Retrieves a WrappingAdapter containing a nested FutureAdapter for
                      // CustomClass1
                      TypeAdapter<?> adapter = gson.getAdapter(CustomClass2.class);

                      // Let thread wait so the FutureAdapter for CustomClass1 nested in the adapter
                      // for CustomClass2 is not resolved yet
                      if (isFirstCaller) {
                        isFirstCaller = false;
                        isThreadWaiting.countDown();

                        try {
                          canThreadProceed.await();
                        } catch (InterruptedException e) {
                          throw new RuntimeException(e);
                        }
                      }

                      return new WrappingAdapter<>(adapter);
                    } else if (raw == CustomClass2.class) {
                      TypeAdapter<?> adapter = gson.getAdapter(CustomClass1.class);
                      assertThat(adapter).isInstanceOf(FutureTypeAdapter.class);
                      return new WrappingAdapter<>(adapter);
                    } else {
                      throw new AssertionError("Adapter for unexpected type requested: " + raw);
                    }
                  }
                })
            .create();

    final AtomicReference<TypeAdapter<?>> otherThreadAdapter = new AtomicReference<>();
    Thread thread =
        new Thread() {
          @Override
          public void run() {
            otherThreadAdapter.set(gson.getAdapter(CustomClass1.class));
          }
        };
    thread.start();

    // Wait until other thread has obtained FutureAdapter
    isThreadWaiting.await();
    TypeAdapter<?> adapter = gson.getAdapter(CustomClass1.class);
    // Should not fail due to referring to unresolved FutureTypeAdapter
    assertThat(adapter.toJson(null)).isEqualTo("[[\"wrapped-nested\"]]");

    // Let other thread proceed and have it resolve its FutureTypeAdapter
    canThreadProceed.countDown();
    thread.join();
    assertThat(otherThreadAdapter.get().toJson(null)).isEqualTo("[[\"wrapped-nested\"]]");
  }
Context: /com/google/gson/Gson
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing', 'Eager_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Exception_Catching_Throwing\n\nFeature:\nA test method that contains either a throw statement or a catch clause.\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Exception_Catching_Throwing\n  Description: Ensure tests use assertDoesNotThrow to verify no exceptions are thrown and remove any throws declaration in test methods.\n  Steps:\n    - Step:\n        Description: "Handle try-catch blocks containing \'fail\' calls"\n        Action: ReplaceTryCatchWithAssertThrows\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n              fail();\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            {exception} exception = assertThrows({exception}.class, () -> {\n              {tryBlock}\n            });\n            {catchBlock}\n    - Step:\n        Description: "Handle test methods with \'throws\' declaration but no try-catch block"\n        Action: WrapWithAssertDoesNotThrow\n        Parameters:\n          DetectionPattern: |\n            MethodDeclaration [throws!=null && BodyContainsTryCatch=false]\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {methodBody}\n            }, "Unexpected exception occurred during the test");\n\n    - Step:\n        Description: "Handle test methods with try-catch blocks without \'fail\' calls"\n        Action: ReplaceTryCatchWithoutFail\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {tryBlock}\n            });\n            {catchBlock}\n\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        try {\n            stmt\'\n            fail();\n        } catch (E) {\n            evs\n        }\n        stmt\'\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assertThrows(E.class, () -> {\n            stmt\'\n        });\n        evs\n        stmt\'\'\n      }\n  Variables:\n    exception: E\n    tryBlock: stmt\'\n    catchBlock: evs\n    tryBlockStatement: stmt\'i\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All exception handling has been refactored to use the JUnit 5 Exception Handling feature.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n']

Refactored Code: 
 
@Test
public void testGetAdapter_FutureAdapterConcurrency() {
    /**
     * Adapter which wraps another adapter. Can be imagined as a simplified version of the {@code
     * ReflectiveTypeAdapterFactory$Adapter}.
     */
    class WrappingAdapter<T> extends TypeAdapter<T> {
        final TypeAdapter<?> wrapped;
        boolean isFirstCall = true;

        WrappingAdapter(TypeAdapter<?> wrapped) {
            this.wrapped = wrapped;
        }

        @Override
        public void write(JsonWriter out, T value) throws IOException {
            // Due to how this test is set up there is infinite recursion, therefore
            // need to track how deeply nested this call is
            if (isFirstCall) {
                isFirstCall = false;
                out.beginArray();
                wrapped.write(out, null);
                out.endArray();
                isFirstCall = true;
            } else {
                out.value("wrapped-nested");
            }
        }

        @Override
        public T read(JsonReader in) throws IOException {
            throw new AssertionError("not needed for this test");
        }
    }

    final CountDownLatch isThreadWaiting = new CountDownLatch(1);
    final CountDownLatch canThreadProceed = new CountDownLatch(1);

    final Gson gson = setupGson(isThreadWaiting, canThreadProceed);

    final AtomicReference<TypeAdapter<?>> otherThreadAdapter = new AtomicReference<>();
    Thread thread = new Thread(() -> otherThreadAdapter.set(gson.getAdapter(CustomClass1.class)));
    thread.start();

    // Wait until other thread has obtained FutureAdapter
    awaitLatch(isThreadWaiting, "Main thread waiting for other thread to obtain FutureAdapter");
    TypeAdapter<?> adapter = gson.getAdapter(CustomClass1.class);
    // Should not fail due to referring to unresolved FutureTypeAdapter
    assertToJsonEquals(adapter, "[[\"wrapped-nested\"]]", "Main thread toJson check");

    // Let other thread proceed and have it resolve its FutureTypeAdapter
    countDownLatch(canThreadProceed, "Allowing other thread to proceed");
    joinThread(thread, "Joining other thread");

    assertToJsonEquals(otherThreadAdapter.get(), "[[\"wrapped-nested\"]]", "Other thread toJson check");
}

private Gson setupGson(CountDownLatch isThreadWaiting, CountDownLatch canThreadProceed) {
    return new GsonBuilder()
            .registerTypeAdapterFactory(new TypeAdapterFactory() {
                volatile boolean isFirstCaller = true;

                @Override
                public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
                    Class<?> raw = type.getRawType();

                    if (raw == CustomClass1.class) {
                        TypeAdapter<?> adapter = gson.getAdapter(CustomClass2.class);

                        if (isFirstCaller) {
                            isFirstCaller = false;
                            isThreadWaiting.countDown();

                            try {
                                canThreadProceed.await();
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                        }

                        return new WrappingAdapter<>(adapter);
                    } else if (raw == CustomClass2.class) {
                        TypeAdapter<?> adapter = gson.getAdapter(CustomClass1.class);
                        assertThat(adapter).isInstanceOf(FutureTypeAdapter.class);
                        return new WrappingAdapter<>(adapter);
                    } else {
                        throw new AssertionError("Adapter for unexpected type requested: " + raw);
                    }
                }
            })
            .create();
}

private void awaitLatch(CountDownLatch latch, String message) {
    try {
        latch.await();
    } catch (InterruptedException e) {
        throw new RuntimeException(message, e);
    }
}

private void countDownLatch(CountDownLatch latch, String message) {
    latch.countDown();
}

private void joinThread(Thread thread, String message) {
    try {
        thread.join();
    } catch (InterruptedException e) {
        throw new RuntimeException(message, e);
    }
}

private void assertToJsonEquals(TypeAdapter<?> adapter, String expected, String message) {
    assertThat(adapter.toJson(null), message).isEqualTo(expected);
}


