File#1


Input#1
  @Test
  public void testNulls() {
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Boolean) null));
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Number) null));
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((String) null));
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Character) null));
  }
Smell List: ['Assertion_Roulette']

Refactor#1
@Test
public void testNulls() {
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Boolean) null), "Expected NullPointerException when creating JsonPrimitive with null Boolean");
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Number) null), "Expected NullPointerException when creating JsonPrimitive with null Number");
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((String) null), "Expected NullPointerException when creating JsonPrimitive with null String");
    assertThrows(NullPointerException.class, () -> new JsonPrimitive((Character) null), "Expected NullPointerException when creating JsonPrimitive with null Character");
}

Input#2
 @Test
  public void testBoolean() {
    JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);

    assertThat(json.isBoolean()).isTrue();
    assertThat(json.getAsBoolean()).isTrue();

    // Extra support for booleans
    json = new JsonPrimitive(1);
    assertThat(json.getAsBoolean()).isFalse();

    json = new JsonPrimitive("1");
    assertThat(json.getAsBoolean()).isFalse();

    json = new JsonPrimitive("true");
    assertThat(json.getAsBoolean()).isTrue();

    json = new JsonPrimitive("TrUe");
    assertThat(json.getAsBoolean()).isTrue();

    json = new JsonPrimitive("1.3");
    assertThat(json.getAsBoolean()).isFalse();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Duplicate_Assert']


Refactor#2
@Test
public void testBoolean_isBoolean() {
    JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);
    assertThat(json.isBoolean()).isTrue("Expected isBoolean to return true for TRUE");
}

@Test
public void testBoolean_getAsBoolean_True() {
    JsonPrimitive json = new JsonPrimitive(Boolean.TRUE);
    assertThat(json.getAsBoolean()).isTrue("Expected getAsBoolean to return true for TRUE");
}

@Test
public void testBoolean_getAsBoolean_FalseForInteger() {
    JsonPrimitive json = new JsonPrimitive(1);
    assertThat(json.getAsBoolean()).isFalse("Expected getAsBoolean to return false for integer 1");
}

@Test
public void testBoolean_getAsBoolean_FalseForStringOne() {
    JsonPrimitive json = new JsonPrimitive("1");
    assertThat(json.getAsBoolean()).isFalse("Expected getAsBoolean to return false for string '1'");
}

@Test
public void testBoolean_getAsBoolean_TrueForStringTrue() {
    JsonPrimitive json = new JsonPrimitive("true");
    assertThat(json.getAsBoolean()).isTrue("Expected getAsBoolean to return true for string 'true'");
}

@Test
public void testBoolean_getAsBoolean_TrueForStringTrUe() {
    JsonPrimitive json = new JsonPrimitive("TrUe");
    assertThat(json.getAsBoolean()).isTrue("Expected getAsBoolean to return true for string 'TrUe'");
}

@Test
public void testBoolean_getAsBoolean_FalseForStringDecimal() {
    JsonPrimitive json = new JsonPrimitive("1.3");
    assertThat(json.getAsBoolean()).isFalse("Expected getAsBoolean to return false for string '1.3'");
}

Input#3
 @Test
  public void testParsingStringAsBoolean() {
    JsonPrimitive json = new JsonPrimitive("true");

    assertThat(json.isBoolean()).isFalse();
    assertThat(json.getAsBoolean()).isTrue();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#3
private JsonPrimitive setupTestParsingStringAsBoolean() {
    return new JsonPrimitive("true");
}

@Test
public void testParsingStringAsBoolean_isBoolean() {
    JsonPrimitive json = setupTestParsingStringAsBoolean();
    assertThat(json.isBoolean()).isFalse("The isBoolean method should return false for string values.");
}

@Test
public void testParsingStringAsBoolean_getAsBoolean() {
    JsonPrimitive json = setupTestParsingStringAsBoolean();
    assertThat(json.getAsBoolean()).isTrue("The getAsBoolean method should return true for the string 'true'.");
}

Input#4
 @Test
  public void testParsingStringAsNumber() {
    JsonPrimitive json = new JsonPrimitive("1");

    assertThat(json.isNumber()).isFalse();
    assertThat(json.getAsDouble()).isEqualTo(1.0);
    assertThat(json.getAsFloat()).isEqualTo(1F);
    assertThat(json.getAsInt()).isEqualTo(1);
    assertThat(json.getAsLong()).isEqualTo(1L);
    assertThat(json.getAsShort()).isEqualTo((short) 1);
    assertThat(json.getAsByte()).isEqualTo((byte) 1);
    assertThat(json.getAsBigInteger()).isEqualTo(new BigInteger("1"));
    assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal("1"));
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#4

private JsonPrimitive setupTestParsingStringAsNumber() {
    return new JsonPrimitive("1");
}

@Test
public void testParsingStringAsNumber_isNumber() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.isNumber()).isFalse();
}

@Test
public void testParsingStringAsNumber_getAsDouble() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsDouble()).isEqualTo(1.0, "Check if getAsDouble returns 1.0");
}

@Test
public void testParsingStringAsNumber_getAsFloat() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsFloat()).isEqualTo(1F, "Check if getAsFloat returns 1F");
}

@Test
public void testParsingStringAsNumber_getAsInt() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsInt()).isEqualTo(1, "Check if getAsInt returns 1");
}

@Test
public void testParsingStringAsNumber_getAsLong() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsLong()).isEqualTo(1L, "Check if getAsLong returns 1L");
}

@Test
public void testParsingStringAsNumber_getAsShort() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsShort()).isEqualTo((short) 1, "Check if getAsShort returns (short) 1");
}

@Test
public void testParsingStringAsNumber_getAsByte() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsByte()).isEqualTo((byte) 1, "Check if getAsByte returns (byte) 1");
}

@Test
public void testParsingStringAsNumber_getAsBigInteger() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsBigInteger()).isEqualTo(new BigInteger("1"), "Check if getAsBigInteger returns new BigInteger(\"1\")");
}

@Test
public void testParsingStringAsNumber_getAsBigDecimal() {
    JsonPrimitive json = setupTestParsingStringAsNumber();
    assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal("1"), "Check if getAsBigDecimal returns new BigDecimal(\"1\")");
}


Input#5
 @Test
  public void testAsNumber_Boolean() {
    JsonPrimitive json = new JsonPrimitive(true);
    var e = assertThrows(UnsupportedOperationException.class, () -> json.getAsNumber());
    assertThat(e).hasMessageThat().isEqualTo("Primitive is neither a number nor a string");
  }
Smell List: ['Assertion_Roulette']

Refactor#5
@Test
public void testAsNumber_Boolean() {
    JsonPrimitive json = new JsonPrimitive(true);
    var e = assertThrows(UnsupportedOperationException.class, () -> json.getAsNumber(), "Expected UnsupportedOperationException when calling getAsNumber on a boolean JsonPrimitive");
    assertThat(e).hasMessageThat().isEqualTo("Primitive is neither a number nor a string");
}


Input#6

Refactor#6


Input#7
 @Test
  public void testExponential() {
    JsonPrimitive json = new JsonPrimitive("1E+7");

    assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal("1E+7"));
    assertThat(json.getAsDouble()).isEqualTo(1E+7);

    // Integers can not handle exponents like this
    assertThrows(NumberFormatException.class, () -> json.getAsInt());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#7

private JsonPrimitive setupTestExponential() {
    return new JsonPrimitive("1E+7");
}

@Test
public void testExponential_BigDecimal() {
    JsonPrimitive json = setupTestExponential();
    assertThat(json.getAsBigDecimal()).isEqualTo(new BigDecimal("1E+7"), "BigDecimal conversion should match expected value");
}

@Test
public void testExponential_Double() {
    JsonPrimitive json = setupTestExponential();
    assertThat(json.getAsDouble()).isEqualTo(1E+7, "Double conversion should match expected value");
}

@Test
public void testExponential_IntThrowsException() {
    JsonPrimitive json = setupTestExponential();
    assertThrows(NumberFormatException.class, () -> json.getAsInt(), "Integer conversion should throw NumberFormatException");
}




Input#8
 @Test
  public void testByteEqualsShort() {
    JsonPrimitive p1 = new JsonPrimitive((byte) 10);
    JsonPrimitive p2 = new JsonPrimitive((short) 10);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#8
private void setupTestByteEqualsShort() {
    p1 = new JsonPrimitive((byte) 10);
    p2 = new JsonPrimitive((short) 10);
}

@Test
public void testByteEqualsShort_Equality() {
    setupTestByteEqualsShort();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testByteEqualsShort_HashCode() {
    setupTestByteEqualsShort();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}



Input#9
 @Test
  public void testByteEqualsInteger() {
    JsonPrimitive p1 = new JsonPrimitive((byte) 10);
    JsonPrimitive p2 = new JsonPrimitive(10);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#9
JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestByteEqualsInteger() {
    p1 = new JsonPrimitive((byte) 10);
    p2 = new JsonPrimitive(10);
}

@Test
public void testByteEqualsInteger_Equality() {
    setupTestByteEqualsInteger();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testByteEqualsInteger_HashCode() {
    setupTestByteEqualsInteger();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}


Input#10
 @Test
  public void testByteEqualsLong() {
    JsonPrimitive p1 = new JsonPrimitive((byte) 10);
    JsonPrimitive p2 = new JsonPrimitive(10L);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']


Refactor#10

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestByteEqualsLong() {
    p1 = new JsonPrimitive((byte) 10);
    p2 = new JsonPrimitive(10L);
}

@Test
public void testByteEqualsLong_Equality() {
    setupTestByteEqualsLong();
    assertThat(p1).isEqualTo(p2, "p1 should be equal to p2");
}

@Test
public void testByteEqualsLong_HashCode() {
    setupTestByteEqualsLong();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of p1 and p2 should be equal");
}


Input#11
@Test
  public void testByteEqualsBigInteger() {
    JsonPrimitive p1 = new JsonPrimitive((byte) 10);
    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#11

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestByteEqualsBigInteger() {
    p1 = new JsonPrimitive((byte) 10);
    p2 = new JsonPrimitive(new BigInteger("10"));
}

@Test
public void testByteEqualsBigInteger_Equality() {
    setupTestByteEqualsBigInteger();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testByteEqualsBigInteger_HashCode() {
    setupTestByteEqualsBigInteger();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}

Input#12
 @Test
  public void testShortEqualsInteger() {
    JsonPrimitive p1 = new JsonPrimitive((short) 10);
    JsonPrimitive p2 = new JsonPrimitive(10);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#12
JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestShortEqualsInteger() {
    p1 = new JsonPrimitive((short) 10);
    p2 = new JsonPrimitive(10);
}

@Test
public void testShortEqualsInteger_Equality() {
    setupTestShortEqualsInteger();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal when containing the same numeric value");
}

@Test
public void testShortEqualsInteger_HashCode() {
    setupTestShortEqualsInteger();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal when containing the same numeric value");
}


Input#13
@Test
  public void testShortEqualsLong() {
    JsonPrimitive p1 = new JsonPrimitive((short) 10);
    JsonPrimitive p2 = new JsonPrimitive(10L);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#13

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestShortEqualsLong() {
    p1 = new JsonPrimitive((short) 10);
    p2 = new JsonPrimitive(10L);
}

@Test
public void testShortEqualsLong_Equality() {
    setupTestShortEqualsLong();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal when values are the same");
}

@Test
public void testShortEqualsLong_HashCode() {
    setupTestShortEqualsLong();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal when values are the same");
}


Input#14
 @Test
  public void testShortEqualsBigInteger() {
    JsonPrimitive p1 = new JsonPrimitive((short) 10);
    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#14

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestShortEqualsBigInteger() {
    p1 = new JsonPrimitive((short) 10);
    p2 = new JsonPrimitive(new BigInteger("10"));
}

@Test
public void testShortEqualsBigInteger_Equality() {
    setupTestShortEqualsBigInteger();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testShortEqualsBigInteger_HashCode() {
    setupTestShortEqualsBigInteger();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}



Input#15
@Test
  public void testIntegerEqualsLong() {
    JsonPrimitive p1 = new JsonPrimitive(10);
    JsonPrimitive p2 = new JsonPrimitive(10L);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#15

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestIntegerEqualsLong() {
    p1 = new JsonPrimitive(10);
    p2 = new JsonPrimitive(10L);
}

@Test
public void testIntegerEqualsLong_Equality() {
    setupTestIntegerEqualsLong();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives with integer and long values should be equal");
}

@Test
public void testIntegerEqualsLong_HashCode() {
    setupTestIntegerEqualsLong();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives with integer and long values should be equal");
}




Input#16
@Test
  public void testIntegerEqualsBigInteger() {
    JsonPrimitive p1 = new JsonPrimitive(10);
    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']


Refactor#16

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestIntegerEqualsBigInteger() {
    p1 = new JsonPrimitive(10);
    p2 = new JsonPrimitive(new BigInteger("10"));
}

@Test
public void testIntegerEqualsBigInteger_Equality() {
    setupTestIntegerEqualsBigInteger();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal when values are the same");
}

@Test
public void testIntegerEqualsBigInteger_HashCode() {
    setupTestIntegerEqualsBigInteger();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes should be equal when values are the same");
}




Input#17
@Test
  public void testLongEqualsBigInteger() {
    JsonPrimitive p1 = new JsonPrimitive(10L);
    JsonPrimitive p2 = new JsonPrimitive(new BigInteger("10"));
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']


Refactor#17
JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestLongEqualsBigInteger() {
    p1 = new JsonPrimitive(10L);
    p2 = new JsonPrimitive(new BigInteger("10"));
}

@Test
public void testLongEqualsBigInteger_Equality() {
    setupTestLongEqualsBigInteger();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testLongEqualsBigInteger_HashCode() {
    setupTestLongEqualsBigInteger();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}



Input#18
 @Test
  public void testFloatEqualsDouble() {
    JsonPrimitive p1 = new JsonPrimitive(10.25F);
    JsonPrimitive p2 = new JsonPrimitive(10.25D);
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']


Refactor#18

JsonPrimitive p1;
JsonPrimitive p2;

private void setupTestFloatEqualsDouble() {
    p1 = new JsonPrimitive(10.25F);
    p2 = new JsonPrimitive(10.25D);
}

@Test
public void testFloatEqualsDouble_Equality() {
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testFloatEqualsDouble_HashCode() {
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}



Input#19
 @Test
  public void testFloatEqualsBigDecimal() {
    JsonPrimitive p1 = new JsonPrimitive(10.25F);
    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25"));
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#19

JsonPrimitive p1;
JsonPrimitive p2;

private JsonPrimitive setupTestFloatEqualsBigDecimal() {
    p1 = new JsonPrimitive(10.25F);
    p2 = new JsonPrimitive(new BigDecimal("10.25"));
}

@Test
public void testFloatEqualsBigDecimal_Equality() {
    setupTestFloatEqualsBigDecimal();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testFloatEqualsBigDecimal_HashCode() {
    setupTestFloatEqualsBigDecimal();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}



Input#20
@Test
  public void testDoubleEqualsBigDecimal() {
    JsonPrimitive p1 = new JsonPrimitive(10.25D);
    JsonPrimitive p2 = new JsonPrimitive(new BigDecimal("10.25"));
    assertThat(p1).isEqualTo(p2);
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode());
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#20

JsonPrimitive p1;
JsonPrimitive p2;

private JsonPrimitive setupTestDoubleEqualsBigDecimal() {
    p1 = new JsonPrimitive(10.25D);
    p2 = new JsonPrimitive(new BigDecimal("10.25"));
}

@Test
public void testDoubleEqualsBigDecimal_Equality() {
    setupTestDoubleEqualsBigDecimal();
    assertThat(p1).isEqualTo(p2, "JsonPrimitives should be equal");
}

@Test
public void testDoubleEqualsBigDecimal_HashCode() {
    setupTestDoubleEqualsBigDecimal();
    assertThat(p1.hashCode()).isEqualTo(p2.hashCode(), "Hash codes of JsonPrimitives should be equal");
}



Input#21

Refactor#21


Input#22
@Test
  public void testEquals() {
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("A"), new JsonPrimitive("A"));
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true), new JsonPrimitive(true));
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L), new JsonPrimitive(5L));
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'), new JsonPrimitive('a'));
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN), new JsonPrimitive(Float.NaN));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Float.NEGATIVE_INFINITY), new JsonPrimitive(Float.NEGATIVE_INFINITY));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Float.POSITIVE_INFINITY), new JsonPrimitive(Float.POSITIVE_INFINITY));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Double.NEGATIVE_INFINITY), new JsonPrimitive(Double.NEGATIVE_INFINITY));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Double.POSITIVE_INFINITY), new JsonPrimitive(Double.POSITIVE_INFINITY));
    assertThat(new JsonPrimitive("a").equals(new JsonPrimitive("b"))).isFalse();
    assertThat(new JsonPrimitive(true).equals(new JsonPrimitive(false))).isFalse();
    assertThat(new JsonPrimitive(0).equals(new JsonPrimitive(1))).isFalse();
  }
Smell List: ['Assertion_Roulette', 'Redundant_Assertion', 'Eager_Test']

Refactor#22
@Test
public void testEqualsAndHashCodeForString() {
    JsonPrimitive json1 = new JsonPrimitive("A");
    JsonPrimitive json2 = new JsonPrimitive("A");
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "String primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForBoolean() {
    JsonPrimitive json1 = new JsonPrimitive(true);
    JsonPrimitive json2 = new JsonPrimitive(true);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Boolean primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForLong() {
    JsonPrimitive json1 = new JsonPrimitive(5L);
    JsonPrimitive json2 = new JsonPrimitive(5L);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Long primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForCharacter() {
    JsonPrimitive json1 = new JsonPrimitive('a');
    JsonPrimitive json2 = new JsonPrimitive('a');
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Character primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForFloatNaN() {
    JsonPrimitive json1 = new JsonPrimitive(Float.NaN);
    JsonPrimitive json2 = new JsonPrimitive(Float.NaN);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Float NaN primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForFloatNegativeInfinity() {
    JsonPrimitive json1 = new JsonPrimitive(Float.NEGATIVE_INFINITY);
    JsonPrimitive json2 = new JsonPrimitive(Float.NEGATIVE_INFINITY);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Float negative infinity primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForFloatPositiveInfinity() {
    JsonPrimitive json1 = new JsonPrimitive(Float.POSITIVE_INFINITY);
    JsonPrimitive json2 = new JsonPrimitive(Float.POSITIVE_INFINITY);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Float positive infinity primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForDoubleNaN() {
    JsonPrimitive json1 = new JsonPrimitive(Double.NaN);
    JsonPrimitive json2 = new JsonPrimitive(Double.NaN);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Double NaN primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForDoubleNegativeInfinity() {
    JsonPrimitive json1 = new JsonPrimitive(Double.NEGATIVE_INFINITY);
    JsonPrimitive json2 = new JsonPrimitive(Double.NEGATIVE_INFINITY);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Double negative infinity primitives should be equal and have the same hash code");
}

@Test
public void testEqualsAndHashCodeForDoublePositiveInfinity() {
    JsonPrimitive json1 = new JsonPrimitive(Double.POSITIVE_INFINITY);
    JsonPrimitive json2 = new JsonPrimitive(Double.POSITIVE_INFINITY);
    MoreAsserts.assertEqualsAndHashCode(json1, json2, "Double positive infinity primitives should be equal and have the same hash code");
}

@Test
public void testNotEqualsForDifferentStrings() {
    JsonPrimitive json1 = new JsonPrimitive("a");
    JsonPrimitive json2 = new JsonPrimitive("b");
    assertThat(json1.equals(json2)).as("Different string primitives should not be equal").isFalse();
}

@Test
public void testNotEqualsForDifferentBooleans() {
    JsonPrimitive json1 = new JsonPrimitive(true);
    JsonPrimitive json2 = new JsonPrimitive(false);
    assertThat(json1.equals(json2)).as("Different boolean primitives should not be equal").isFalse();
}

@Test
public void testNotEqualsForDifferentNumbers() {
    JsonPrimitive json1 = new JsonPrimitive(0);
    JsonPrimitive json2 = new JsonPrimitive(1);
    assertThat(json1.equals(json2)).as("Different number primitives should not be equal").isFalse();
}



Input#23
@Test
  public void testEqualsAcrossTypes() {
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive("a"), new JsonPrimitive('a'));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(new BigInteger("0")), new JsonPrimitive(0));
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0), new JsonPrimitive(0L));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(new BigDecimal("0")), new JsonPrimitive(0));
    MoreAsserts.assertEqualsAndHashCode(
        new JsonPrimitive(Float.NaN), new JsonPrimitive(Double.NaN));
  }
Smell List: ['Assertion_Roulette', 'Magic_Number_Test']

Refactor#23

@Test
public void testEqualsAcrossTypes() {
    String stringA = "a";
    char charA = 'a';
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(stringA), new JsonPrimitive(charA), "String and char primitives should be equal");

    BigInteger bigIntegerZero = new BigInteger("0");
    int intZero = 0;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(bigIntegerZero), new JsonPrimitive(intZero), "BigInteger and int primitives should be equal");

    int intZeroB = 0;
    long longZero = 0L;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(intZeroB), new JsonPrimitive(longZero), "int and long primitives should be equal");

    BigDecimal bigDecimalZero = new BigDecimal("0");
    int intZeroC = 0;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(bigDecimalZero), new JsonPrimitive(intZeroC), "BigDecimal and int primitives should be equal");

    float floatNaN = Float.NaN;
    double doubleNaN = Double.NaN;
    MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(floatNaN), new JsonPrimitive(doubleNaN), "Float NaN and Double NaN should be equal");
}



Input#24
@Test
  public void testEqualsDoesNotEquateStringAndNonStringTypes() {
    assertThat(new JsonPrimitive("true").equals(new JsonPrimitive(true))).isFalse();
    assertThat(new JsonPrimitive("0").equals(new JsonPrimitive(0))).isFalse();
    assertThat(new JsonPrimitive("NaN").equals(new JsonPrimitive(Float.NaN))).isFalse();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#24

private JsonPrimitive stringTrue = new JsonPrimitive("true");
private JsonPrimitive booleanTrue = new JsonPrimitive(true);
private JsonPrimitive stringZero = new JsonPrimitive("0");
private JsonPrimitive intZero = new JsonPrimitive(0);
private JsonPrimitive stringNaN = new JsonPrimitive("NaN");
private JsonPrimitive floatNaN = new JsonPrimitive(Float.NaN);

@Test
public void testEqualsDoesNotEquateStringAndBoolean() {
    assertThat(stringTrue.equals(booleanTrue)).isFalse("String 'true' should not equal boolean true");
}

@Test
public void testEqualsDoesNotEquateStringAndInteger() {
    assertThat(stringZero.equals(intZero)).isFalse("String '0' should not equal integer 0");
}

@Test
public void testEqualsDoesNotEquateStringAndFloatNaN() {
    assertThat(stringNaN.equals(floatNaN)).isFalse("String 'NaN' should not equal float NaN");
}

Input#25
@Test
  public void testBigDecimalEquals() {
    JsonPrimitive small = new JsonPrimitive(1.0);
    JsonPrimitive large = new JsonPrimitive(2.0);
    assertThat(small.equals(large)).isFalse();

    BigDecimal doubleMax = BigDecimal.valueOf(Double.MAX_VALUE);
    JsonPrimitive smallDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal("100.0")));
    JsonPrimitive largeDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal("200.0")));
    assertThat(smallDecimal.equals(largeDecimal)).isFalse();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']


Refactor#25

JsonPrimitive small;
JsonPrimitive large;
JsonPrimitive smallDecimal;
JsonPrimitive largeDecimal;

private void setupTestBigDecimalEquals() {
    small = new JsonPrimitive(1.0);
    large = new JsonPrimitive(2.0);

    BigDecimal doubleMax = BigDecimal.valueOf(Double.MAX_VALUE);
    smallDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal("100.0")));
    largeDecimal = new JsonPrimitive(doubleMax.add(new BigDecimal("200.0")));
}

@Test
public void testBigDecimalEquals_SmallVsLarge() {
    setupTestBigDecimalEquals();
    assertThat(small.equals(large), "Small and large JsonPrimitives should not be equal").isFalse();
}

@Test
public void testBigDecimalEquals_SmallDecimalVsLargeDecimal() {
    setupTestBigDecimalEquals();
    assertThat(smallDecimal.equals(largeDecimal), "SmallDecimal and LargeDecimal JsonPrimitives should not be equal").isFalse();
}

Input#26
@Test
  public void testBigDecimalEqualsZero() {
    assertThat(
            new JsonPrimitive(new BigDecimal("0.0"))
                .equals(new JsonPrimitive(new BigDecimal("0.00"))))
        .isTrue();

    assertThat(
            new JsonPrimitive(new BigDecimal("0.00"))
                .equals(new JsonPrimitive(Double.valueOf("0.00"))))
        .isTrue();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#26

@Test
public void testBigDecimalEqualsZero_BigDecimalComparison() {
    assertThat(
            new JsonPrimitive(new BigDecimal("0.0"))
                .equals(new JsonPrimitive(new BigDecimal("0.00"))),
            "JsonPrimitive with BigDecimal '0.0' should equal JsonPrimitive with BigDecimal '0.00'");
}

@Test
public void testBigDecimalEqualsZero_DoubleComparison() {
    assertThat(
            new JsonPrimitive(new BigDecimal("0.00"))
                .equals(new JsonPrimitive(Double.valueOf("0.00"))),
            "JsonPrimitive with BigDecimal '0.00' should equal JsonPrimitive with Double '0.00'");
}

Input#27
 @Test
  public void testBigDecimalEqualsTransitive() {
    JsonPrimitive x = new JsonPrimitive(new BigDecimal("0"));
    JsonPrimitive y = new JsonPrimitive(0.0d);
    JsonPrimitive z = new JsonPrimitive(new BigDecimal("0.00"));

    assertThat(x.equals(y)).isTrue();
    assertThat(y.equals(z)).isTrue();
    // ... implies
    assertThat(x.equals(z)).isTrue();
  }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#27

JsonPrimitive x;
JsonPrimitive y;
JsonPrimitive z;

private void setupTestBigDecimalEqualsTransitive() {
    x = new JsonPrimitive(new BigDecimal("0"));
    y = new JsonPrimitive(0.0d);
    z = new JsonPrimitive(new BigDecimal("0.00"));
}

@Test
public void testBigDecimalEqualsTransitive_X_Equals_Y() {
    setupTestBigDecimalEqualsTransitive();
    assertThat(x.equals(y), "x should be equal to y").isTrue();
}

@Test
public void testBigDecimalEqualsTransitive_Y_Equals_Z() {
    setupTestBigDecimalEqualsTransitive();
    assertThat(y.equals(z), "y should be equal to z").isTrue();
}

@Test
public void testBigDecimalEqualsTransitive_X_Equals_Z() {
    setupTestBigDecimalEqualsTransitive();
    assertThat(x.equals(z), "x should be equal to z").isTrue();
}




Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

