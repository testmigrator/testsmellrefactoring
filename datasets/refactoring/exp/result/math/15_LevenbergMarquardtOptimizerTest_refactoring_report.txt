File#1


Input#1
 @Test
    public void testNonInvertible() {
        try{
            /*
             * Overrides the method from parent class, since the default singularity
             * threshold (1e-14) does not trigger the expected exception.
             */
            LinearProblem problem = new LinearProblem(new double[][] {
                    {  1, 2, -3 },
                    {  2, 1,  3 },
                    { -3, 0, -9 }
            }, new double[] { 1, 1, 1 });

            final Optimum optimum = optimizer.optimize(
                    problem.getBuilder().maxIterations(20).build());

            //TODO check that it is a bad fit? Why the extra conditions?
            Assert.assertTrue(JdkMath.sqrt(problem.getTarget().length) * optimum.getRMS() > 0.6);

            optimum.getCovariances(1.5e-14);

            fail(optimizer);
        }catch (SingularMatrixException e){
            //expected
        }
    }
Smell List: ['Assertion_Roulette', 'Exception_Catching_Throwing']
Refactor#1
@Test
public void testNonInvertible() {
    LinearProblem problem = new LinearProblem(new double[][] {
            {  1, 2, -3 },
            {  2, 1,  3 },
            { -3, 0, -9 }
    }, new double[] { 1, 1, 1 });

    SingularMatrixException exception = assertThrows(SingularMatrixException.class, () -> {
        final Optimum optimum = optimizer.optimize(
                problem.getBuilder().maxIterations(20).build());

        // Check that it is a bad fit
        assertTrue("The RMS value should indicate a bad fit",
                   JdkMath.sqrt(problem.getTarget().length) * optimum.getRMS() > 0.6);

        optimum.getCovariances(1.5e-14);
    });
}

Input#2

Refactor#2


Input#3
@Test
    public void testParameterValidator() {
        // Setup.
        final double xCenter = 123.456;
        final double yCenter = 654.321;
        final double xSigma = 10;
        final double ySigma = 15;
        final double radius = 111.111;
        final RandomCirclePointGenerator factory
            = new RandomCirclePointGenerator(xCenter, yCenter, radius,
                                             xSigma, ySigma);
        final CircleProblem circle = new CircleProblem(xSigma, ySigma);

        final int numPoints = 10;
        factory.samples(numPoints).forEach(circle::addPoint);

        // First guess for the center's coordinates and radius.
        final double[] init = { 118, 659, 115 };

        final Optimum optimum = optimizer.optimize(
                builder(circle).maxIterations(50).start(init).build());

        final int numEval = optimum.getEvaluations();
        Assert.assertTrue(numEval > 1);

        // Build a new problem with a validator that amounts to cheating.

        // Note we cannot return a fixed point.
        // The optimiser relies on computing a predicted reduction in the cost
        // function (preRed) and an actual reduction (actRed). The ratio between them must be
        // non-zero to indicate the step reduced the cost function. If a threshold is not
        // achieved then the step is rejected and the optimiser can cycle through many iterations
        // not moving anywhere until alternative thresholds reduce to a level that terminate
        // the cycle.
        // Here we take the current point and move it towards an acceptable answer
        // given the problem (the previous optimum). This should speed up the optimiser.
        // This can still fail to reduce the iterations when the adjusted step moves
        // to a sub-optimal position in the cost function.
        final ParameterValidator cheatValidator
            = new ParameterValidator() {
                    @Override
                    public RealVector validate(RealVector params) {
                        // Cheat: Move towards the optimum found previously.
                        final RealVector direction = optimum.getPoint().subtract(params);
                        return params.add(direction.mapMultiply(0.75));
                    }
                };

        final Optimum cheatOptimum
            = optimizer.optimize(builder(circle).maxIterations(50).start(init).parameterValidator(cheatValidator).build());
        final int cheatNumEval = cheatOptimum.getEvaluations();
        Assert.assertTrue("n=" + numEval + " nc=" + cheatNumEval, cheatNumEval < numEval);
        // System.out.println("n=" + numEval + " nc=" + cheatNumEval);
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#3

private void setupTestParameterValidator() {
    final double xCenter = 123.456;
    final double yCenter = 654.321;
    final double xSigma = 10;
    final double ySigma = 15;
    final double radius = 111.111;
    final RandomCirclePointGenerator factory
        = new RandomCirclePointGenerator(xCenter, yCenter, radius, xSigma, ySigma);
    final CircleProblem circle = new CircleProblem(xSigma, ySigma);

    final int numPoints = 10;
    factory.samples(numPoints).forEach(circle::addPoint);

    // First guess for the center's coordinates and radius.
    final double[] init = { 118, 659, 115 };

    this.circle = circle;
    this.init = init;
}

@Test
public void testParameterValidator_Optimization() {
    setupTestParameterValidator();

    final Optimum optimum = optimizer.optimize(
            builder(circle).maxIterations(50).start(init).build());

    final int numEval = optimum.getEvaluations();
    Assert.assertTrue("Number of evaluations should be greater than 1", numEval > 1);
}

@Test
public void testParameterValidator_CheatOptimization() {
    setupTestParameterValidator();

    final Optimum optimum = optimizer.optimize(
            builder(circle).maxIterations(50).start(init).build());

    final int numEval = optimum.getEvaluations();

    // Build a new problem with a validator that amounts to cheating.
    final ParameterValidator cheatValidator
        = new ParameterValidator() {
                @Override
                public RealVector validate(RealVector params) {
                    final RealVector direction = optimum.getPoint().subtract(params);
                    return params.add(direction.mapMultiply(0.75));
                }
            };

    final Optimum cheatOptimum
        = optimizer.optimize(builder(circle).maxIterations(50).start(init).parameterValidator(cheatValidator).build());
    final int cheatNumEval = cheatOptimum.getEvaluations();
    Assert.assertTrue("Cheat optimization should have fewer evaluations: n=" + numEval + " nc=" + cheatNumEval, cheatNumEval < numEval);
}



Input#4
@Test
    public void testEvaluationCount() {
        //setup
        LeastSquaresProblem lsp = new LinearProblem(new double[][] {{1}}, new double[] {1})
                .getBuilder()
                .checker(new ConvergenceChecker<Evaluation>() {
                    @Override
                    public boolean converged(int iteration, Evaluation previous, Evaluation current) {
                        return true;
                    }
                })
                .build();

        //action
        Optimum optimum = optimizer.optimize(lsp);

        //verify
        //check iterations and evaluations are not switched.
        Assert.assertEquals(1, optimum.getIterations());
        Assert.assertEquals(2, optimum.getEvaluations());
    }
Smell List: ['Assertion_Roulette', 'Magic_Number_Test']

Refactor#4

@Test
public void testEvaluationCount() {
    //setup
    int expectedIterations = 1;
    int expectedEvaluations = 2;

    LeastSquaresProblem lsp = new LinearProblem(new double[][] {{1}}, new double[] {1})
            .getBuilder()
            .checker(new ConvergenceChecker<Evaluation>() {
                @Override
                public boolean converged(int iteration, Evaluation previous, Evaluation current) {
                    return true;
                }
            })
            .build();

    //action
    Optimum optimum = optimizer.optimize(lsp);

    //verify
    //check iterations and evaluations are not switched.
    Assert.assertEquals("Expected number of iterations", expectedIterations, optimum.getIterations());
    Assert.assertEquals("Expected number of evaluations", expectedEvaluations, optimum.getEvaluations());
}


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

