Input Parameters:
Test Code:
 @Test
    public void testComputeCovariance() throws IOException {
        //setup
        RealVector point = new ArrayRealVector(2);
        Evaluation evaluation = new LeastSquaresBuilder()
                .model(new MultivariateJacobianFunction() {
                    @Override
                    public Pair<RealVector, RealMatrix> value(RealVector point) {
                        return new Pair<>(
                                new ArrayRealVector(2),
                                MatrixUtils.createRealDiagonalMatrix(new double[]{1, 1e-2})
                        );
                    }
                })
                .weight(MatrixUtils.createRealDiagonalMatrix(new double[]{1, 1}))
                .target(new ArrayRealVector(2))
                .build()
                .evaluate(point);

        //action
        TestUtils.assertEquals(
                "covariance",
                evaluation.getCovariances(JdkMath.nextAfter(1e-4, 0.0)),
                MatrixUtils.createRealMatrix(new double[][]{{1, 0}, {0, 1e4}}),
                Precision.EPSILON
        );

        //singularity fail
        try {
            evaluation.getCovariances(JdkMath.nextAfter(1e-4, 1.0));
            Assert.fail("Expected Exception");
        } catch (SingularMatrixException e) {
            //expected
        }
    }
Context: 
Smell List: ['Exception_Catching_Throwing']
Smell Description List: ['Test Smell Typeï¼šException_Catching_Throwing\n\nFeature:\nA test method that contains either a throw statement or a catch clause.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Exception_Catching_Throwing\n  Description: Ensure tests use assertDoesNotThrow to verify no exceptions are thrown and remove any throws declaration in test methods.\n  Steps:\n    - Step:\n        Description: "Handle try-catch blocks containing \'fail\' calls"\n        Action: ReplaceTryCatchWithAssertThrows\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n              fail();\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            {exception} exception = assertThrows({exception}.class, () -> {\n              {tryBlock}\n            });\n            {catchBlock}\n    - Step:\n        Description: "Handle test methods with \'throws\' declaration but no try-catch block"\n        Action: WrapWithAssertDoesNotThrow\n        Parameters:\n          DetectionPattern: |\n            MethodDeclaration [throws!=null && BodyContainsTryCatch=false]\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {methodBody}\n            }, "Unexpected exception occurred during the test");\n\n    - Step:\n        Description: "Handle test methods with try-catch blocks without \'fail\' calls"\n        Action: ReplaceTryCatchWithoutFail\n        Parameters:\n          SourcePattern: |\n            try {\n              {tryBlock}\n            } catch ({exception}) {\n              {catchBlock}\n            }\n          ReplacementPattern: |\n            assertDoesNotThrow(() -> {\n              {tryBlock}\n            });\n            {catchBlock}\n\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        try {\n            stmt\'\n            fail();\n        } catch (E) {\n            evs\n        }\n        stmt\'\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assertThrows(E.class, () -> {\n            stmt\'\n        });\n        evs\n        stmt\'\'\n      }\n  Variables:\n    exception: E\n    tryBlock: stmt\'\n    catchBlock: evs\n    tryBlockStatement: stmt\'i\n']
Checkpoints: ['[ ] All exception handling has been refactored to use the JUnit 5 Exception Handling feature.\n']

Refactored Code: 
 
@Test
public void testComputeCovariance() {
    //setup
    RealVector point = new ArrayRealVector(2);
    Evaluation evaluation = new LeastSquaresBuilder()
            .model(new MultivariateJacobianFunction() {
                @Override
                public Pair<RealVector, RealMatrix> value(RealVector point) {
                    return new Pair<>(
                            new ArrayRealVector(2),
                            MatrixUtils.createRealDiagonalMatrix(new double[]{1, 1e-2})
                    );
                }
            })
            .weight(MatrixUtils.createRealDiagonalMatrix(new double[]{1, 1}))
            .target(new ArrayRealVector(2))
            .build()
            .evaluate(point);

    //action
    TestUtils.assertEquals(
            "covariance",
            evaluation.getCovariances(JdkMath.nextAfter(1e-4, 0.0)),
            MatrixUtils.createRealMatrix(new double[][]{{1, 0}, {0, 1e4}}),
            Precision.EPSILON
    );

    //singularity fail
    SingularMatrixException exception = assertThrows(SingularMatrixException.class, () -> {
        evaluation.getCovariances(JdkMath.nextAfter(1e-4, 1.0));
    });
}


