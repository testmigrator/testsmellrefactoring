Input Parameters:
Test Code:
 @Test
    public void testDataset1LargeXShift() {
        final SimpleCurveFitter fitter = GaussianCurveFitter.create();
        final double xShift = 1e8;
        final double[] parameters = fitter.fit(createDataset(DATASET1, xShift, 0).toList());

        Assert.assertEquals(1, parameters[0] / 3496978.1837704973, 1e-2);
        Assert.assertEquals(1, parameters[1] / (xShift + 4.054933085999146), 1e-6);
        Assert.assertEquals(1, parameters[2] / 0.015039355620304326, 1e-2);
    }
Context: /org/apache/commons/math4/legacy/fitting/GaussianCurveFitter
Smell List: ['Duplicate_Assert', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Duplicate Assert\n\nFeature:\nA test method that contains more than one assertion statement with the same parameters.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Duplicate Assert\n  Description: "If the assertion logic is the same but tested with different inputs, convert the test to a parameterized test using JUnit 5\'s @CsvSource annotation. Otherwise, split the test into multiple separate methods, each containing a single assertion."\n  Steps:\n    - Step:\n        Description: "Check if there are multiple assertions testing the same condition"\n        Action: IdentifySameAssertions\n        Parameters:\n          SourcePattern: |\n\t          assert(expected, ...)\n\t          assert(expected, ...)\n    - Step:\n        Description: "Create new test methods if necessary to separate assertions for different inputs"\n        Action: SplitMethod\n        Parameters:\n          TargetType: Method\n\n    - Step:\n        Description: "Convert the test method to a parameterized test"\n        Action: ConvertToParameterizedTest\n        Parameters:\n          TargetType: Method\n    - Step:\n        Description: "Add @CsvSource annotation to declare parameterized values."\n        Action: AddAnnotation\n        Parameters:\n          TargetType: Method\n          Annotation: |\n            @CsvSource({\n              "{paramValues}"\n            })\n    - Step:\n        Description: "Refactor the test method to use parameterized values."\n        Action: RefactorMethod\n        Parameters:\n          SourcePattern: |\n            public void T() {\n              {originalStatements}\n            }\n          ReplacementPattern: |\n            public void T({parameterNames}) {\n              {refactoredStatements}\n            }\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        assertEquals(expectedA, methodUnderTest(a));\n        assertEquals(expectedB, methodUnderTest(b));\n      }\n\n    After: |\n      @ParameterizedTest\n      @CsvSource({\n        "a, expectedA",\n        "b, expectedB"\n      })\n      public void T(String input, String expected) {\n        assertEquals(expected, methodUnderTest(input));\n      }\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All duplicate assertions have been refactored using JUnit 5 Parameterized Tests, where the lists of parameterizable values are declared in a specific annotation, and the test method is executed independently m times.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class GaussianCurveFitterTest {

    @ParameterizedTest
    @CsvSource({
            "3496978.1837704973, 1e-2, 0",
            "0.015039355620304326, 1e-2, 2"
    })
    public void testDataset1LargeXShift(double expectedValue, double delta, int index) {
        final SimpleCurveFitter fitter = GaussianCurveFitter.create();
        final double xShift = 1e8;
        final double[] parameters = fitter.fit(createDataset(DATASET1, xShift, 0).toList());

        double expectedParameterValue = 1;
        Assert.assertEquals(expectedParameterValue, parameters[index] / expectedValue, delta);
    }

    @Test
    public void testDataset1LargeXShift() {
        final SimpleCurveFitter fitter = GaussianCurveFitter.create();
        final double xShift = 1e8;
        final double[] parameters = fitter.fit(createDataset(DATASET1, xShift, 0).toList());

        double expectedParameterValue = 1;
        double delta = 1e-6;
        Assert.assertEquals(expectedParameterValue, parameters[1] / (xShift + 4.054933085999146), delta);
    }
}


