File#1


Input#1
@Test
    public void testConverged() {
        //setup
        ConvergenceChecker<Evaluation> checker = new EvaluationRmsChecker(0.1, 1);
        Evaluation e200 = mockEvaluation(200);
        Evaluation e1 = mockEvaluation(1);

        //action + verify
        //just matches rel tol
        Assert.assertTrue(checker.converged(0, e200, mockEvaluation(210)));
        //just matches abs tol
        Assert.assertTrue(checker.converged(0, e1, mockEvaluation(1.9)));
        //matches both
        Assert.assertTrue(checker.converged(0, e1, mockEvaluation(1.01)));
        //matches neither
        Assert.assertFalse(checker.converged(0, e200, mockEvaluation(300)));
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']
Refactor#1

private ConvergenceChecker<Evaluation> checker;
private Evaluation e200;
private Evaluation e1;

private void setupTestConverged() {
    checker = new EvaluationRmsChecker(0.1, 1);
    e200 = mockEvaluation(200);
    e1 = mockEvaluation(1);
}

@Test
public void testConverged_RelTol() {
    setupTestConverged();
    Assert.assertTrue("Should converge based on relative tolerance", checker.converged(0, e200, mockEvaluation(210)));
}

@Test
public void testConverged_AbsTol() {
    setupTestConverged();
    Assert.assertTrue("Should converge based on absolute tolerance", checker.converged(0, e1, mockEvaluation(1.9)));
}

@Test
public void testConverged_BothTols() {
    setupTestConverged();
    Assert.assertTrue("Should converge based on both tolerances", checker.converged(0, e1, mockEvaluation(1.01)));
}

@Test
public void testConverged_NeitherTol() {
    setupTestConverged();
    Assert.assertFalse("Should not converge as neither tolerance is met", checker.converged(0, e200, mockEvaluation(300)));
}


Input#2

Refactor#2


Input#3

Refactor#3


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

