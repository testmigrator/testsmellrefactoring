Input Parameters:
Test Code:
 @Test
    public void testBevington() {

        // the analytical optimum to compare to
        final LeastSquaresOptimizer.Optimum analyticalOptimum = findBevington(false);
        final RealVector analyticalSolution = analyticalOptimum.getPoint();
        final RealMatrix analyticalCovarianceMatrix = analyticalOptimum.getCovariances(1e-14);

        // the automatic DifferentiatorVectorMultivariateJacobianFunction optimum
        final LeastSquaresOptimizer.Optimum automaticOptimum = findBevington(true);
        final RealVector automaticSolution = automaticOptimum.getPoint();
        final RealMatrix automaticCovarianceMatrix = automaticOptimum.getCovariances(1e-14);

        final int numParams = analyticalOptimum.getPoint().getDimension();

        // Check that the automatic solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = JdkMath.sqrt(analyticalCovarianceMatrix.getEntry(i, i));
            Assert.assertEquals("Parameter " + i, analyticalSolution.getEntry(i), automaticSolution.getEntry(i), error);
        }

        // Check that each entry of the computed covariance matrix is within 1%
        // of the reference analytical matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                        analyticalCovarianceMatrix.getEntry(i, j),
                        automaticCovarianceMatrix.getEntry(i, j),
                        JdkMath.abs(0.01 * analyticalCovarianceMatrix.getEntry(i, j)));
            }
        }

        // Check various measures of goodness-of-fit.
        final double tol = 1e-40;
        Assert.assertEquals(analyticalOptimum.getChiSquare(), automaticOptimum.getChiSquare(), tol);
        Assert.assertEquals(analyticalOptimum.getCost(), automaticOptimum.getCost(), tol);
        Assert.assertEquals(analyticalOptimum.getRMS(), automaticOptimum.getRMS(), tol);
        Assert.assertEquals(analyticalOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), automaticOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), tol);
    }
Context: /org/apache/commons/math4/legacy/fitting/leastsquares/DifferentiatorVectorMultivariateJacobianFunction
Smell List: ['Conditional_Test_Logic']
Smell Description List: ['Test Smell Type：Conditional Test Logic\n\nFeature:\nA test method that contains one or more control statements (i.e if, switch, conditional expression, for, foreach and while statement).\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Conditional Test Logic\n  Description: "Remove control statements (if, switch, conditional expression, etc.) within the test method by extracting them into helper methods."\n  Steps:\n    - Step:\n        Description: "Extract control logic into a separate helper method"\n        Action: ExtractMethod\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ExtractedMethod: |\n            private boolean isConditionMet() {\n                return {condition};\n            }\n    - Step:\n        Description: "Replace conditional logic with a call to the helper method"\n        Action: ReplaceConditional\n        Parameters:\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ReplacementPattern: |\n            if (isConditionMet()) {\n                {stmt}\n            }\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          if (someCondition()) {\n              executeLogic();\n          }\n      }\n    After: |\n      private boolean isConditionMet() {\n          return someCondition();\n      }\n      @Test\n      public void T() {\n          if (isConditionMet()) {\n              executeLogic();\n          }\n      }\n']
Checkpoints: ['[ ] All conditional test logic has been refactored to use JUnit 5’s conditional test execution feature, with the condition verified in an external method assigned via the @EnabledIf annotation.\n']

Refactored Code: 
 
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.util.JdkMath;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class BevingtonTest {

   @Test
    public void testBevington() {

        // the analytical optimum to compare to
        final LeastSquaresOptimizer.Optimum analyticalOptimum = findBevington(false);
        final RealVector analyticalSolution = analyticalOptimum.getPoint();
        final RealMatrix analyticalCovarianceMatrix = analyticalOptimum.getCovariances(1e-14);

        // the automatic DifferentiatorVectorMultivariateJacobianFunction optimum
        final LeastSquaresOptimizer.Optimum automaticOptimum = findBevington(true);
        final RealVector automaticSolution = automaticOptimum.getPoint();
        final RealMatrix automaticCovarianceMatrix = automaticOptimum.getCovariances(1e-14);

        final int numParams = analyticalOptimum.getPoint().getDimension();

        checkout(analyticalSolution, analyticalCovarianceMatrix, automaticSolution, automaticCovarianceMatrix, numParams);

        // Check various measures of goodness-of-fit.
        final double tol = 1e-40;
        Assert.assertEquals(analyticalOptimum.getChiSquare(), automaticOptimum.getChiSquare(), tol);
        Assert.assertEquals(analyticalOptimum.getCost(), automaticOptimum.getCost(), tol);
        Assert.assertEquals(analyticalOptimum.getRMS(), automaticOptimum.getRMS(), tol);
        Assert.assertEquals(analyticalOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), automaticOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), tol);
    }

    private static void checkout(RealVector analyticalSolution, RealMatrix analyticalCovarianceMatrix, RealVector automaticSolution, RealMatrix automaticCovarianceMatrix, int numParams) {
        // Check that the automatic solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = JdkMath.sqrt(analyticalCovarianceMatrix.getEntry(i, i));
            Assert.assertEquals("Parameter " + i, analyticalSolution.getEntry(i), automaticSolution.getEntry(i), error);
        }

        // Check that each entry of the computed covariance matrix is within 1%
        // of the reference analytical matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                        analyticalCovarianceMatrix.getEntry(i, j),
                        automaticCovarianceMatrix.getEntry(i, j),
                        JdkMath.abs(0.01 * analyticalCovarianceMatrix.getEntry(i, j)));
            }
        }
}


