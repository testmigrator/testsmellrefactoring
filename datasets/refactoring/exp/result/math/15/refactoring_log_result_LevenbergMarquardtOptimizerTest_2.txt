Input Parameters:
Test Code:
 @Test
    public void testBevington() {
        final double[][] dataPoints = {
            // column 1 = times
            { 15, 30, 45, 60, 75, 90, 105, 120, 135, 150,
              165, 180, 195, 210, 225, 240, 255, 270, 285, 300,
              315, 330, 345, 360, 375, 390, 405, 420, 435, 450,
              465, 480, 495, 510, 525, 540, 555, 570, 585, 600,
              615, 630, 645, 660, 675, 690, 705, 720, 735, 750,
              765, 780, 795, 810, 825, 840, 855, 870, 885, },
            // column 2 = measured counts
            { 775, 479, 380, 302, 185, 157, 137, 119, 110, 89,
              74, 61, 66, 68, 48, 54, 51, 46, 55, 29,
              28, 37, 49, 26, 35, 29, 31, 24, 25, 35,
              24, 30, 26, 28, 21, 18, 20, 27, 17, 17,
              14, 17, 24, 11, 22, 17, 12, 10, 13, 16,
              9, 9, 14, 21, 17, 13, 12, 18, 10, },
        };
        final double[] start = {10, 900, 80, 27, 225};

        final BevingtonProblem problem = new BevingtonProblem();

        final int len = dataPoints[0].length;
        final double[] weights = new double[len];
        for (int i = 0; i < len; i++) {
            problem.addPoint(dataPoints[0][i],
                             dataPoints[1][i]);

            weights[i] = 1 / dataPoints[1][i];
        }

        final Optimum optimum = optimizer.optimize(
                builder(problem)
                        .target(dataPoints[1])
                        .weight(new DiagonalMatrix(weights))
                        .start(start)
                        .maxIterations(20)
                        .build()
        );

        final RealVector solution = optimum.getPoint();
        final double[] expectedSolution = { 10.4, 958.3, 131.4, 33.9, 205.0 };

        final RealMatrix covarMatrix = optimum.getCovariances(1e-14);
        final double[][] expectedCovarMatrix = {
            { 3.38, -3.69, 27.98, -2.34, -49.24 },
            { -3.69, 2492.26, 81.89, -69.21, -8.9 },
            { 27.98, 81.89, 468.99, -44.22, -615.44 },
            { -2.34, -69.21, -44.22, 6.39, 53.80 },
            { -49.24, -8.9, -615.44, 53.8, 929.45 }
        };

        final int numParams = expectedSolution.length;

        // Check that the computed solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = JdkMath.sqrt(expectedCovarMatrix[i][i]);
            Assert.assertEquals("Parameter " + i, expectedSolution[i], solution.getEntry(i), error);
        }

        // Check that each entry of the computed covariance matrix is within 10%
        // of the reference matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                                    expectedCovarMatrix[i][j],
                                    covarMatrix.getEntry(i, j),
                                    JdkMath.abs(0.1 * expectedCovarMatrix[i][j]));
            }
        }

        // Check various measures of goodness-of-fit.
        final double chi2 = optimum.getChiSquare();
        final double cost = optimum.getCost();
        final double rms = optimum.getRMS();
        final double reducedChi2 = optimum.getReducedChiSquare(start.length);

        // XXX Values computed by the CM code: It would be better to compare
        // with the results from another library.
        final double expectedChi2 = 66.07852350839286;
        final double expectedReducedChi2 = 1.2014277001525975;
        final double expectedCost = 8.128869755900439;
        final double expectedRms = 1.0582887010256337;

        final double tol = 1e-14;
        Assert.assertEquals(expectedChi2, chi2, tol);
        Assert.assertEquals(expectedReducedChi2, reducedChi2, tol);
        Assert.assertEquals(expectedCost, cost, tol);
        Assert.assertEquals(expectedRms, rms, tol);
    }
Context: /org/apache/commons/math4/legacy/fitting/leastsquares/LevenbergMarquardtOptimizer
Smell List: ['Conditional_Test_Logic']
Smell Description List: ['Test Smell Type：Conditional Test Logic\n\nFeature:\nA test method that contains one or more control statements (i.e if, switch, conditional expression, for, foreach and while statement).\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Conditional Test Logic\n  Description: "Extract complex control flow logic into separate helper methods to improve readability and testability."\n  Steps:\n    - Step:\n        Description: "Identify complex control flow constructs"\n        Action: IdentifyComplexControlFlow\n        Parameters:\n          TargetType: Method\n    - Step:\n        Description: "Extract control flow logic into a separate helper method"\n        Action: ExtractMethod\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            (if|switch|for|while|do-while) ({condition}) {\n                {statements}\n            }\n          ExtractedMethod: |\n            private boolean/void helperMethodName() {\n                {extractedStatements}\n            }\n    - Step:\n        Description: "Replace complex control flow with a call to the helper method"\n        Action: ReplaceControlFlow\n        Parameters:\n          SourcePattern: |\n            (if|switch|for|while|do-while) ({condition}) {\n                {statements}\n            }\n          ReplacementPattern: |\n            helperMethodName();\n  Example:\n    Before: |\n      @Test\n      public void complexTest() {\n          if (condition1 && condition2) {\n              if (condition3) {\n                  doSomething();\n              } else {\n                  doSomethingElse();\n              }\n          } else {\n              doDefault();\n          }\n      }\n    After: |\n      private boolean isComplexConditionMet() {\n          return condition1 && condition2 && condition3;\n      }\n\n      private void handleComplexScenario() {\n          if (isComplexConditionMet()) {\n              doSomething();\n          } else {\n              doSomethingElse();\n          }\n      }\n\n      @Test\n      public void complexTest() {\n          handleComplexScenario();\n          doDefault();\n      }\n']
Checkpoints: ['[ ] All conditional test logic has been refactored to use JUnit 5’s conditional test execution feature, with the condition verified in an external method assigned via the @EnabledIf annotation.\n']

Refactored Code: 
 
import org.apache.commons.math4.optim.nonlinear.vector.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math4.optim.nonlinear.vector.leastsquares.LeastSquaresProblem;
import org.apache.commons.math4.optim.nonlinear.vector.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math4.optim.nonlinear.vector.leastsquares.MultivariateJacobianFunction;
import org.apache.commons.math4.optim.nonlinear.vector.leastsquares.WeightedObservedPoints;
import org.apache.commons.math4.linear.DiagonalMatrix;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.util.JdkMath;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class BevingtonTest {

    @Test
    @EnabledIf("isDataValid")
    public void testBevington() {
        final double[][] dataPoints = getDataPoints();
        final double[] start = {10, 900, 80, 27, 225};
        final BevingtonProblem problem = new BevingtonProblem();
        final int len = dataPoints[0].length;
        final double[] weights = new double[len];

        for (int i = 0; i < len; i++) {
            problem.addPoint(dataPoints[0][i], dataPoints[1][i]);
            weights[i] = 1 / dataPoints[1][i];
        }

        final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
        final LeastSquaresProblem problemToOptimize = new LeastSquaresBuilder()
                .target(dataPoints[1])
                .weight(new DiagonalMatrix(weights))
                .start(start)
                .maxIterations(20)
                .model(problem.getModelFunction(), problem.getModelFunctionJacobian())
                .build();

        final LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problemToOptimize);

        assertSolution(optimum, start.length);
        assertCovarianceMatrix(optimum);
        assertGoodnessOfFit(optimum, start.length);
    }

    private double[][] getDataPoints() {
        return new double[][]{
            { 15, 30, 45, 60, 75, 90, 105, 120, 135, 150,
              165, 180, 195, 210, 225, 240, 255, 270, 285, 300,
              315, 330, 345, 360, 375, 390, 405, 420, 435, 450,
              465, 480, 495, 510, 525, 540, 555, 570, 585, 600,
              615, 630, 645, 660, 675, 690, 705, 720, 735, 750,
              765, 780, 795, 810, 825, 840, 855, 870, 885, },
            { 775, 479, 380, 302, 185, 157, 137, 119, 110, 89,
              74, 61, 66, 68, 48, 54, 51, 46, 55, 29,
              28, 37, 49, 26, 35, 29, 31, 24, 25, 35,
              24, 30, 26, 28, 21, 18, 20, 27, 17, 17,
              14, 17, 24, 11, 22, 17, 12, 10, 13, 16,
              9, 9, 14, 21, 17, 13, 12, 18, 10, }
        };
    }

    private boolean isDataValid() {
        double[][] dataPoints = getDataPoints();
        return dataPoints != null && dataPoints.length == 2 && dataPoints[0].length == dataPoints[1].length;
    }

    private void assertSolution(LeastSquaresOptimizer.Optimum optimum, int numParams) {
        final RealVector solution = optimum.getPoint();
        final double[] expectedSolution = { 10.4, 958.3, 131.4, 33.9, 205.0 };
        final RealMatrix covarMatrix = optimum.getCovariances(1e-14);

        for (int i = 0; i < numParams; i++) {
            final double error = JdkMath.sqrt(covarMatrix.getEntry(i, i));
            assertEquals("Parameter " + i, expectedSolution[i], solution.getEntry(i), error);
        }
    }

    private void assertCovarianceMatrix(LeastSquaresOptimizer.Optimum optimum) {
        final RealMatrix covarMatrix = optimum.getCovariances(1e-14);
        final double[][] expectedCovarMatrix = {
            { 3.38, -3.69, 27.98, -2.34, -49.24 },
            { -3.69, 2492.26, 81.89, -69.21, -8.9 },
            { 27.98, 81.89, 468.99, -44.22, -615.44 },
            { -2.34, -69.21, -44.22, 6.39, 53.80 },
            { -49.24, -8.9, -615.44, 53.8, 929.45 }
        };

        final int numParams = expectedCovarMatrix.length;

        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                assertEquals("Covariance matrix [" + i + "][" + j + "]",
                             expectedCovarMatrix[i][j],
                             covarMatrix.getEntry(i, j),
                             JdkMath.abs(0.1 * expectedCovarMatrix[i][j]));
            }
        }
    }

    private void assertGoodnessOfFit(LeastSquaresOptimizer.Optimum optimum, int numParams) {
        final double chi2 = optimum.getChiSquare();
        final double cost = optimum.getCost();
        final double rms = optimum.getRMS();
        final double reducedChi2 = optimum.getReducedChiSquare(numParams);

        final double expectedChi2 = 66.07852350839286;
        final double expectedReducedChi2 = 1.2014277001525975;
        final double expectedCost = 8.128869755900439;
        final double expectedRms = 1.0582887010256337;

        final double tol = 1e-14;
        assertEquals(expectedChi2, chi2, tol);
        assertEquals(expectedReducedChi2, reducedChi2, tol);
        assertEquals(expectedCost, cost, tol);
        assertEquals(expectedRms, rms, tol);
    }
}


