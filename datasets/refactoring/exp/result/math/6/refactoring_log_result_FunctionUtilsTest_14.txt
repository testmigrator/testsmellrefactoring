Input Parameters:
Test Code:
 @Test
    public void testDerivativeUnivariate() {

        final UnivariateDifferentiableFunction f = new UnivariateDifferentiableFunction() {

            @Override
            public double value(double x) {
                return x * x;
            }

            @Override
            public DerivativeStructure value(DerivativeStructure x) {
                return x.multiply(x);
            }
        };

        final UnivariateFunction f0 = FunctionUtils.derivative(f, 0);
        final UnivariateFunction f1 = FunctionUtils.derivative(f, 1);
        final UnivariateFunction f2 = FunctionUtils.derivative(f, 2);

        for (double t = -1.0; t < 1; t += 0.01) {
            Assert.assertEquals(t * t, f0.value(t), 1.0e-15);
            Assert.assertEquals(2 * t, f1.value(t), 1.0e-15);
            Assert.assertEquals(2,     f2.value(t), 1.0e-15);
        }
    }
Context: /org/apache/commons/math4/legacy/analysis/FunctionUtils
Smell List: ['Conditional_Test_Logic', 'Eager_Test', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Conditional Test Logic\n\nFeature:\nA test method that contains one or more control statements (i.e if, switch, conditional expression, for, foreach and while statement).\n', 'Test Smell Type：Eager Test\n\nFeature:\nA test method contains multiple calls to multiple production methods.\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Conditional Test Logic\n  Description: "Remove control statements (if, switch, conditional expression, etc.) within the test method by extracting them into helper methods."\n  Steps:\n    - Step:\n        Description: "Extract control logic into a separate helper method"\n        Action: ExtractMethod\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ExtractedMethod: |\n            private boolean isConditionMet() {\n                return {condition};\n            }\n    - Step:\n        Description: "Replace conditional logic with a call to the helper method"\n        Action: ReplaceConditional\n        Parameters:\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ReplacementPattern: |\n            if (isConditionMet()) {\n                {stmt}\n            }\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          if (someCondition()) {\n              executeLogic();\n          }\n      }\n    After: |\n      private boolean isConditionMet() {\n          return someCondition();\n      }\n      @Test\n      public void T() {\n          if (isConditionMet()) {\n              executeLogic();\n          }\n      }\n', 'RefactorRule:\n  SmellType: Eager Test\n  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."\n  Steps:\n    - Step1:\n        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."\n        Action: ExtractSetupMethod\n        Parameters:\n          Condition: "If multiple tests share the same setup logic."\n          MethodNamePattern: setupTest{OriginalMethodName}\n    - Step2:\n        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."\n        Action: GroupAssertions\n        Parameters:\n          GroupBy: LogicalConcern\n    - Step3:\n        Description: "Create new test methods for each cohesive group of assertions and ensure readability."\n        Action: CreateTestMethods\n        Parameters:\n          IncludeSetup: True\n          NamePattern: test{OriginalMethodName}_{Concern}\n  Example:\n    Before: |\n      @Test\n      public void testExample() {\n          setup();\n          assertEquals(1, methodA());\n          assertTrue(methodB());\n      }\n    After: |\n      private void setupTestExample() {\n          setup();\n      }\n\n      @Test\n      public void testExample_MethodA() {\n          setupTestExample();\n          assertEquals(1, methodA());\n      }\n\n      @Test\n      public void testExample_MethodB() {\n          setupTestExample();\n          assertTrue(methodB());\n      }\n  Variables:\n    OriginalMethodName: The name of the original test method.\n    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All conditional test logic has been refactored to use JUnit 5’s conditional test execution feature, with the condition verified in an external method assigned via the @EnabledIf annotation.\n', '[ ] All eager tests have been split into separate tests, each focusing on verifying a single API.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 

import org.apache.commons.math4.analysis.UnivariateDifferentiableFunction;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.function.FunctionUtils;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.function.Power;
import org.apache.commons.math4.analysis.function.Sin;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.analysis.differeentiation.UnivariateDifferentiableFunction;
import org.apache.commons.math4.analysis.FunctionUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

public class DerivativeTest {

    private static final double EPSILON = 1.0e-15;
    private static final double STEP = 0.01;
    private static final double T_MIN = -1.0;
    private static final double T_MAX = 1.0;

    private UnivariateDifferentiableFunction createTestFunction() {
        return new UnivariateDifferentiableFunction() {
            @Override
            public double value(double x) {
                return x * x;
            }

            @Override
            public DerivativeStructure value(DerivativeStructure x) {
                return x.multiply(x);
            }
        };
    }

    private void testDerivative(UnivariateFunction f0, UnivariateFunction f1, UnivariateFunction f2) {
        for (double t = T_MIN; t < T_MAX; t += STEP) {
            Assertions.assertEquals(t * t, f0.value(t), EPSILON);
            Assertions.assertEquals(2 * t, f1.value(t), EPSILON);
            Assertions.assertEquals(2, f2.value(t), EPSILON);
        }
    }

    @Test
    public void testDerivativeUnivariate_f0() {
        UnivariateDifferentiableFunction f = createTestFunction();
        UnivariateFunction f0 = FunctionUtils.derivative(f, 0);
        UnivariateFunction f1 = FunctionUtils.derivative(f, 1);
        UnivariateFunction f2 = FunctionUtils.derivative(f, 2);

        testDerivative(f0, f1, f2);
    }

    @Test
    public void testDerivativeUnivariate_f1() {
        UnivariateDifferentiableFunction f = createTestFunction();
        UnivariateFunction f0 = FunctionUtils.derivative(f, 0);
        UnivariateFunction f1 = FunctionUtils.derivative(f, 1);
        UnivariateFunction f2 = FunctionUtils.derivative(f, 2);

        testDerivative(f0, f1, f2);
    }

    @Test
    public void testDerivativeUnivariate_f2() {
        UnivariateDifferentiableFunction f = createTestFunction();
        UnivariateFunction f0 = FunctionUtils.derivative(f, 0);
        UnivariateFunction f1 = FunctionUtils.derivative(f, 1);
        UnivariateFunction f2 = FunctionUtils.derivative(f, 2);

        testDerivative(f0, f1, f2);
    }
}



