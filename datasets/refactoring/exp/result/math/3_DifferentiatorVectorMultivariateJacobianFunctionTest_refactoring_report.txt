File#1


Input#1
@Test
    public void testBevington() {

        // the analytical optimum to compare to
        final LeastSquaresOptimizer.Optimum analyticalOptimum = findBevington(false);
        final RealVector analyticalSolution = analyticalOptimum.getPoint();
        final RealMatrix analyticalCovarianceMatrix = analyticalOptimum.getCovariances(1e-14);

        // the automatic DifferentiatorVectorMultivariateJacobianFunction optimum
        final LeastSquaresOptimizer.Optimum automaticOptimum = findBevington(true);
        final RealVector automaticSolution = automaticOptimum.getPoint();
        final RealMatrix automaticCovarianceMatrix = automaticOptimum.getCovariances(1e-14);

        final int numParams = analyticalOptimum.getPoint().getDimension();

        // Check that the automatic solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = JdkMath.sqrt(analyticalCovarianceMatrix.getEntry(i, i));
            Assert.assertEquals("Parameter " + i, analyticalSolution.getEntry(i), automaticSolution.getEntry(i), error);
        }

        // Check that each entry of the computed covariance matrix is within 1%
        // of the reference analytical matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                        analyticalCovarianceMatrix.getEntry(i, j),
                        automaticCovarianceMatrix.getEntry(i, j),
                        JdkMath.abs(0.01 * analyticalCovarianceMatrix.getEntry(i, j)));
            }
        }

        // Check various measures of goodness-of-fit.
        final double tol = 1e-40;
        Assert.assertEquals(analyticalOptimum.getChiSquare(), automaticOptimum.getChiSquare(), tol);
        Assert.assertEquals(analyticalOptimum.getCost(), automaticOptimum.getCost(), tol);
        Assert.assertEquals(analyticalOptimum.getRMS(), automaticOptimum.getRMS(), tol);
        Assert.assertEquals(analyticalOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), automaticOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), tol);
    }
Smell List: ['Conditional_Test_Logic']
Refactor#1

   @Test
    public void testBevington() {

        // the analytical optimum to compare to
        final LeastSquaresOptimizer.Optimum analyticalOptimum = findBevington(false);
        final RealVector analyticalSolution = analyticalOptimum.getPoint();
        final RealMatrix analyticalCovarianceMatrix = analyticalOptimum.getCovariances(1e-14);

        // the automatic DifferentiatorVectorMultivariateJacobianFunction optimum
        final LeastSquaresOptimizer.Optimum automaticOptimum = findBevington(true);
        final RealVector automaticSolution = automaticOptimum.getPoint();
        final RealMatrix automaticCovarianceMatrix = automaticOptimum.getCovariances(1e-14);

        final int numParams = analyticalOptimum.getPoint().getDimension();

        checkout(analyticalSolution, analyticalCovarianceMatrix, automaticSolution, automaticCovarianceMatrix, numParams);

        // Check various measures of goodness-of-fit.
        final double tol = 1e-40;
        Assert.assertEquals(analyticalOptimum.getChiSquare(), automaticOptimum.getChiSquare(), tol);
        Assert.assertEquals(analyticalOptimum.getCost(), automaticOptimum.getCost(), tol);
        Assert.assertEquals(analyticalOptimum.getRMS(), automaticOptimum.getRMS(), tol);
        Assert.assertEquals(analyticalOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), automaticOptimum.getReducedChiSquare(automaticOptimum.getPoint().getDimension()), tol);
    }

    private static void checkout(RealVector analyticalSolution, RealMatrix analyticalCovarianceMatrix, RealVector automaticSolution, RealMatrix automaticCovarianceMatrix, int numParams) {
        // Check that the automatic solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = JdkMath.sqrt(analyticalCovarianceMatrix.getEntry(i, i));
            Assert.assertEquals("Parameter " + i, analyticalSolution.getEntry(i), automaticSolution.getEntry(i), error);
        }

        // Check that each entry of the computed covariance matrix is within 1%
        // of the reference analytical matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                        analyticalCovarianceMatrix.getEntry(i, j),
                        automaticCovarianceMatrix.getEntry(i, j),
                        JdkMath.abs(0.01 * analyticalCovarianceMatrix.getEntry(i, j)));
            }
        }

Input#2

Refactor#2


Input#3

Refactor#3


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

