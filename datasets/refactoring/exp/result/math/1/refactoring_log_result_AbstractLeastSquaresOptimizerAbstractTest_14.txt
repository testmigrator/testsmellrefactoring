Input Parameters:
Test Code:
 @Test
    public void testCircleFittingBadInit() {
        CircleVectorial circle = new CircleVectorial();
        double[][] points = circlePoints;
        double[] weights = new double[points.length];
        final double[] start = {-12, -12};
        Arrays.fill(weights, 2);
        for (int i = 0; i < points.length; ++i) {
            circle.addPoint(points[i][0], points[i][1]);
        }

        Optimum optimum = optimizer.optimize(builder(circle).weight(new DiagonalMatrix(weights)).start(start).build());

        Vector2D center = Vector2D.of(optimum.getPoint().getEntry(0), optimum.getPoint().getEntry(1));
        Assert.assertTrue(optimum.getEvaluations() < 25);
        Assert.assertEquals(0.043, optimum.getRMS(), 1e-3);
        Assert.assertEquals(0.292235, circle.getRadius(center), 1e-6);
        Assert.assertEquals(-0.151738, center.getX(), 1e-6);
        Assert.assertEquals(0.2075001, center.getY(), 1e-6);
    }
Context: 
Smell List: ['Assertion_Roulette', 'Conditional_Test_Logic', 'Magic_Number_Test']
Smell Description List: ['Test Smell Type：Assertion Roulette\n\nFeature:\nA test method contains more than one assertion statement without an explanation/message (parameter in the assertion method).\n', 'Test Smell Type：Conditional Test Logic\n\nFeature:\nA test method that contains one or more control statements (i.e if, switch, conditional expression, for, foreach and while statement).\n', 'Test Smell Type：Magic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Assertion Roulette\n  Description: Add descriptive messages to assert statements to improve readability and maintainability.\n  Steps:\n    - Step:\n        Description: "Add descriptive message to each assert statement(except assertThat, assertThrows)."\n        Action: AddMessageToAssert\n        Parameters:\n          MessagePattern: "{assertionMessage}"\n  Example:\n    Before: |\n      @Test\n      public void T() {\n        stmt\n        assert_1\n        ...\n        assert_n\n        stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n        stmt\n        assert_1(..., "Descriptive message for assert statement")\n        ...\n        assert_n(..., "Descriptive message for assert statement")\n        stmt\'\n      }\n    Variables:\n      assertionMessage: "Descriptive message for assert statement"\n', 'RefactorRule:\n  SmellType: Conditional Test Logic\n  Description: "Remove control statements (if, switch, conditional expression, etc.) within the test method by extracting them into helper methods."\n  Steps:\n    - Step:\n        Description: "Extract control logic into a separate helper method"\n        Action: ExtractMethod\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ExtractedMethod: |\n            private boolean isConditionMet() {\n                return {condition};\n            }\n    - Step:\n        Description: "Replace conditional logic with a call to the helper method"\n        Action: ReplaceConditional\n        Parameters:\n          SourcePattern: |\n            if ({condition}) {\n                {stmt}\n            }\n          ReplacementPattern: |\n            if (isConditionMet()) {\n                {stmt}\n            }\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          if (someCondition()) {\n              executeLogic();\n          }\n      }\n    After: |\n      private boolean isConditionMet() {\n          return someCondition();\n      }\n      @Test\n      public void T() {\n          if (isConditionMet()) {\n              executeLogic();\n          }\n      }\n', 'RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All assert statements have been added with clear explanatory messages.\n', '[ ] All conditional test logic has been refactored to use JUnit 5’s conditional test execution feature, with the condition verified in an external method assigned via the @EnabledIf annotation.\n', '[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 

@Test
public void testCircleFittingBadInit() {
    CircleVectorial circle = new CircleVectorial();
    double[][] points = circlePoints;
    double[] weights = new double[points.length];
    final double[] start = {-12, -12};
    Arrays.fill(weights, 2);
    addPoint(circle, points);

    Optimum optimum = optimizer.optimize(builder(circle).weight(new DiagonalMatrix(weights)).start(start).build());

    Vector2D center = Vector2D.of(optimum.getPoint().getEntry(0), optimum.getPoint().getEntry(1));
    int maxEvaluations = 25;
    double expectedRMS = 0.043;
    double expectedRadius = 0.292235;
    double expectedCenterX = -0.151738;
    double expectedCenterY = 0.2075001;

    Assert.assertTrue("Optimum evaluations should be less than " + maxEvaluations,optimum.getEvaluations() < maxEvaluations);
    Assert.assertEquals("Optimum RMS should be close to " + expectedRMS, expectedRMS, optimum.getRMS(), 1e-3);
    Assert.assertEquals("Circle radius should be close to " + expectedRadius, expectedRadius, circle.getRadius(center), 1e-6);
    Assert.assertEquals("Center X coordinate should be close to " + expectedCenterX, expectedCenterX, center.getX(), 1e-6);
    Assert.assertEquals("Center Y coordinate should be close to " + expectedCenterY, expectedCenterY, center.getY(), 1e-6);
}

private static void addPoint(CircleVectorial circle, double[][] points) {
    for (int i = 0; i < points.length; ++i) {
        circle.addPoint(points[i][0], points[i][1]);
    }
}
