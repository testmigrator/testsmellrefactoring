Input Parameters:
Test Code:
 @Test
    public void testRedundantEquations() {
        LinearProblem problem = new LinearProblem(new double[][]{
                {1, 1},
                {1, -1},
                {1, 3}
        }, new double[]{3, 1, 5});

        Optimum optimum = optimizer
                .optimize(problem.getBuilder().start(new double[]{1, 1}).build());

        Assert.assertEquals(0, optimum.getRMS(), TOL);
        assertEquals(TOL, optimum.getPoint(), 2, 1);
    }
Context: 
Smell List: ['Magic_Number_Test']
Smell Description List: ['Test Smell Typeï¼šMagic Number Test\n\nFeature:\nAn assertion method that contains a numeric literal as an argument.\n']
Refactoring DSL: ['RefactorRule:\n  SmellType: Magic Number Test\n  Description: "Extract magic numbers and assign meaningful names to improve readability and maintainability."\n  Steps:\n    - Step:\n        Action: IdentifyMagicNumbers\n        Description: "Identify magic numbers in assertions"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n    - Step:\n        Action: ExtractVariable\n        Description: "Extract magic number to a variable with meaningful name"\n        Parameters:\n          TargetType: Method\n          SourcePattern: |\n            assertEquals({magicNumber}, {variable})\n          ReplacementPattern: |\n            int {meaningfulName} = {magicNumber};\n            assertEquals({meaningfulName}, {variable})\n  Example:\n    Before: |\n      @Test\n      public void T() {\n          stmt\n          assertEquals(1, a)\n          stmt\'\n      }\n    After: |\n      @Test\n      public void T() {\n          int x = 1; // x: meaningful variable name\n          stmt\n          assertEquals(x, a)\n          stmt\'\n      }\n  Variables:\n    magicNumber: "1"\n    variable: "a"\n    meaningfulName: "x"\n']
Checkpoints: ['[ ] All magic numbers in the test code have been extracted and assigned meaningful variable names.\n']

Refactored Code: 
 
@Test
public void testRedundantEquations() {
    LinearProblem problem = new LinearProblem(new double[][]{
            {1, 1},
            {1, -1},
            {1, 3}
    }, new double[]{3, 1, 5});

    double tolerance = 0.001; // TOL: meaningful variable name
    double initialX = 1;
    double initialY = 1;

    Optimum optimum = optimizer
            .optimize(problem.getBuilder().start(new double[]{initialX, initialY}).build());

    int expectedNumber = 0;
    Assert.assertEquals(expectedNumber, optimum.getRMS(), tolerance);
    assertEquals(tolerance, optimum.getPoint(), 2, initialX);
}


