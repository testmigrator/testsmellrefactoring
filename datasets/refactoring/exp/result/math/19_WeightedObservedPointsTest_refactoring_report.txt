File#1


Input#1
 @Test
    public void testClear() {
        final WeightedObservedPoints store = new WeightedObservedPoints();

        store.add(new WeightedObservedPoint(1, 2, 3));
        store.add(new WeightedObservedPoint(2, -1, -2));
        Assert.assertTrue(store.toList().size() == 2);

        store.clear();
        Assert.assertTrue(store.toList().isEmpty());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test']

Refactor#1

private void setupTestClear() {
    store = new WeightedObservedPoints();
    store.add(new WeightedObservedPoint(1, 2, 3));
    store.add(new WeightedObservedPoint(2, -1, -2));
}

@Test
public void testClear_AddPoints() {
    setupTestClear();
    Assert.assertTrue("Store should contain 2 points after adding them",   store.toList().size() == 2);
}

@Test
public void testClear_ClearPoints() {
    setupTestClear();
    store.clear();
    Assert.assertTrue("Store should be empty after clearing", store.toList().isEmpty());
}

Input#2
@Test
    public void testToListCopy() {
        final WeightedObservedPoints store = new WeightedObservedPoints();

        store.add(new WeightedObservedPoint(1, 2, 3));
        store.add(new WeightedObservedPoint(2, -3, -4));

        final List<WeightedObservedPoint> list = store.toList();
        Assert.assertEquals(2, list.size());

        // Adding an element to "list" has no impact on "store".
        list.add(new WeightedObservedPoint(1.2, 3.4, 5.6));
        Assert.assertNotEquals(list.size(), store.toList().size());

        // Clearing "store" has no impact on "list".
        store.clear();
        Assert.assertFalse(list.isEmpty());
    }
Smell List: ['Assertion_Roulette', 'Eager_Test', 'Magic_Number_Test']

Refactor#2

private static final WeightedObservedPoint POINT_1 = new WeightedObservedPoint(1, 2, 3);
private static final WeightedObservedPoint POINT_2 = new WeightedObservedPoint(2, -3, -4);
private static final WeightedObservedPoint POINT_3 = new WeightedObservedPoint(1.2, 3.4, 5.6);
private static final int EXPECTED_SIZE = 2;

private WeightedObservedPoints store;

@Before
public void setUp() {
    store = new WeightedObservedPoints();
    store.add(POINT_1);
    store.add(POINT_2);
}

@Test
public void testToListCopy_Size() {
    List<WeightedObservedPoint> list = store.toList();
    Assert.assertEquals(EXPECTED_SIZE, list.size(), "List size should match the expected size");
}

@Test
public void testToListCopy_AddElementNoImpact() {
    List<WeightedObservedPoint> list = store.toList();
    list.add(POINT_3);
    Assert.assertNotEquals(list.size(), store.toList().size(), "Adding an element to the list should not affect the store size");
}

@Test
public void testToListCopy_ClearStoreNoImpact() {
    List<WeightedObservedPoint> list = store.toList();
    store.clear();
    Assert.assertFalse(list.isEmpty(), "Clearing the store should not affect the list content");
}




Input#3

Refactor#3


Input#4

Refactor#4


Input#5

Refactor#5


Input#6

Refactor#6


Input#7

Refactor#7


Input#8

Refactor#8


Input#9

Refactor#9


Input#10

Refactor#10


Input#11

Refactor#11


Input#12

Refactor#12


Input#13

Refactor#13


Input#14

Refactor#14


Input#15

Refactor#15


Input#16

Refactor#16


Input#17

Refactor#17


Input#18

Refactor#18



Input#19

Refactor#19



Input#20

Refactor#20



Input#21

Refactor#21


Input#22

Refactor#22


Input#23

Refactor#23


Input#24

Refactor#24


Input#25

Refactor#25


Input#26

Refactor#26


Input#27

Refactor#27



Input#28

Refactor#28



Input#29

Refactor#29



Input#30

Refactor#30


Input#31

Refactor#31



Input#32

Refactor#32



Input#33

Refactor#33



Input#34

Refactor#34



Input#35

Refactor#35

