asserts result: 
 ```java
import org.apache.commons.math4.analysis.function.FunctionUtils;
import org.apache.commons.math4.analysis.DerivativeStructure;
import org.apache.commons.math4.analysis.MultivariateDifferentiableFunction;
import org.apache.commons.math4.analysis.MultivariateFunction;
import org.apache.commons.math4.analysis.MultivariateVectorFunction;
import org.apache.commons.math4.util.JdkMath;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.assertions.AssertionConsumer;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.api.EnabledIf;
import org.junit.jupiter.api.function.Executable;

import static org.junit.jupiter.api.Assertions.*;

class FunctionUtilsTest {

    private static final double A = 1.5;
    private static final double B = 0.5;
    private static final double DELTA = 1.0e-15;

    private static final MultivariateFunction FUNCTION = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return A * point[0] + B * point[1];
        }
    };

    private static final MultivariateVectorFunction GRADIENT = new MultivariateVectorFunction() {
        @Override
        public double[] value(double[] point) {
            return new double[]{A, B};
        }
    };

    private static final MultivariateDifferentiableFunction DIFFERENTIABLE_FUNCTION = FunctionUtils.toDifferentiable(FUNCTION, GRADIENT);

    @ParameterizedTest
    @CsvSource({
        "-1.0, -0.8685170918213303, -0.4946789675484284",
        "-0.99, -0.8656978892675525, -0.4984908657312877",
        "1.0, 0.8685170918213303, 0.4946789675484284"
    })
    void testUnivariateFunction(double t, double expectedValue, double expectedDerivative) {
        DerivativeStructure dsT = new DerivativeStructure(1, 1, 0, t);
        DerivativeStructure y = DIFFERENTIABLE_FUNCTION.value(new DerivativeStructure[]{dsT.sin(), dsT.cos()});
        assertEquals(expectedValue, y.getValue(), DELTA, "Value does not match expected value for t=" + t);
        assertEquals(expectedDerivative, y.getPartialDerivative(1), DELTA, "Derivative does not match expected derivative for t=" + t);
    }

    @ParameterizedTest
    @CsvSource({
        "-1.0, -1.0, -1.0, -1.0, -1.5, -0.5",
        "-0.99, -0.99, -0.99, -0.99, -1.485, -0.495",
        "1.0, 1.0, 1.0, 1.0, 1.5, 0.5"
    })
    void testBivariateFunction(double u, double v, double expectedValue, double partialU, double partialV) {
        DerivativeStructure dsU = new DerivativeStructure(2, 1, 0, u);
        DerivativeStructure dsV = new DerivativeStructure(2, 1, 1, v);
        DerivativeStructure y = DIFFERENTIABLE_FUNCTION.value(new DerivativeStructure[]{dsU, dsV});
        assertEquals(expectedValue, DIFFERENTIABLE_FUNCTION.value(new double[]{u, v}), DELTA, "Value does not match expected value for u=" + u + ", v=" + v);
        assertEquals(expectedValue, y.getValue(), DELTA, "Value does not match expected value for u=" + u + ", v=" + v);
        assertEquals(partialU, y.getPartialDerivative(1, 0), DELTA, "Partial derivative w.r.t. u does not match expected value for u=" + u + ", v=" + v);
        assertEquals(partialV, y.getPartialDerivative(0, 1), DELTA, "Partial derivative w.r.t. v does not match expected value for u=" + u + ", v=" + v);
    }

    @Test
    void testInvalidInput() {
        Executable executable = () -> DIFFERENTIABLE_FUNCTION.value(new DerivativeStructure[]{new DerivativeStructure(1, 3, 0.0), new DerivativeStructure(1, 3, 0.0)});
        assertThrows(NumberIsTooLargeException.class, executable, "Expected NumberIsTooLargeException to be thrown");
    }
}
```

