asserts result: 
 ```java
import org.apache.commons.math4.legacy.fitting.PolynomialCurveFitter;
import org.apache.commons.math4.legacy.fitting.WeightedObservedPoints;
import org.apache.commons.math4.legacy.analysis.polynomials.PolynomialFunction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import java.util.Random;

import static org.apache.commons.math4.legacy.util.JdkMath.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class PolynomialCurveFitterTest {

    private static final long SEED = 64925784252L;
    private static final int MAX_DEGREE = 10;
    private static final double STEP_SIZE = 0.01;
    private static final double TOLERANCE = 1.0e-6;

    @Test
    @EnabledIf("isTestEnabled")
    public void testNoError() {
        final Random randomizer = new Random(SEED);
        for (int degree = 1; degree < MAX_DEGREE; ++degree) {
            final PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
            final PolynomialCurveFitter fitter = PolynomialCurveFitter.create(degree);

            final WeightedObservedPoints obs = new WeightedObservedPoints();
            for (int i = 0; i <= degree; ++i) {
                obs.add(1.0, i, p.value(i));
            }

            final PolynomialFunction fitted = new PolynomialFunction(fitter.fit(obs.toList()));

            for (double x = -1.0; x < 1.0; x += STEP_SIZE) {
                final double error = abs(p.value(x) - fitted.value(x)) / (1.0 + abs(p.value(x)));
                assertEquals(0.0, error, TOLERANCE);
            }
        }
    }

    private boolean isTestEnabled() {
        // Define the condition under which the test should be enabled
        return true; // Always enable the test for this example
    }

    private PolynomialFunction buildRandomPolynomial(int degree, Random randomizer) {
        double[] coefficients = new double[degree + 1];
        for (int i = 0; i <= degree; i++) {
            coefficients[i] = randomizer.nextDouble();
        }
        return new PolynomialFunction(coefficients);
    }
}
```

