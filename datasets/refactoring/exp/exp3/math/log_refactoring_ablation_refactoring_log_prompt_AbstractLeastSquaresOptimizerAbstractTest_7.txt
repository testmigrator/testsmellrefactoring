asserts result: 
 ```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class LinearProblemTest {

    private static final double TOL = 1e-6; // Tolerance for RMS comparison
    private static final double[] START = {0, 1, 2, 3}; // Initial point for optimization

    private Optimizer optimizer;

    @BeforeEach
    public void setUp() {
        optimizer = new Optimizer(); // Initialize the optimizer
    }

    @ParameterizedTest
    @CsvSource({
        "10, 7, 8, 7, 7, 5, 6, 5, 8, 6, 10, 9, 7, 5, 9, 10, 32, 23, 33, 31, 0, 1, 1, 1, 1",
        "10.00, 7.00, 8.10, 7.20, 7.08, 5.04, 6.00, 5.00, 8.00, 5.98, 9.89, 9.00, 6.99, 4.99, 9.00, 9.98, 32, 23, 33, 31, 1e-8, -81, 137, -34, 22"
    })
    public void testIllConditioned(double a1, double a2, double a3, double a4,
                                   double b1, double b2, double b3, double b4,
                                   double c1, double c2, double c3, double c4,
                                   double d1, double d2, double d3, double d4,
                                   double e1, double e2, double e3, double e4,
                                   double expectedRMS, double x1, double x2, double x3, double x4) {

        LinearProblem problem = new LinearProblem(new double[][]{
            {a1, a2, a3, a4},
            {b1, b2, b3, b4},
            {c1, c2, c3, c4},
            {d1, d2, d3, d4}
        }, new double[]{e1, e2, e3, e4});

        Optimum optimum = optimizer.optimize(problem.getBuilder().start(START).build());

        assertEquals(expectedRMS, optimum.getRMS(), TOL);
        assertEquals(x1, optimum.getPoint()[0], TOL);
        assertEquals(x2, optimum.getPoint()[1], TOL);
        assertEquals(x3, optimum.getPoint()[2], TOL);
        assertEquals(x4, optimum.getPoint()[3], TOL);
    }
}
```

