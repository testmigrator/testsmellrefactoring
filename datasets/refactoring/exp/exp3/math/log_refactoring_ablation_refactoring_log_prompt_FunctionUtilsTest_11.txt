asserts result: 
 ```java
import org.apache.commons.math4.analysis.function.UnivariateFunction;
import org.apache.commons.math4.analysis.function.FunctionUtils;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.util.JdkMath;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.assertions.AssertionConsumer;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;

public class FunctionUtilsTest {

    private static final double TOLERANCE = 1.0e-15;
    private static final double START_VALUE = -1.0;
    private static final double END_VALUE = 1.0;
    private static final double STEP_SIZE = 0.01;

    @ParameterizedTest
    @CsvSource({
        "-1.0, 1.0, -1.7320508075688772, -1.0",
        "0.0, 0.0, 0.0, 2.0",
        "1.0, 1.0, 1.7320508075688772, -1.0"
    })
    public void testToDifferentiableUnivariate(double t, double expectedValue, double expectedFirstDerivative, double expectedSecondDerivative) {
        UnivariateFunction f0 = x -> x * x;
        UnivariateFunction f1 = x -> 2 * x;
        UnivariateFunction f2 = x -> 2;
        UnivariateDifferentiableFunction f = FunctionUtils.toDifferentiable(f0, f1, f2);

        DerivativeStructure dsT = new DerivativeStructure(1, 2, 0, t);
        DerivativeStructure y = f.value(dsT.sin());

        assertEquals(expectedValue, f.value(JdkMath.sin(t)), TOLERANCE, "Value should match expected value");
        assertEquals(expectedValue, y.getValue(), TOLERANCE, "Value should match expected value");
        assertEquals(expectedFirstDerivative, y.getPartialDerivative(1), TOLERANCE, "First derivative should match expected value");
        assertEquals(expectedSecondDerivative, y.getPartialDerivative(2), TOLERANCE, "Second derivative should match expected value");
    }

    @Test
    public void testToDifferentiableUnivariateException() {
        UnivariateFunction f0 = x -> x * x;
        UnivariateFunction f1 = x -> 2 * x;
        UnivariateFunction f2 = x -> 2;
        UnivariateDifferentiableFunction f = FunctionUtils.toDifferentiable(f0, f1, f2);

        assertThrows(NumberIsTooLargeException.class, () -> {
            f.value(new DerivativeStructure(1, 3, 0.0));
        }, "Expected NumberIsTooLargeException to be thrown");

        try {
            f.value(new DerivativeStructure(1, 3, 0.0));
        } catch (NumberIsTooLargeException e) {
            assertEquals(2, e.getMax(), "Max should be 2");
            assertEquals(3, e.getArgument(), "Argument should be 3");
        }
    }
}
```

