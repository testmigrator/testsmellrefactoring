asserts result: 
 ```java
import org.apache.commons.math4.fitting.GaussianCurveFitter;
import org.apache.commons.math4.fitting.WeightedObservedPoints;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Math519Test {

    private static final double SIGMA_TOLERANCE = 1e-7;
    private static final double MEAN_TOLERANCE = 1e-8;
    private static final double EXPECTED_SIGMA = 53.1572792;
    private static final double EXPECTED_MEAN = 5.75214622;

    @Test
    @EnabledIf("isNegativeSigmaHandlingEnabled")
    public void testMath519() {
        final double[] data = {
            1.1143831578403364E-29, 4.95281403484594E-28, 1.1171347211930288E-26, 1.7044813962636277E-25,
            1.9784716574832164E-24, 1.8630236407866774E-23, 1.4820532905097742E-22, 1.0241963854632831E-21,
            6.275077366673128E-21, 3.461808994532493E-20, 1.7407124684715706E-19, 8.056687953553974E-19,
            3.460193945992071E-18, 1.3883326374011525E-17, 5.233894983671116E-17, 1.8630791465263745E-16,
            6.288759227922111E-16, 2.0204433920597856E-15, 6.198768938576155E-15, 1.821419346860626E-14,
            5.139176445538471E-14, 1.3956427429045787E-13, 3.655705706448139E-13, 9.253753324779779E-13,
            2.267636001476696E-12, 5.3880460095836855E-12, 1.2431632654852931E-11
        };

        final WeightedObservedPoints obs = new WeightedObservedPoints();
        for (int i = 0; i < data.length; i++) {
            obs.add(i, data[i]);
        }
        final double[] p = GaussianCurveFitter.create().fit(obs.toList());

        assertEquals(EXPECTED_SIGMA, p[1], SIGMA_TOLERANCE);
        assertEquals(EXPECTED_MEAN, p[2], MEAN_TOLERANCE);
    }

    public boolean isNegativeSigmaHandlingEnabled() {
        // This method should contain the logic to determine if the test should be enabled.
        // For example, it could check a system property or environment variable.
        // Here we always return true for simplicity.
        return true;
    }
}
```

