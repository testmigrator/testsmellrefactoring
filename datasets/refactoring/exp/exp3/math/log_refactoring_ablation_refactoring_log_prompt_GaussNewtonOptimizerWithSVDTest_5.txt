asserts result: 
 ```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class LinearProblemTest {

    private static final double TOL = 1e-6;

    @Test
    public void testNonInvertible() {
        /*  SVD can compute a solution to singular problems.
        *  In this case the target vector, b, is not in the
        *  span of the jacobian matrix, A. The closest point
        *  to b on the plane spanned by A is computed.
        */
        LinearProblem problem = new LinearProblem(new double[][]{
            {1, 2, -3},
            {2, 1, 3},
            {-3, 0, -9}
        }, new double[]{1, 1, 1});

        Optimum optimum = optimizer.optimize(problem.getBuilder().build());

        Plane span = Planes.fromPoints(Vector3D.ZERO, Vector3D.of(1, 2, -3), Vector3D.of(2, 1, 0),
                Precision.doubleEquivalenceOfEpsilon(TOL));
        double expected = JdkMath.abs(span.offset(Vector3D.of(1, 1, 1)));
        double actual = optimum.getResiduals().getNorm();

        // verify
        assertEquals(expected, actual, TOL);
    }
}
```

### Explanation:
1. **Removed `throws Exception`**: The original test method had a `throws Exception` clause, which is a code smell known as "Exception_Catching_Throwing." This has been removed.
2. **Used JUnit 5 Assertions**: Instead of catching exceptions manually, the test uses `assertThrows` for exception handling if needed. However, in this specific test, no exceptions are expected, so `assertEquals` is used to verify the results.
3. **Ensured Test Intent**: The test still verifies that the SVD computation correctly finds the closest point to the target vector on the plane spanned by the Jacobian matrix.

