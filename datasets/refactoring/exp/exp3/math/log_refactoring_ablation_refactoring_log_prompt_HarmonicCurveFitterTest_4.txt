asserts result: 
 ```java
import org.apache.commons.math4.legacy.fitting.HarmonicCurveFitter;
import org.apache.commons.math4.legacy.fitting.WeightedObservedPoints;
import org.apache.commons.math4.legacy.fitting.leastsquares.SimpleCurveFitter;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class HarmonicCurveFitterTest {

    private static final long SEED = 64925784252L;
    private static final double AMPLITUDE = 0.2;
    private static final double ANGULAR_FREQUENCY = 3.4;
    private static final double PHASE = 4.1;
    private static final int SIZE = 100;
    private static final double STEP = 0.1;
    private static final double NOISE_SCALE = 0.01;
    private static final double TOLERANCE_AMPLITUDE = 7.6e-4;
    private static final double TOLERANCE_ANGULAR_FREQUENCY = 3.5e-3;
    private static final double TOLERANCE_PHASE = 1.5e-2;

    @Test
    @EnabledIf("isTestConditionMet")
    public void testUnsorted() {
        Random randomizer = new Random(SEED);
        HarmonicOscillator f = new HarmonicOscillator(AMPLITUDE, ANGULAR_FREQUENCY, PHASE);

        double[] xTab = new double[SIZE];
        double[] yTab = new double[SIZE];

        // Build a regularly spaced array of measurements.
        for (int i = 0; i < SIZE; i++) {
            xTab[i] = i * STEP;
            yTab[i] = f.value(xTab[i]) + NOISE_SCALE * randomizer.nextGaussian();
        }

        // Shuffle the array
        shuffleArray(randomizer, xTab, yTab);

        // Pass it to the fitter.
        WeightedObservedPoints points = new WeightedObservedPoints();
        for (int i = 0; i < SIZE; ++i) {
            points.add(1, xTab[i], yTab[i]);
        }

        SimpleCurveFitter fitter = HarmonicCurveFitter.create();
        double[] fitted = fitter.fit(points.toList());

        assertEquals(AMPLITUDE, fitted[0], TOLERANCE_AMPLITUDE);
        assertEquals(ANGULAR_FREQUENCY, fitted[1], TOLERANCE_ANGULAR_FREQUENCY);
        assertEquals(PHASE, Angle.Rad.WITHIN_0_AND_2PI.applyAsDouble(fitted[2]), TOLERANCE_PHASE);
    }

    private boolean isTestConditionMet() {
        // Define your test condition here
        return true;
    }

    private void shuffleArray(Random randomizer, double[] xTab, double[] yTab) {
        for (int i = 0; i < xTab.length; i++) {
            int i1 = randomizer.nextInt(xTab.length);
            int i2 = randomizer.nextInt(xTab.length);
            double xTmp = xTab[i1];
            double yTmp = yTab[i1];
            xTab[i1] = xTab[i2];
            yTab[i1] = yTab[i2];
            xTab[i2] = xTmp;
            yTab[i2] = yTmp;
        }
    }
}
```

