asserts result: 
 ```java
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.function.Sin;
import org.apache.commons.math4.legacy.analysis.integration.IterativeLegendreGaussIntegrator;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.runner.RunWith;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.apache.commons.math.JdkMath.max;
import static org.apache.commons.math.JdkMath.abs;
import static org.apache.commons.math.JdkMath.PI;

@RunWith(JUnitPlatform.class)
public class SinFunctionIntegratorTest {

    private static final UnivariateFunction SIN_FUNCTION = new Sin();
    private static final BaseAbstractUnivariateIntegrator INTEGRATOR = 
        new IterativeLegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);

    @ParameterizedTest
    @MethodSource("provideIntegrationCases")
    public void testSinFunction(double min, double max, double expected) {
        double tolerance = max(INTEGRATOR.getAbsoluteAccuracy(), abs(expected * INTEGRATOR.getRelativeAccuracy()));
        double result = INTEGRATOR.integrate(10000, SIN_FUNCTION, min, max);
        assertEquals(expected, result, tolerance);
    }

    private static Stream<Arguments> provideIntegrationCases() {
        return Stream.of(
            Arguments.of(0, PI, 2),
            Arguments.of(-PI / 3, 0, -0.5)
        );
    }
}
```

