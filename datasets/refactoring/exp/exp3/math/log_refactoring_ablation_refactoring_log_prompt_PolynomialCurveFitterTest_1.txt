asserts result: 
 ```java
import org.apache.commons.math4.distribution.ContinuousDistribution;
import org.apache.commons.math4.distribution.UniformContinuousDistribution;
import org.apache.commons.math4.distribution.RandomSource;
import org.apache.commons.math4.fitting.PolynomialCurveFitter;
import org.apache.commons.math4.fitting.SimpleCurveFitter;
import org.apache.commons.math4.fitting.WeightedObservedPoints;
import org.apache.commons.math4.analysis.polynomials.PolynomialFunction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIf;

import static org.apache.commons.math4.testutils.TestUtils.assertEquals;

public class PolynomialCurveFitterTest {

    private static final long SEED = 64925784252L;
    private static final double[] COEFFICIENTS = { 12.9, -3.4, 2.1 };
    private static final int SAMPLE_SIZE = 100;
    private static final double TOLERANCE = 1e-12;
    private static final double[] INITIAL_GUESSES = { -1e-20, 3e15, -5e25 };

    @EnabledIf("isFitPossible")
    @Test
    public void testFitCoefficients() {
        final ContinuousDistribution.Sampler rng = UniformContinuousDistribution.of(-100, 100).createSampler(RandomSource.WELL_512_A.create(SEED));
        final PolynomialFunction f = new PolynomialFunction(COEFFICIENTS);

        // Collect data from a known polynomial.
        final WeightedObservedPoints obs = collectData(rng, f, SAMPLE_SIZE);

        // Start fit from initial guesses that are far from the optimal values.
        final SimpleCurveFitter fitter = PolynomialCurveFitter.create(0).withStartPoint(INITIAL_GUESSES);
        final double[] best = fitter.fit(obs.toList());

        assertEquals("best != coeff", COEFFICIENTS, best, TOLERANCE);
    }

    private boolean isFitPossible() {
        return true; // Placeholder for actual condition check
    }

    private WeightedObservedPoints collectData(ContinuousDistribution.Sampler rng, PolynomialFunction f, int sampleSize) {
        final WeightedObservedPoints obs = new WeightedObservedPoints();
        for (int i = 0; i < sampleSize; i++) {
            final double x = rng.sample();
            obs.add(x, f.value(x));
        }
        return obs;
    }
}
```

