asserts result: 
 ```java
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.api.Assertions;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.utils.IOUtils;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ParameterizedTest
@MethodSource("org.apache.commons.compress.changes.TestFixtures#getZipOutputArchiveNames")
@SuppressWarnings({ "unchecked", "rawtypes" })
public void testAddAlreadyExistingWithReplaceTrue(final String archiverName) throws Exception {
    final Path inputPath = createArchive(archiverName);
    final Path result = Files.createTempFile("test", "." + archiverName);

    try (InputStream inputStream = Files.newInputStream(inputPath);
         ArchiveInputStream archiveInputStream = factory.createArchiveInputStream(archiverName, inputStream);
         OutputStream newOutputStream = Files.newOutputStream(result);
         ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, newOutputStream);
         InputStream csInputStream = Files.newInputStream(getPath("test.txt"))) {

        setLongFileMode(archiveOutputStream);
        final ChangeSet changeSet = new ChangeSet();
        final ArchiveEntry entry = new ZipArchiveEntry("testdata/test1.xml");
        changeSet.add(entry, csInputStream, true);

        final ChangeSetResults results = new ChangeSetPerformer(changeSet).perform(archiveInputStream, archiveOutputStream);
        assertTrue(results.getAddedFromChangeSet().contains("testdata/test1.xml"));

    } catch (IOException e) {
        Assertions.fail("IOException should not be thrown", e);
    }

    checkArchiveContent(result, archiveList);
}

@BeforeEach
public void setUp() {
    // Setup code if needed
}

@AfterEach
public void tearDown() throws IOException {
    forceDelete(result);
}

private Path createArchive(String archiverName) throws IOException {
    // Implementation to create an archive
    return Paths.get("path/to/archive." + archiverName);
}

private Path getPath(String fileName) {
    // Implementation to get the path of the file
    return Paths.get("path/to/" + fileName);
}

private void setLongFileMode(ArchiveOutputStream archiveOutputStream) {
    // Implementation to set long file mode
}

private void checkArchiveContent(Path result, List<String> expectedContent) throws IOException {
    // Implementation to check the content of the archive
}

private void forceDelete(Path path) throws IOException {
    // Implementation to delete the file
    Files.delete(path);
}
```

