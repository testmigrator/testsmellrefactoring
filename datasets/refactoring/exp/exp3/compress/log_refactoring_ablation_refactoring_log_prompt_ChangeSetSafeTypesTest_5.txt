asserts result: 
 ```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.io.TempDir;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class RefactoredTest {

    @TempDir
    public Path tempDir;

    private Path input;
    private File result;
    private File file1;

    @BeforeEach
    void setUp() throws IOException {
        input = createArchive("zip");
        result = createTempFile(tempDir, "test", ".zip");
        file1 = getFile(tempDir, "test.txt");
    }

    @ParameterizedTest
    @MethodSource("org.apache.commons.compress.changes.TestFixtures#getOutputArchiveNames")
    public void testChangeSetResults(final String archiverName) throws Exception {
        try (InputStream inputStream = Files.newInputStream(input);
             ArchiveInputStream<E> ais = createArchiveInputStream(archiverName, inputStream);
             OutputStream outputStream = Files.newOutputStream(result.toPath());
             ArchiveOutputStream<E> out = createArchiveOutputStream(archiverName, outputStream);
             InputStream csInputStream = Files.newInputStream(file1.toPath())) {

            final ChangeSet<E> changeSet = createChangeSet();
            changeSet.deleteDir("bla");
            archiveListDeleteDir("bla");

            // Add a file
            final E entry = out.createArchiveEntry(file1, "bla/test.txt");
            changeSet.add(entry, csInputStream);
            archiveList.add("bla/test.txt");

            final ChangeSetResults results = new ChangeSetPerformer<>(changeSet).perform(ais, out);

            // Checks
            assertEquals(1, results.getAddedFromChangeSet().size(), "Expected 1 added file from change set");
            assertEquals("bla/test.txt", results.getAddedFromChangeSet().iterator().next(), "Expected 'bla/test.txt' to be added from change set");
            assertEquals(3, results.getDeleted().size(), "Expected 3 deleted files");
            assertTrue(results.getDeleted().contains("bla/test4.xml"), "Expected 'bla/test4.xml' to be deleted");
            assertTrue(results.getDeleted().contains("bla/test5.xml"), "Expected 'bla/test5.xml' to be deleted");
            assertTrue(results.getDeleted().contains("bla/blubber/test6.xml"), "Expected 'bla/blubber/test6.xml' to be deleted");
            assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"), "Expected 'testdata/test1.xml' to be added from stream");
            assertTrue(results.getAddedFromStream().contains("testdata/test2.xml"), "Expected 'testdata/test2.xml' to be added from stream");
            assertTrue(results.getAddedFromStream().contains("test/test3.xml"), "Expected 'test/test3.xml' to be added from stream");
            assertTrue(results.getAddedFromStream().contains("test.txt"), "Expected 'test.txt' to be added from stream");
            assertTrue(results.getAddedFromStream().contains("something/bla"), "Expected 'something/bla' to be added from stream");
            assertTrue(results.getAddedFromStream().contains("test with spaces.txt"), "Expected 'test with spaces.txt' to be added from stream");
            assertEquals(6, results.getAddedFromStream().size(), "Expected 6 added files from stream");
        }
        checkArchiveContent(result, archiveList);
    }

    private Path createTempFile(Path tempDir, String prefix, String suffix) throws IOException {
        return Files.createTempFile(tempDir, prefix, suffix);
    }

    private File getFile(Path tempDir, String fileName) throws IOException {
        Path filePath = tempDir.resolve(fileName);
        Files.write(filePath, "Test content".getBytes());
        assertTrue(Files.exists(filePath), "File should exist: " + filePath);
        return filePath.toFile();
    }

    private Path createArchive(String archiverName) throws Exception {
        // Implementation to create an archive
        // This is a placeholder for the actual implementation
        return null;
    }

    private <E> ArchiveInputStream<E> createArchiveInputStream(String archiverName, InputStream inputStream) throws Exception {
        // Implementation to create an archive input stream
        // This is a placeholder for the actual implementation
        return null;
    }

    private <E> ArchiveOutputStream<E> createArchiveOutputStream(String archiverName, OutputStream outputStream) throws Exception {
        // Implementation to create an archive output stream
        // This is a placeholder for the actual implementation
        return null;
    }

    private <E> ChangeSet<E> createChangeSet() {
        // Implementation to create a change set
        // This is a placeholder for the actual implementation
        return null;
    }

    private void archiveListDeleteDir(String dir) {
        // Implementation to delete a directory from the archive list
        // This is a placeholder for the actual implementation
    }

    private void checkArchiveContent(File result, List<String> archiveList) throws Exception {
        // Implementation to check the archive content
        // This is a placeholder for the actual implementation
    }
}
```

