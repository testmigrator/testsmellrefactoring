asserts result: 
 ```java
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.MalformedJsonException;
import com.google.gson.stream.Strictness;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import java.io.IOException;
import java.io.StringReader;

class JsonReaderTest {

    @Test
    public void testUnterminatedObject_BeginObject() throws IOException {
        JsonReader reader = new JsonReader(new StringReader("{\"a\":\"android\"x"));
        reader.setStrictness(Strictness.LENIENT);
        reader.beginObject();
        assertThat(reader.nextName(), equalTo("a"), "Expected name to be 'a'");
    }

    @Test
    public void testUnterminatedObject_NextString() throws IOException {
        JsonReader reader = new JsonReader(new StringReader("{\"a\":\"android\"x"));
        reader.setStrictness(Strictness.LENIENT);
        reader.beginObject();
        reader.nextName(); // Skip the name
        assertThat(reader.nextString(), equalTo("android"), "Expected value to be 'android'");
    }

    @Test
    public void testUnterminatedObject_PeekException() throws IOException {
        JsonReader reader = new JsonReader(new StringReader("{\"a\":\"android\"x"));
        reader.setStrictness(Strictness.LENIENT);
        reader.beginObject();
        reader.nextName(); // Skip the name
        reader.nextString(); // Skip the value

        var e = assertThrows(MalformedJsonException.class, () -> reader.peek(),
                "Expected MalformedJsonException to be thrown due to unterminated object");

        assertThat(e.getMessage(), equalTo(
                "Unterminated object at line 1 column 16 path $.a\n" +
                        "See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json"),
                "Expected specific error message for unterminated object");
    }
}
```

