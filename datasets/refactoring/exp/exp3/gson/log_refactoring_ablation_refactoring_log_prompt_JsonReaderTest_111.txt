asserts result: 
 ```java
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.google.gson.stream.JsonReader;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.StringReader;

public class JsonReaderTest {

    private static final int DEFAULT_NESTING_LIMIT = JsonReader.DEFAULT_NESTING_LIMIT;
    private JsonReader reader;

    @BeforeEach
    public void setUp() throws IOException {
        String json = repeat('[', DEFAULT_NESTING_LIMIT + 1);
        reader = new JsonReader(new StringReader(json));
    }

    @Test
    public void testNestingLimitDefault() {
        // Verify the default nesting limit
        assertEquals(DEFAULT_NESTING_LIMIT, reader.getNestingLimit(), "Nesting limit should be set to default");

        // Begin arrays up to the default limit
        for (int i = 0; i < DEFAULT_NESTING_LIMIT; i++) {
            reader.beginArray();
        }

        // Verify that attempting to exceed the nesting limit throws MalformedJsonException
        MalformedJsonException exception = assertThrows(MalformedJsonException.class, () -> reader.beginArray());
        assertEquals("Nesting limit " + DEFAULT_NESTING_LIMIT + " reached at line 1 column " + (DEFAULT_NESTING_LIMIT + 2) + " path $" + "[0]".repeat(DEFAULT_NESTING_LIMIT), exception.getMessage(), "Exception message should match expected message");
    }

    private String repeat(String str, int times) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < times; i++) {
            sb.append(str);
        }
        return sb.toString();
    }
}
```

