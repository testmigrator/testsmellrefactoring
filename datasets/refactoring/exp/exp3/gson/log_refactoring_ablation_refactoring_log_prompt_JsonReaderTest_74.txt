asserts result: 
 ```java
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.MalformedJsonException;
import org.junit.jupiter.api.Test;

class JsonReaderTest {

    @Test
    public void testStrictCommentsWithSkipValueSingleLineComment() throws IOException {
        JsonReader reader = new JsonReader(new StringReader("// comment \n true"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertEquals("line 1 column 3 path $[0]", e.getMessage(), "Expected error message for single line comment");
    }

    @Test
    public void testStrictCommentsWithSkipValueHashComment() throws IOException {
        JsonReader reader = new JsonReader(new StringReader("# comment \n true"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertEquals("line 1 column 3 path $[0]", e.getMessage(), "Expected error message for hash comment");
    }

    @Test
    public void testStrictCommentsWithSkipValueBlockComment() throws IOException {
        JsonReader reader = new JsonReader(new StringReader("/* comment */ true"));
        reader.beginArray();
        MalformedJsonException e = assertThrows(MalformedJsonException.class, () -> reader.skipValue());
        assertEquals("line 1 column 3 path $[0]", e.getMessage(), "Expected error message for block comment");
    }
}
```

