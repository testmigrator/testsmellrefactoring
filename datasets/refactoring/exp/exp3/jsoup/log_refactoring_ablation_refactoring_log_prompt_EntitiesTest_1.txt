asserts result: 
 ```java
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.OutputSettings;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class EntitiesTest {

    private static final String TEXT = "Hello &<> Å å π 新 there ¾ © »";

    @Test
    public void testEscapeAsciiBase() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("ascii").escapeMode(OutputSettings.EscapeMode.base));
        assertEquals("ASCII base escaping", "Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escaped);
    }

    @Test
    public void testEscapeAsciiExtended() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("ascii").escapeMode(OutputSettings.EscapeMode.extended));
        assertEquals("ASCII extended escaping", "Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escaped);
    }

    @Test
    public void testEscapeAsciiXhtml() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("ascii").escapeMode(OutputSettings.EscapeMode.xhtml));
        assertEquals("ASCII xhtml escaping", "Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escaped);
    }

    @Test
    public void testEscapeUtf8Extended() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("UTF-8").escapeMode(OutputSettings.EscapeMode.extended));
        assertEquals("UTF-8 extended escaping", "Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escaped);
    }

    @Test
    public void testEscapeUtf8Xhtml() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("UTF-8").escapeMode(OutputSettings.EscapeMode.xhtml));
        assertEquals("UTF-8 xhtml escaping", "Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escaped);
    }

    @Test
    public void testUnescapeAsciiBase() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("ascii").escapeMode(OutputSettings.EscapeMode.base));
        assertEquals("ASCII base unescaping", TEXT, Entities.unescape(escaped));
    }

    @Test
    public void testUnescapeAsciiExtended() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("ascii").escapeMode(OutputSettings.EscapeMode.extended));
        assertEquals("ASCII extended unescaping", TEXT, Entities.unescape(escaped));
    }

    @Test
    public void testUnescapeAsciiXhtml() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("ascii").escapeMode(OutputSettings.EscapeMode.xhtml));
        assertEquals("ASCII xhtml unescaping", TEXT, Entities.unescape(escaped));
    }

    @Test
    public void testUnescapeUtf8Extended() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("UTF-8").escapeMode(OutputSettings.EscapeMode.extended));
        assertEquals("UTF-8 extended unescaping", TEXT, Entities.unescape(escaped));
    }

    @Test
    public void testUnescapeUtf8Xhtml() {
        String escaped = Entities.escape(TEXT, new OutputSettings().charset("UTF-8").escapeMode(OutputSettings.EscapeMode.xhtml));
        assertEquals("UTF-8 xhtml unescaping", TEXT, Entities.unescape(escaped));
    }
}
```

