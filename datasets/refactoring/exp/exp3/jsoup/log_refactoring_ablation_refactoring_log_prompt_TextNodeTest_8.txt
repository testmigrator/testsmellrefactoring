asserts result: 
 ```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;

class TextNodeTest {

    private TextNode x;

    @BeforeEach
    void setUp() {
        x = new TextNode("zzz");
    }

    @Test
    void testCloneCreatesDistinctInstance() {
        TextNode y = x.clone();
        assertNotSame(x, y, "Cloned object should be a distinct instance.");
    }

    @Test
    void testClonePreservesOuterHtml() {
        TextNode y = x.clone();
        assertEquals(x.outerHtml(), y.outerHtml(), "Cloned object should have the same outer HTML as the original.");
    }

    @Test
    void testTextChangeInCloneDoesNotAffectOriginal() {
        TextNode y = x.clone();
        y.text("yyy");
        assertNotEquals(x.outerHtml(), y.outerHtml(), "Changing text in cloned object should not affect the original's outer HTML.");
        assertEquals("zzz", x.text(), "Original text should remain unchanged after modifying the clone.");
    }

    @ParameterizedTest
    @ValueSource(strings = {"xxx", "yyy"})
    void testTextChangeInCloneAndOriginal(String newText) {
        TextNode y = x.clone();
        y.text(newText);
        assertEquals("zzz", x.text(), "Original text should remain unchanged after modifying the clone.");
        assertEquals(newText, y.text(), "Cloned object should reflect the new text value.");
    }
}
```

