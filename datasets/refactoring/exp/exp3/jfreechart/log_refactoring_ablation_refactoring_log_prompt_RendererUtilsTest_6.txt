asserts result: 
 ```java
import org.jfree.data.xy.DefaultXYDataset;
import static org.junit.Assert.assertEquals;

public class RendererUtilsTest {

    private static final double TOLERANCE = 0.0001;

    @Test
    public void testFindLiveItemsUpperBound_NoItems() {
        var dataset = createDescendingDataset();
        dataset.addSeries("S1", new double[][] {{}, {}});
        assertEquals("No items should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 0, 10.0, 11.0), TOLERANCE);
    }

    @Test
    public void testFindLiveItemsUpperBound_OneItem() {
        var dataset = createDescendingDataset();
        dataset.addSeries("S2", new double[][] {{1.0}, {9.9}});
        assertEquals("One item within range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 1, 0.0, 1.0), TOLERANCE);
        assertEquals("One item outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 1, 1.1, 2.0), TOLERANCE);
    }

    @Test
    public void testFindLiveItemsUpperBound_TwoItems() {
        var dataset = createDescendingDataset();
        dataset.addSeries("S3", new double[][] {{2.0, 1.0}, {9.9, 9.9}});
        assertEquals("Two items, first within range should return 1", 1, RendererUtils.findLiveItemsUpperBound(dataset, 2, 0.1, 0.5), TOLERANCE);
        assertEquals("Two items, second within range should return 1", 1, RendererUtils.findLiveItemsUpperBound(dataset, 2, 0.1, 1.0), TOLERANCE);
        assertEquals("Two items, both outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 2, 1.1, 2.0), TOLERANCE);
        assertEquals("Two items, both outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 2, 2.2, 3.0), TOLERANCE);
        assertEquals("Two items, both outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 2, 3.3, 4.0), TOLERANCE);
    }

    @Test
    public void testFindLiveItemsUpperBound_ThreeItems() {
        var dataset = createDescendingDataset();
        dataset.addSeries("S4", new double[][] {{3.0, 2.0, 1.0}, {9.9, 9.9, 9.9}});
        assertEquals("Three items, first within range should return 2", 2, RendererUtils.findLiveItemsUpperBound(dataset, 3, 0.0, 1.0), TOLERANCE);
        assertEquals("Three items, second within range should return 2", 2, RendererUtils.findLiveItemsUpperBound(dataset, 3, 1.0, 2.0), TOLERANCE);
        assertEquals("Three items, third within range should return 1", 1, RendererUtils.findLiveItemsUpperBound(dataset, 3, 2.0, 3.0), TOLERANCE);
        assertEquals("Three items, all outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 3, 3.0, 4.0), TOLERANCE);
    }

    @Test
    public void testFindLiveItemsUpperBound_FourItems() {
        var dataset = createDescendingDataset();
        dataset.addSeries("S5", new double[][] {{4.0, 3.0, 2.0, 1.0}, {9.9, 9.9, 9.9, 9.9}});
        assertEquals("Four items, first within range should return 3", 3, RendererUtils.findLiveItemsUpperBound(dataset, 4, 0.1, 0.5), TOLERANCE);
        assertEquals("Four items, second within range should return 3", 3, RendererUtils.findLiveItemsUpperBound(dataset, 4, 0.1, 1.0), TOLERANCE);
        assertEquals("Four items, third within range should return 2", 2, RendererUtils.findLiveItemsUpperBound(dataset, 4, 1.1, 2.0), TOLERANCE);
        assertEquals("Four items, fourth within range should return 1", 1, RendererUtils.findLiveItemsUpperBound(dataset, 4, 2.2, 3.0), TOLERANCE);
        assertEquals("Four items, all outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 4, 3.3, 4.0), TOLERANCE);
        assertEquals("Four items, all outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 4, 4.4, 5.0), TOLERANCE);
    }

    @Test
    public void testFindLiveItemsUpperBound_RepeatingItems() {
        var dataset = createDescendingDataset();
        dataset.addSeries("S6", new double[][] {{3.0, 2.0, 2.0, 2.0, 1.0}, {9.9, 9.9, 9.9, 9.9, 9.9}});
        assertEquals("Repeating items, all within range should return 4", 4, RendererUtils.findLiveItemsUpperBound(dataset, 5, 0.0, 5.0), TOLERANCE);
        assertEquals("Repeating items, some within range should return 4", 4, RendererUtils.findLiveItemsUpperBound(dataset, 5, 1.0, 5.0), TOLERANCE);
        assertEquals("Repeating items, some within range should return 3", 3, RendererUtils.findLiveItemsUpperBound(dataset, 5, 2.0, 5.0), TOLERANCE);
        assertEquals("Repeating items, all outside range should return 0", 0, RendererUtils.findLiveItemsUpperBound(dataset, 5, 3.0, 5.0), TOLERANCE);
    }

    private DefaultXYDataset<String> createDescendingDataset() {
        return new DefaultXYDataset<String>() {
            @Override
            public DomainOrder getDomainOrder() {
                return DomainOrder.DESCENDING;
            }
        };
    }
}
```

