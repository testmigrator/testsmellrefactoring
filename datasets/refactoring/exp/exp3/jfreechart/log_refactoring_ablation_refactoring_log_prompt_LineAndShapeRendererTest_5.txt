asserts result: 
 ```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;

class LineAndShapeRendererTest {

    private LineAndShapeRenderer renderer;

    @BeforeEach
    void setUp() {
        renderer = new LineAndShapeRenderer();
    }

    @Test
    void testFindRangeBoundsWithNullDataset() {
        assertNull(renderer.findRangeBounds(null), "Expected null when dataset is null");
    }

    @Test
    void testFindRangeBoundsWithEmptyDataset() {
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        assertNull(renderer.findRangeBounds(dataset), "Expected null when dataset is empty");
    }

    @ParameterizedTest
    @CsvSource({
        "1.0, 1.0, 1.0, 1.0",
        "-2.0, 1.0, -2.0, 1.0",
        "-6.0, 1.0, -6.0, 1.0"
    })
    void testFindRangeBoundsWithValues(double value, double expectedMin, double expectedMax) {
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        dataset.addValue(value, "R1", "C1");

        if (value == -6.0) {
            dataset.addValue(-2.0, "R1", "C2");
            dataset.addValue(null, "R1", "C3");
            renderer.setSeriesVisible(1, Boolean.FALSE);
        }

        assertEquals(new Range(expectedMin, expectedMax), renderer.findRangeBounds(dataset),
                String.format("Expected range %s when adding value %f", new Range(expectedMin, expectedMax), value));
    }
}
```

