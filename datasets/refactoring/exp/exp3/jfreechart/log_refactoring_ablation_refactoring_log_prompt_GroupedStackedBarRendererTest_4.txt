asserts result: 
 ```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;

class GroupedStackedBarRendererTest {

    private GroupedStackedBarRenderer renderer;
    private DefaultCategoryDataset<String, String> dataset;
    private KeyToGroupMap<String, String> groupMap;

    @BeforeEach
    void setUp() {
        renderer = new GroupedStackedBarRenderer();
        dataset = new DefaultCategoryDataset<>();
        groupMap = new KeyToGroupMap<>("G1");
        groupMap.mapKeyToGroup("R1", "G1");
        groupMap.mapKeyToGroup("R2", "G1");
        groupMap.mapKeyToGroup("R3", "G2");
        renderer.setSeriesToGroupMap(groupMap);
    }

    @Test
    void testFindRangeBoundsWithNullDataset() {
        assertNull(renderer.findRangeBounds(null), "Expected null range for null dataset");
    }

    @Test
    void testFindRangeBoundsWithEmptyDataset() {
        assertNull(renderer.findRangeBounds(dataset), "Expected null range for empty dataset");
    }

    @ParameterizedTest
    @CsvSource({
        "1.0,  R1, C1, 0.0, 1.0",
        "-2.0, R1, C2, -2.0, 1.0",
        "null, R1, C3, -2.0, 1.0",
        "0.5,  R3, C1, -2.0, 1.0",
        "5.0,  R3, C2, -2.0, 5.0"
    })
    void testFindRangeBoundsWithValues(Double value, String rowKey, String columnKey, double expectedLowerBound, double expectedUpperBound) {
        if (value != null) {
            dataset.addValue(value, rowKey, columnKey);
        } else {
            dataset.addValue(null, rowKey, columnKey);
        }
        assertEquals(new Range(expectedLowerBound, expectedUpperBound), renderer.findRangeBounds(dataset),
                String.format("Expected range [%f, %f] for dataset with value %s at (%s, %s)", expectedLowerBound, expectedUpperBound, value, rowKey, columnKey));
    }
}
```

