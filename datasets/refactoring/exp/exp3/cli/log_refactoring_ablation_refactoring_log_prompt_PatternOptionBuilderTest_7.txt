asserts result: 
 ```java
import org.apache.commons.cli.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.io.File;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

class CommandLineParserTest {

    private static final long EXPECTED_DATE_TIME = 1023400137000L;
    private static final String EXPECTED_DATE_STRING = "Fri Mar 29 08:28:57 GMT 2002";
    private static final String DATE_FORMAT_PATTERN = "EEE MMM dd HH:mm:ss zzz yyyy";

    @Test
    void testSimplePattern() throws Exception {
        final Options options = PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/m*z#");
        final Date expectedDate = new Date(EXPECTED_DATE_TIME);
        final DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setTimeZone(new SimpleTimeZone(0, "GMT"));

        final String[] args = {"-c", "-a", "foo", "-b", "java.util.Vector", "-e", "build.xml", "-f", "java.util.Calendar", "-n", "4.5", "-t",
                "https://commons.apache.org", "-z", dateFormat.format(expectedDate), "-m", "test*"};

        final CommandLineParser parser = new PosixParser();
        final CommandLine line = parser.parse(options, args);

        assertEquals("foo", line.getOptionValue("a"), "Option 'a' should be 'foo'");
        assertEquals("foo", line.getOptionObject("a"), "Option object 'a' should be 'foo'");
        assertEquals(new Vector<>(), line.getOptionObject("b"), "Option object 'b' should be an empty Vector");
        assertTrue(line.hasOption("c"), "Option 'c' should be present");
        assertFalse(line.hasOption("d"), "Option 'd' should not be present");
        assertEquals(new File("build.xml"), line.getOptionObject("e"), "Option object 'e' should be a File pointing to 'build.xml'");
        assertEquals(Calendar.class, line.getOptionObject("f"), "Option object 'f' should be Calendar class");
        assertEquals(Double.valueOf(4.5), line.getOptionObject("n"), "Option object 'n' should be 4.5");
        assertEquals(new URL("https://commons.apache.org"), line.getOptionObject("t"), "Option object 't' should be the specified URL");

        // FILES NOT SUPPORTED YET
        assertThrows(UnsupportedOperationException.class, () -> line.getOptionObject('m'), "Option 'm' should throw UnsupportedOperationException");

        assertEquals(expectedDate, line.getOptionObject('z'), "Option object 'z' should be the expected date");
    }

    @ParameterizedTest
    @CsvSource({
            "'a', foo, Option 'a' should be 'foo'",
            "'b', java.util.Vector, Option object 'b' should be an empty Vector",
            "'c', , Option 'c' should be present",
            "'d', , Option 'd' should not be present",
            "'e', build.xml, Option object 'e' should be a File pointing to 'build.xml'",
            "'f', java.util.Calendar, Option object 'f' should be Calendar class",
            "'n', 4.5, Option object 'n' should be 4.5",
            "'t', https://commons.apache.org, Option object 't' should be the specified URL"
    })
    void testCommandLineOptions(char option, String expectedValue, String message) throws Exception {
        final Options options = PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/m*z#");
        final Date expectedDate = new Date(EXPECTED_DATE_TIME);
        final DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setTimeZone(new SimpleTimeZone(0, "GMT"));

        final String[] args = {"-c", "-a", "foo", "-b", "java.util.Vector", "-e", "build.xml", "-f", "java.util.Calendar", "-n", "4.5", "-t",
                "https://commons.apache.org", "-z", dateFormat.format(expectedDate), "-m", "test*"};

        final CommandLineParser parser = new PosixParser();
        final CommandLine line = parser.parse(options, args);

        if (expectedValue.equals("java.util.Vector")) {
            assertEquals(new Vector<>(), line.getOptionObject(option), message);
        } else if (expectedValue.equals("java.util.Calendar")) {
            assertEquals(Calendar.class, line.getOptionObject(option), message);
        } else if (expectedValue.equals("4.5")) {
            assertEquals(Double.valueOf(4.5), line.getOptionObject(option), message);
        } else if (expectedValue.equals("https://commons.apache.org")) {
            assertEquals(new URL("https://commons.apache.org"), line.getOptionObject(option), message);
        } else if (expectedValue.equals("")) {
            if (option == 'c') {
                assertTrue(line.hasOption(option), message);
            } else if (option == 'd') {
                assertFalse(line.hasOption(option), message);
            }
        } else {
            assertEquals(expectedValue, line.getOptionValue(option), message);
        }
    }
}
```

