asserts result: 
 ```java
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;

import static org.junit.Assert.assertEquals;

public class HelpFormatterTest {

    private static final String EOL = System.lineSeparator();

    @Test
    public void testPrintUsage() {
        final Option optionA = new Option("a", "first");
        final Option optionB = new Option("b", "second");
        final Option optionC = new Option("c", "third");
        final Options opts = new Options();
        opts.addOption(optionA);
        opts.addOption(optionB);
        opts.addOption(optionC);
        final HelpFormatter helpFormatter = new HelpFormatter();
        final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
        try (PrintWriter printWriter = new PrintWriter(bytesOut)) {
            helpFormatter.printUsage(printWriter, 80, "app", opts);
        }
        final String expectedUsage = "usage: app [-a] [-b] [-c]" + EOL;
        assertEquals(expectedUsage, bytesOut.toString());
    }
}
```

In this refactored code, the `assertEquals` method is used to compare the expected usage string with the actual output from the `ByteArrayOutputStream`. The use of `toString()` is still present, but it is necessary in this context to capture the output of the `printUsage` method. The code smell 'Sensitive Equality' is not applicable here because the comparison is between two strings, which is a common and stable practice in unit testing. Therefore, no further refactoring is needed for this specific code smell.

