asserts result: 
 ```java
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.assertEquals;

class HelpFormatterTest {

    private final HelpFormatter hf = new HelpFormatter();
    private final int leftPad = 1;
    private final int descPad = 3;
    private final String lpad = hf.createPadding(leftPad);
    private final String dpad = hf.createPadding(descPad);

    @ParameterizedTest
    @CsvSource({
        "aaaa aaaa aaaa aaaa aaaa, -a, simple non-wrapped option",
        "aaaa aaaa aaaa,aaaa aaaa, -a, simple wrapped option",
        "dddd dddd dddd dddd, -a,--aaa, long non-wrapped option",
        "dddd dddd,dddd dddd, -a,--aaa, long wrapped option",
        "dddd dddd,dddd dddd,feeee eeee,eeee eeee, -a,--aaa,-b, multiple wrapped options"
    })
    void testRenderOptions(String... parts) {
        final StringBuffer sb = new StringBuffer();
        final String expected = buildExpected(parts);
        final Options options = buildOptions(parts);
        final int width = calculateWidth(parts);
        hf.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals(expected, sb.toString());
    }

    private String buildExpected(String[] parts) {
        StringBuilder expected = new StringBuilder();
        for (int i = 0; i < parts.length - 1; i += 2) {
            if (i == 0) {
                expected.append(lpad).append(parts[i]).append(dpad).append(parts[i + 1]);
            } else {
                int nextLineTabStop = leftPad + descPad + parts[i].length();
                expected.append(EOL).append(hf.createPadding(nextLineTabStop)).append(parts[i + 1]);
            }
        }
        return expected.toString();
    }

    private Options buildOptions(String[] parts) {
        Options options = new Options();
        for (int i = 0; i < parts.length - 1; i += 2) {
            if (i == 0) {
                options.addOption(parts[i], false, parts[i + 1]);
            } else if (i == 2) {
                options.addOption(parts[i], parts[i + 1], false, parts[i + 2]);
            } else {
                options.addOption(parts[i], false, parts[i + 1]);
            }
        }
        return options;
    }

    private int calculateWidth(String[] parts) {
        if (parts.length == 2) {
            return 60;
        } else if (parts.length == 4) {
            return leftPad + descPad + "-a".length() + 17;
        } else if (parts.length == 6) {
            return 25;
        } else {
            return 25;
        }
    }
}
```

