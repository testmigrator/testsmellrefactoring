total tests: 6
total asserts: 98
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 0, NO_ITEMS_X, NO_ITEMS_Y), "No items should return 0");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 1, SINGLE_ITEM_X, SINGLE_ITEM_X + 0.1), "Single item at 0.0 should return 0");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 1, SINGLE_ITEM_X2, SINGLE_ITEM_X2 + 1.0), "Single item at 2.0 should return 0");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 2, TWO_ITEMS_X1, TWO_ITEMS_X1 + 0.1), "First item at 0.0 should return 0");
assertEquals(1, RendererUtils.findLiveItemsLowerBound(dataset, 2, TWO_ITEMS_X2, TWO_ITEMS_X2 + 1.0), "Second item at 1.0 should return 1");
assertEquals(1, RendererUtils.findLiveItemsLowerBound(dataset, 2, TWO_ITEMS_X2 + 1.0, TWO_ITEMS_X2 + 2.0), "Beyond second item at 2.0 should return 1");
assertEquals(1, RendererUtils.findLiveItemsLowerBound(dataset, 2, TWO_ITEMS_X2 + 2.0, TWO_ITEMS_X2 + 3.0), "Beyond second item at 3.0 should return 1");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 3, THREE_ITEMS_X1 - 1.0, THREE_ITEMS_X1), "Before first item at 0.0 should return 0");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 3, THREE_ITEMS_X1, THREE_ITEMS_X1 + 1.0), "First item at 1.0 should return 0");
assertEquals(1, RendererUtils.findLiveItemsLowerBound(dataset, 3, THREE_ITEMS_X2, THREE_ITEMS_X2 + 1.0), "Second item at 2.0 should return 1");
assertEquals(2, RendererUtils.findLiveItemsLowerBound(dataset, 3, THREE_ITEMS_X3 + 1.0, THREE_ITEMS_X3 + 2.0), "Third item at 3.0 should return 2");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 4, FOUR_ITEMS_X1 - 1.0, FOUR_ITEMS_X1), "Before first item at 0.0 should return 0");
assertEquals(0, RendererUtils.findLiveItemsLowerBound(dataset, 4, FOUR_ITEMS_X1, FOUR_ITEMS_X1 + 1.0), "First item at 1.0 should return 0");
assertEquals(1, RendererUtils.findLiveItemsLowerBound(dataset, 4, FOUR_ITEMS_X2, FOUR_ITEMS_X2 + 1.0), "Second item at 2.0 should return 1");
assertEquals(3, RendererUtils.findLiveItemsLowerBound(dataset, 4, FOUR_ITEMS_X4, FOUR_ITEMS_X4 + 1.0), "Fourth item at 3.0 should return 3");
assertEquals(3, RendererUtils.findLiveItemsLowerBound(dataset, 4, FOUR_ITEMS_X4 + 1.0, FOUR_ITEMS_X4 + 2.0), "Beyond fourth item at 4.0 should return 3");
assertEquals(expectedIndex, result, "Expected index 0 when there are no items");
assertEquals(expectedIndex1, result1, "Expected index 0 for x=0.0, y=1.1 with one item");
assertEquals(expectedIndex2, result2, "Expected index 0 for x=2.0, y=2.2 with one item");
assertEquals(expectedIndex1, result1, "Expected index 0 for x=0.0, y=1.1 with two items");
assertEquals(expectedIndex2, result2, "Expected index 0 for x=1.0, y=2.2 with two items");
assertEquals(expectedIndex3, result3, "Expected index 1 for x=2.0, y=3.3 with two items");
assertEquals(expectedIndex4, result4, "Expected index 1 for x=3.0, y=4.4 with two items");
assertEquals(expectedIndex1, result1, "Expected index 0 for x=0.0, y=1.1 with three items");
assertEquals(expectedIndex2, result2, "Expected index 0 for x=1.0, y=2.2 with three items");
assertEquals(expectedIndex3, result3, "Expected index 1 for x=2.0, y=3.3 with three items");
assertEquals(expectedIndex4, result4, "Expected index 2 for x=3.0, y=4.4 with three items");
assertEquals(expectedIndex1, result1, "Expected index 0 for x=0.0, y=1.1 with four items");
assertEquals(expectedIndex2, result2, "Expected index 0 for x=1.0, y=2.2 with four items");
assertEquals(expectedIndex3, result3, "Expected index 1 for x=2.0, y=3.3 with four items");
assertEquals(expectedIndex4, result4, "Expected index 2 for x=3.0, y=4.4 with four items");
assertEquals(expectedIndex5, result5, "Expected index 3 for x=4.0, y=5.5 with four items");
assertEquals(expectedIndex1, result1, "Expected index 0 for x=0.0, y=4.0 with repeating items");
assertEquals(expectedIndex2, result2, "Expected index 0 for x=1.0, y=4.0 with repeating items");
assertEquals(expectedIndex3, result3, "Expected index 1 for x=2.0, y=4.0 with repeating items");
assertEquals(expectedIndex4, result4, "Expected index 4 for x=3.0, y=4.0 with repeating items");
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 0, NO_ITEMS_X_UPPER_BOUND, NO_ITEMS_X_LOWER_BOUND), "No items in the dataset should return 0");
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, SINGLE_ITEM_X_LOWER_BOUND, SINGLE_ITEM_X_UPPER_BOUND_1), "Single item within bounds should return 0");
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 1, SINGLE_ITEM_X_VALUE, SINGLE_ITEM_X_UPPER_BOUND_2), "Single item outside bounds should return 0");
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 2, TWO_ITEMS_X_LOWER_BOUND, TWO_ITEMS_X_UPPER_BOUND_1), "First item within bounds should return 0");
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, TWO_ITEMS_X_VALUE_1, TWO_ITEMS_X_UPPER_BOUND_2), "Second item within bounds should return 1");
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, TWO_ITEMS_X_VALUE_2, TWO_ITEMS_X_UPPER_BOUND_3), "Both items within bounds should return 1");
assertEquals(1, RendererUtils.findLiveItemsUpperBound(d, 2, TWO_ITEMS_X_VALUE_2 + 1, TWO_ITEMS_X_UPPER_BOUND_4), "Both items outside bounds should return 1");
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 3, THREE_ITEMS_X_LOWER_BOUND, THREE_ITEMS_X_UPPER_BOUND_1), "First item within bounds should return 0");
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, THREE_ITEMS_X_VALUE_1, THREE_ITEMS_X_UPPER_BOUND_2), "Second item within bounds should return 2");
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, THREE_ITEMS_X_VALUE_2, THREE_ITEMS_X_UPPER_BOUND_3), "Third item within bounds should return 2");
assertEquals(2, RendererUtils.findLiveItemsUpperBound(d, 3, THREE_ITEMS_X_VALUE_3 + 1, THREE_ITEMS_X_UPPER_BOUND_4), "All items outside bounds should return 2");
assertEquals(0, RendererUtils.findLiveItemsUpperBound(d, 4, FOUR_ITEMS_X_LOWER_BOUND, FOUR_ITEMS_X_UPPER_BOUND_1), "First item within bounds should return 0");
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, FOUR_ITEMS_X_VALUE_1, FOUR_ITEMS_X_UPPER_BOUND_2), "Second item within bounds should return 3");
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, FOUR_ITEMS_X_VALUE_2, FOUR_ITEMS_X_UPPER_BOUND_3), "Third item within bounds should return 3");
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, FOUR_ITEMS_X_VALUE_3 + 1, FOUR_ITEMS_X_UPPER_BOUND_4), "Fourth item within bounds should return 3");
assertEquals(3, RendererUtils.findLiveItemsUpperBound(d, 4, FOUR_ITEMS_X_VALUE_4 + 1, FOUR_ITEMS_X_UPPER_BOUND_5), "All items outside bounds should return 3");
assertEquals("Expected upper bound index for series with no items", expectedIndex, actualIndex);
assertEquals("Expected upper bound index for series with one item (range 0.0-1.1)", expectedIndex1, actualIndex1);
assertEquals("Expected upper bound index for series with one item (range 2.0-2.2)", expectedIndex2, actualIndex2);
assertEquals("Expected upper bound index for series with two items (range 0.0-1.0)", expectedIndex1, actualIndex1);
assertEquals("Expected upper bound index for series with two items (range 1.0-2.2)", expectedIndex2, actualIndex2);
assertEquals("Expected upper bound index for series with two items (range 2.0-3.3)", expectedIndex3, actualIndex3);
assertEquals("Expected upper bound index for series with two items (range 3.0-4.4)", expectedIndex4, actualIndex4);
assertEquals("Expected upper bound index for series with three items (range 0.0-1.1)", expectedIndex1, actualIndex1);
assertEquals("Expected upper bound index for series with three items (range 1.0-2.2)", expectedIndex2, actualIndex2);
assertEquals("Expected upper bound index for series with three items (range 2.0-3.3)", expectedIndex3, actualIndex3);
assertEquals("Expected upper bound index for series with three items (range 3.0-4.4)", expectedIndex4, actualIndex4);
assertEquals("Expected upper bound index for series with four items (range 0.0-1.1)", expectedIndex1, actualIndex1);
assertEquals("Expected upper bound index for series with four items (range 1.0-2.2)", expectedIndex2, actualIndex2);
assertEquals("Expected upper bound index for series with four items (range 2.0-3.3)", expectedIndex3, actualIndex3);
assertEquals("Expected upper bound index for series with four items (range 3.0-4.4)", expectedIndex4, actualIndex4);
assertEquals("Expected upper bound index for series with four items (range 4.0-5.5)", expectedIndex5, actualIndex5);
assertEquals("Expected upper bound index for series with repeating items (range 0.0-1.0)", expectedIndex1, actualIndex1);
assertEquals("Expected upper bound index for series with repeating items (range 0.0-2.0)", expectedIndex2, actualIndex2);
assertEquals("Expected upper bound index for series with repeating items (range 0.0-3.0)", expectedIndex3, actualIndex3);
assertEquals("Expected upper bound index for series with repeating items (range 0.0-4.0)", expectedIndex4, actualIndex4);
assertEquals(expected, actual, "No items in the series");
assertEquals(expected, actual, "One item, range [0.0, 1.0]");
assertEquals(expected, actual, "One item, range [1.1, 2.0]");
assertEquals(expected, actual, "Two items, range [0.1, 0.5]");
assertEquals(expected, actual, "Two items, range [0.1, 1.0]");
assertEquals(expected, actual, "Two items, range [1.1, 2.0]");
assertEquals(expected, actual, "Two items, range [2.2, 3.0]");
assertEquals(expected, actual, "Two items, range [3.3, 4.0]");
assertEquals(expected, actual, "Three items, range [0.0, 1.0]");
assertEquals(expected, actual, "Three items, range [1.0, 2.0]");
assertEquals(expected, actual, "Three items, range [2.0, 3.0]");
assertEquals(expected, actual, "Three items, range [3.0, 4.0]");
assertEquals(expected, actual, "Four items, range [0.1, 0.5]");
assertEquals(expected, actual, "Four items, range [0.1, 1.0]");
assertEquals(expected, actual, "Four items, range [1.1, 2.0]");
assertEquals(expected, actual, "Four items, range [2.2, 3.0]");
assertEquals(expected, actual, "Four items, range [3.3, 4.0]");
assertEquals(expected, actual, "Four items, range [4.4, 5.0]");
assertEquals(expected, actual, "Repeating items, range [0.0, 5.0]");
assertEquals(expected, actual, "Repeating items, range [1.0, 5.0]");
assertEquals(expected, actual, "Repeating items, range [2.0, 5.0]");
assertEquals(expected, actual, "Repeating items, range [3.0, 5.0]");
assertEquals(1, lowerBound, "Lower bound index should be 1");
assertEquals(2, upperBound, "Upper bound index should be 2");
assertEquals(expectedLowerBound, bounds[0], "Lower bound index should be 1");
assertEquals(expectedUpperBound, bounds[1], "Upper bound index should be 2");
