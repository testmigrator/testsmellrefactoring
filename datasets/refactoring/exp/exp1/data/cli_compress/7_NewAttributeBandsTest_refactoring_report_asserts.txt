total tests: 5
total asserts: 49
assertEquals(expectedElementCount, layoutElements.size(), "Expected exactly one layout element");
assertEquals(layoutStr, element.getTag(), "Expected tag to match the layout string");
assertEquals(EXPECTED_LAYOUT_SIZE, layoutElements.size(), "Expected layout elements size to be " + EXPECTED_LAYOUT_SIZE);
assertEquals(EXPECTED_BODY_SIZE, thirdBody.size(), "Expected body size to be " + EXPECTED_BODY_SIZE);
assertEquals(secondCallable, call.getCallable(), "Expected the call's callable to be secondCallable");
assertTrue(secondCallable.isBackwardsCallable(), "Expected secondCallable to be backwards callable");
assertFalse(firstCallable.isBackwardsCallable(), "Expected firstCallable to not be backwards callable");
assertFalse(thirdCallable.isBackwardsCallable(), "Expected thirdCallable to not be backwards callable");
assertEquals(EXPECTED_LAYOUT_SIZE, layoutElements.size(), "Expected layout elements size to be " + EXPECTED_LAYOUT_SIZE);
assertEquals(EXPECTED_BODY_SIZE, thirdBody.size(), "Expected body size to be " + EXPECTED_BODY_SIZE);
assertEquals(firstCallable, call.getCallable(), "Expected the call's callable to be firstCallable");
assertTrue(firstCallable.isBackwardsCallable(), "Expected firstCallable to be backwards callable");
assertFalse(secondCallable.isBackwardsCallable(), "Expected secondCallable to not be backwards callable");
assertFalse(thirdCallable.isBackwardsCallable(), "Expected thirdCallable to not be backwards callable");
assertEquals(EXPECTED_LAYOUT_SIZE, layoutElements.size(), "Expected layout elements size to be " + EXPECTED_LAYOUT_SIZE);
assertEquals(EXPECTED_BODY_SIZE, thirdBody.size(), "Expected body size to be " + EXPECTED_BODY_SIZE);
assertEquals(thirdCallable, call.getCallable(), "Expected the call's callable to be thirdCallable");
assertTrue(thirdCallable.isBackwardsCallable(), "Expected thirdCallable to be backwards callable");
assertFalse(firstCallable.isBackwardsCallable(), "Expected firstCallable to not be backwards callable");
assertFalse(secondCallable.isBackwardsCallable(), "Expected secondCallable to not be backwards callable");
assertEquals(EXPECTED_LAYOUT_SIZE, layoutElements.size(), "Expected layout elements size to be " + EXPECTED_LAYOUT_SIZE);
assertEquals(EXPECTED_BODY_SIZE, thirdBody.size(), "Expected body size to be " + EXPECTED_BODY_SIZE);
assertEquals(expectedThirdCallable, call.getCallable(), "Expected the call's callable to match expected thirdCallable");
assertTrue(expectedThirdCallable.isBackwardsCallable(), "Expected " + expectedThirdCallable + " to be backwards callable");
assertFalse(expectedFirstCallable.isBackwardsCallable(), "Expected " + expectedFirstCallable + " to not be backwards callable");
assertFalse(expectedSecondCallable.isBackwardsCallable(), "Expected " + expectedSecondCallable + " to not be backwards callable");
assertEquals(expectedSize, layoutElements.size(), "The size of layout elements should be 1");
assertTrue(element instanceof Reference, "The layout element should be an instance of Reference");
assertEquals(layout, referenceElement.getTag(), "The tag of the reference element should match the input layout");
assertEquals(expectedSize, layoutElements.size(), "The size of layout elements should be " + expectedSize);
assertEquals(expectedTag, countElement.getTag(), "The tag of the count element should be " + expectedTag);
assertEquals(expectedSize, replicatedElements.size(), "The size of replicated elements should be " + expectedSize);
assertEquals(expectedTag, firstElement.getTag(), "The tag of the first replicated element should be " + expectedTag);
assertEquals(expectedTag, secondElement.getTag(), "The tag of the second replicated element should be " + expectedTag);
assertEquals(expectedTag, thirdElement.getTag(), "The tag of the third replicated element should be " + expectedTag);
assertEquals(expectedTag, fourthElement.getTag(), "The tag of the fourth replicated element should be " + expectedTag);
assertEquals(expectedTag, fifthElement.getTag(), "The tag of the fifth replicated element should be " + expectedTag);
assertEquals(1, layoutElements.size(), "Expected 1 layout element");
assertEquals("B", tag.getTag(), "Expected tag 'B'");
assertEquals(2, unionCases.size(), "Expected 2 union cases");
assertTrue(firstCase.hasTag(55), "First case should have tag 55");
assertFalse(firstCase.hasTag(23), "First case should not have tag 23");
assertEquals(1, body.size(), "Expected 1 body element in the first case");
assertEquals("FH", bodyElement.getTag(), "Expected tag 'FH' in the first case body");
assertTrue(secondCase.hasTag(23), "Second case should have tag 23");
assertFalse(secondCase.hasTag(55), "Second case should not have tag 55");
assertEquals(0, body.size(), "Expected 0 body elements in the second case");
assertEquals(1, defaultBody.size(), "Expected 1 default case body element");
assertEquals("RSH", ref.getTag(), "Expected tag 'RSH' in the default case body");
