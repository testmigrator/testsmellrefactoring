total tests: 11
total asserts: 38
assertEquals("POST", ihVal("Method", doc), "HTTP method should be POST");
assertEquals("gzip", ihVal("Accept-Encoding", doc), "Accept-Encoding header should be gzip");
assertEquals("auth=token", ihVal("Cookie", doc), "Cookie header should be auth=token");
assertEquals("度一下", ihVal("百", doc), "Value for key '百' should be '度一下'");
assertEquals("Jsoup, Jonathan", ihVal("uname", doc), "Value for key 'uname' should be 'Jsoup, Jonathan'");
assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ihVal("Content-Type", doc), "Content-Type header should be application/x-www-form-urlencoded; charset=UTF-8");
assertTrue(ihVal("Content-Type", doc).contains(MULTIPART_FORM_DATA), "Content-Type should contain multipart/form-data");
assertTrue(ihVal("Content-Type", doc).contains("boundary"), "Content-Type should contain boundary");
assertEquals("Jsoup, Jonathan", ihVal("uname", doc), "uname should be Jsoup, Jonathan");
assertEquals("度一下", ihVal("百", doc), "百 should be 度一下");
assertEquals("POST", ihVal("Method", doc), "HTTP method should be POST");
assertEquals("application/json", ihVal("Content-Type", doc), "Content-Type header should be application/json");
assertEquals("foo=true", ihVal("Query String", doc), "Query string should be foo=true");
assertEquals(body, ihVal("Post Data", doc), "Post data should match the sent body");
assertEquals("POST", ihVal("Method", doc), "HTTP method should be POST");
assertEquals("application/json", ihVal("Content-Type", doc), "Content-Type header should be application/json");
assertEquals(body, ihVal("Post Data", doc), "Request body should match the expected JSON body");
assertEquals("POST", ihVal("Method", doc), "HTTP method should be POST");
assertEquals("text/plain", ihVal("Content-Type", doc), "Content-Type header should be text/plain");
assertEquals(body, ihVal("Post Data", doc), "Request body should match the expected value");
assertEquals("POST", ihVal("Method", doc), "HTTP method should be POST");
assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", ihVal("Query String", doc), "Query string parameters do not match expected values");
assertEquals(body, ihVal("Post Data", doc), "Request body does not match expected value");
assertEquals("what=the&what=about+%26+me%3F", ihVal("Query String", doc), "Query string should match expected value");
assertEquals("the, about & me?", ihVal("what", doc), "Value of 'what' should match expected value");
assertEquals("Mozilla", ihVal("User-Agent", doc), "User-Agent should match expected value");
assertEquals("http://example.com", ihVal("Referer", doc), "Referer should match expected value");
assertEquals("PUT", ihVal("Method", doc), "The HTTP method should be PUT");
assertEquals("gzip", ihVal("Accept-Encoding", doc), "The Accept-Encoding header should be gzip");
assertEquals("auth=token", ihVal("Cookie", doc), "The Cookie header should be auth=token");
assertTrue(doc.title().contains("Environment"), "First parse should contain 'Environment' in the title");
assertTrue(doc2.title().contains("Environment"), "Second parse should contain 'Environment' in the title");
assertTrue(body.contains("Environment"), "Body should contain 'Environment'");
assertTrue(bytes.length > 100, "Bytes length should be greater than 100");
assertTrue(doc.title().contains("Environment"), "Document title should contain 'Environment'");
assertEquals("Expected token cookie value to be asdfg123", "asdfg123", cookies.get("token"));
assertEquals("Expected uid cookie value to be jhy", "jhy", cookies.get("uid"));
assertEquals("Expected Cookie header in response to match sent cookies", "token=asdfg123; uid=jhy", ihVal("Cookie", doc));
