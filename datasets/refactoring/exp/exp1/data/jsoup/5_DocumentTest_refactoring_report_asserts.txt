total tests: 20
total asserts: 64
assertEquals("The document text should be replaced", "Replaced", doc.text());
assertEquals("The body text should reflect the replacement", "Replaced", doc.body().text());
assertEquals("The document should contain exactly one head element", expectedHeadElementCount, doc.select("head").size());
assertEquals("", noTitle.title(), "Initial title should be empty");
assertEquals("Hello", noTitle.title(), "Title should be set to 'Hello'");
assertEquals("Hello", noTitle.select("title").first().text(), "Title element text should be 'Hello'");
assertEquals("First", withTitle.title(), "Initial title should be 'First'");
assertEquals("Hello", withTitle.title(), "Title should be set to 'Hello'");
assertEquals("Hello", withTitle.select("title").first().text(), "Title element text should be 'Hello'");
assertEquals("Hello there now", normaliseTitle.title(), "Normalized title should be 'Hello there now'");
assertEquals("<p title=\"π\">π &amp; &lt; &gt; </p>", doc.body().html(), "Default charset encoding should match expected HTML output.");
assertEquals("UTF-8", doc.outputSettings().charset().name(), "Default charset should be UTF-8.");
assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode(), "Escape mode should be base when charset is ASCII.");
assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt; </p>", doc.body().html(), "ASCII charset encoding should match expected HTML output.");
assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt; </p>", doc.body().html(), "Extended escape mode encoding should match expected HTML output.");
assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()), "Initial clone should match the original document");
assertEquals("<html><head><title>Hello there</title> </head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()), "Modified clone should reflect changes");
assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()), "Original document should remain unchanged after cloning and modifying the clone");
assertEquals(doc.html(), clone.html(), "The HTML content of the cloned document should match the original document");
assertTrue(yahooFile.createNewFile(), "Failed to create Yahoo file");
assertTrue(nytFile.createNewFile(), "Failed to create NYT file");
assertEquals("http://www.yahoo.co.jp/index.html", location, "Yahoo location should match the expected URL");
assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", baseUri, "Yahoo base URI should match the expected URL");
assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", location, "NYT location should match the expected URL");
assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", baseUri, "NYT base URI should match the expected URL");
assertFalse(docA.equals(docB), "Documents with different content should not be equal");
assertTrue(docA.equals(docA), "A document should be equal to itself");
assertFalse(docA.hashCode() == docC.hashCode(), "Hash codes of documents with different content should not be equal");
assertTrue(docA.hasSameValue(docB), "Documents with the same content should be considered equal");
assertFalse(docA.hasSameValue(docC), "Documents with different content should not be considered equal");
assertEquals(expectedHtmlCharsetUTF8, actualValue, "The HTML structure should match the expected UTF-8 charset structure");
assertEquals(charsetUtf8, doc.charset().name(), "The document charset should be set to UTF-8");
assertEquals(charsetUtf8, selectedElement.attr("charset"), "The meta element charset attribute should be set to UTF-8");
assertEquals(doc.charset(), doc.outputSettings().charset(), "The output settings charset should match the document charset");
assertEquals(expectedHtmlCharsetISO, actualHtml, "The HTML structure should match the expected output with the correct charset.");
assertEquals(charsetIso8859, doc.charset().name(), "The document charset should be updated to ISO-8859-1.");
assertEquals(charsetIso8859, selectedElement.attr("charset"), "The meta element's charset attribute should be set to ISO-8859-1.");
assertEquals(doc.charset(), doc.outputSettings().charset(), "The output settings charset should match the document charset.");
assertEquals(charsetUtf8, metaElementCharset, "The charset attribute of the meta element should match the expected charset.");
assertEquals(expectedHtmlCharsetUTF8, actualHtml, "The document structure should match the expected HTML structure.");
assertEquals(htmlNoCharset, actualHtml, "HTML content should match the expected structure without charset meta tag");
assertNull(docDisabled.select("meta[charset]").first(), "No meta charset tag should be present in the document");
assertEquals(charsetUtf8, selectedElement.attr("charset"), "The charset attribute of the meta element should match the updated charset.");
assertTrue(doc.select("meta[name=charset]").isEmpty(), "There should be no meta elements with name='charset' after updating the charset.");
assertEquals(xmlCharsetUTF8, actualValue, "XML document string representation should match expected UTF-8 encoded XML");
assertEquals(charsetUtf8, selectedNode.attr("encoding"), "Encoding attribute of the XML declaration should be set to UTF-8");
assertEquals(charsetUtf8, doc.charset().name(), "Document charset should be set to UTF-8");
assertEquals(doc.charset(), doc.outputSettings().charset(), "Output settings charset should match the document charset");
assertEquals(expectedXmlCharsetISO, actualXmlContent, "XML content should match the expected ISO-8859-1 encoding");
assertEquals(charsetIso8859, doc.charset().name(), "Document charset should be ISO-8859-1");
assertEquals(charsetIso8859, selectedNode.attr("encoding"), "XML declaration encoding should be ISO-8859-1");
assertEquals(doc.charset(), doc.outputSettings().charset(), "Output settings charset should match the document charset");
assertEquals(expectedXmlCharsetUTF8, actualXmlCharsetUTF8, "The document's string representation should match the expected XML with UTF-8 charset");
assertEquals(charsetUtf8, selectedNode.attr("encoding"), "The encoding attribute of the XML declaration should be set to UTF-8");
assertEquals(xmlCharset, actualDocString, "The document string should match the expected XML charset");
assertEquals("dontTouch", selectedNode.attr("encoding"), "The encoding attribute should remain 'dontTouch'");
assertEquals("dontTouch", selectedNode.attr("version"), "The version attribute should remain 'dontTouch'");
assertEquals(html, p.outerHtml(), "Initial HTML should match parsed HTML");
assertEquals("<p>Alrighty then it's not \uD83D\uDCA9. <span>Next</span></p>", p.outerHtml(), "Initial HTML should match expected value");
assertEquals("<p>Alrighty then it's not \uD83D\uDCA9. <span>Next</span></p>", out[0], "Thread output should match initial HTML");
assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset(), "Charset should be set to US_ASCII");
assertEquals("<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>", p.outerHtml(), "Final HTML should be ASCII encoded");
assertNotNull(documentType, "Document type should not be null");
assertEquals("html", documentType.name(), "Document type name should be 'html'");
