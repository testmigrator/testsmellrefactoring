total tests: 7
total asserts: 38
assertTrue("", one.isBlank());
assertTrue("Spaces only", two.isBlank());
assertTrue("Newlines and spaces", three.isBlank());
assertFalse("Non-blank text", four.isBlank());
assertFalse("Text with leading whitespace", five.isBlank());
assertEquals("two &", span.text(), "Span text should be 'two &'");
assertEquals("two &", spanText.text(), "Span text node should be 'two &'");
assertEquals(" three &", tn.text(), "Paragraph text node should be ' three &'");
assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html()), "Paragraph HTML after text modification should be 'One <span>two &amp;</span> POW!'");
assertEquals("kablam &", tn.text(), "Text node text after attribute modification should be 'kablam &'");
assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html()), "Paragraph HTML after attribute modification should be 'One <span>two &amp;</span>kablam &amp;'");
assertEquals("Hello ", tn.getWholeText(), "The text node content after splitting should be 'Hello '");
assertEquals("there", tail.getWholeText(), "The tail text node content after splitting should be 'there'");
assertEquals("Hello there!", div.text(), "The div text content after modifying the tail text should be 'Hello there!'");
assertTrue(tn.parent() == tail.parent(), "The parent nodes of both text nodes should be the same");
assertEquals(whole, tn.getWholeText(), "Initial whole text should match the input string");
assertEquals(norm, tn.text(), "Normalized text should match the expected normalized string");
assertEquals(norm, tn.outerHtml(), "Outer HTML should match the expected normalized string");
assertEquals(norm, actualValue, "String representation should match the expected normalized string");
assertEquals(whole, tn.getWholeText(), "Whole text should remain unchanged after appending to element");
assertEquals(norm, tn.text(), "Normalized text should remain the same after appending to element");
assertEquals(norm, tn.outerHtml(), "Outer HTML should remain the same after appending to element");
assertEquals(norm, actualValue, "String representation should remain the same after appending to element");
assertEquals("<p>" + norm + "</p>", el.outerHtml(), "Element's outer HTML should match the expected structure");
assertEquals(norm, el.html(), "Element's inner HTML should match the expected normalized string");
assertEquals(whole, el.wholeText(), "Element's whole text should match the initial whole text");
assertNotSame(x, y, "Cloned object should not be the same instance as the original");
assertEquals(x.outerHtml(), y.outerHtml(), "Cloned object should have the same initial content as the original");
assertNotEquals(x.outerHtml(), y.outerHtml(), "Modifying the cloned object's text should change its content");
assertEquals("zzz", x.text(), "Original object's text should remain unchanged after modifying the cloned object");
assertEquals("zzz", x.text(), "Original object's text should remain unchanged after modifying the cloned object's text");
assertEquals("xxx", y.text(), "Cloned object's text should reflect the modification");
assertEquals("Original text should remain unchanged after cloning and modifying the clone", "zzz", x.text());
assertEquals("Cloned text should be modified as expected", "xxx", y.text());
assertFalse(StringUtil.isBlank(textNode.text()), "Text node should not be blank: " + textNode.text());
assertEquals("One ", textNode.text(), "First text node should be 'One '");
assertEquals("One ", textNode.getWholeText(), "First text node whole text should be 'One '");
assertTrue(verifyFirstTextNode(doc), "First text node should be found");
