total tests: 36
total asserts: 146
assertEquals(expectedDivCount, divs.size(), "Expected 2 div elements");
assertEquals(expectedFirstDivId, divs.get(0).id(), "Expected first div ID to be 'div1'");
assertEquals(expectedSecondDivId, divs.get(1).id(), "Expected second div ID to be 'div2'");
assertEquals(expectedPCount, ps.size(), "Expected 2 paragraph elements");
assertEquals(expectedFirstPText, ((TextNode) ps.get(0).childNode(0)).getWholeText(), "Expected first paragraph text to be 'Hello'");
assertEquals(expectedSecondPText, ((TextNode) ps.get(1).childNode(0)).getWholeText(), "Expected second paragraph text to be 'Another '");
assertEquals(ps, ps2, "Expected case-insensitive tag matching for paragraphs");
assertEquals(expectedImgSrc, imgs.get(0).attr("src"), "Expected image source to be 'foo.png'");
assertEquals(expectedEmptyCount, empty.size(), "Expected 0 elements for non-existent tag 'wtf'");
assertEquals(Integer.parseInt(EXPECTED_ELEMENT_COUNT), els.size(), "Expected element count does not match actual count");
assertEquals(EXPECTED_ELEMENT_ID, els.first().id(), "Expected element ID does not match actual ID");
assertEquals(EXPECTED_ELEMENT_TAG_NAME, els.first().tagName(), "Expected element tag name does not match actual tag name");
assertEquals("div1", div.id(), "The ID of the element should be 'div1'");
assertNull(doc.getElementById("none"), "No element with ID 'none' should exist");
assertEquals("div", div2.tagName(), "The tag name of the element with ID '2' should be 'div'");
assertEquals("span", span.tagName(), "The tag name of the element with ID '2' within the <p> context should be 'span'");
assertEquals("Hello Another element", doc.text(), "Document text should match expected value");
assertEquals("Another element", doc.getElementsByTag("p").get(1).text(), "Second paragraph text should match expected value");
assertEquals("Hello there now", p.text(), "Check if the combined text of the element and its children matches");
assertEquals("Hello now", p.ownText(), "Check if the text of the element itself, excluding its children, matches");
assertEquals("code\n\ncode", doc.text(), "The text content within <pre><code> should match the expected value");
assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html(), "The HTML content within <pre><code> should match the expected value");
assertEquals("code\n\ncode", doc.text(), "Text content should match the expected value");
assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html(), "HTML content should match the expected value");
assertEquals(expectedText, doc.text(), "Document text does not match expected text");
assertEquals(expectedText, doc.select("p").first().ownText(), "Paragraph own text does not match expected text");
assertEquals(expectedText, document.wholeText(), "The whole text does not match the expected output for the given HTML: " + html);
assertEquals("Text of element with id '1' should be 'there'", "there", p.text());
assertEquals("Previous element sibling of element with id '1' should be 'Hello'", "Hello", p.previousElementSibling().text());
assertEquals("Next element sibling of element with id '1' should be 'this'", "this", p.nextElementSibling().text());
assertEquals("First element sibling of element with id '1' should be 'Hello'", "Hello", p.firstElementSibling().text());
assertEquals("Last element sibling of element with id '1' should be 'element'", "element", p.lastElementSibling().text());
assertEquals("there", p.text(), "Text of <p> element with id=1 should be 'there'");
assertEquals("Hello", p.previousElementSibling().text(), "Text of previous sibling of <p> element with id=1 should be 'Hello'");
assertEquals("this", p.nextElementSibling().text(), "Text of next sibling of <p> element with id=1 should be 'this'");
assertEquals("this", p.nextElementSibling().nextElementSibling().text(), "Text of second next sibling of <p> element with id=1 should be 'this'");
assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text(), "Text of third next sibling of <p> element with id=1 should be 'is'");
assertEquals("Hello", p.firstElementSibling().text(), "Text of first sibling of <p> element with id=1 should be 'Hello'");
assertEquals("element", p.lastElementSibling().text(), "Text of last sibling of <p> element with id=1 should be 'element'");
assertEquals(expectedSize, parents.size(), "The size of the parents list should be 4");
assertEquals(expectedFirstParentTag, parents.get(0).tagName(), "The first parent tag should be 'p'");
assertEquals(expectedSecondParentTag, parents.get(1).tagName(), "The second parent tag should be 'div'");
assertEquals(expectedThirdParentTag, parents.get(2).tagName(), "The third parent tag should be 'body'");
assertEquals(expectedFourthParentTag, parents.get(3).tagName(), "The fourth parent tag should be 'html'");
assertTrue(expectedIndex == ps.get(0).elementSiblingIndex(), "First p element should have index 0");
assertTrue(expectedIndex == ps.get(1).elementSiblingIndex(), "Second p element should have index 1");
assertTrue(expectedIndex == ps.get(2).elementSiblingIndex(), "Third p element should have index 2");
assertTrue(expectedIndex == ps.get(0).elementSiblingIndex(), "First <p> element should have a sibling index of 0");
assertTrue(expectedIndex == ps.get(1).elementSiblingIndex(), "Second <p> element should have a sibling index of 1");
assertTrue(expectedIndex == ps.get(2).elementSiblingIndex(), "Third <p> element should have a sibling index of 2");
assertEquals(expectedMellowCount, els.size(), "The number of elements with class 'mellow' should be 2");
assertEquals("div", els.get(0).tagName(), "The first element with class 'mellow' should be a div");
assertEquals("span", els.get(1).tagName(), "The second element with class 'mellow' should be a span");
assertEquals(expectedYellowCount, els2.size(), "The number of elements with class 'yellow' should be 2");
assertEquals("div", els2.get(0).tagName(), "The first element with class 'yellow' should be a div");
assertEquals("b", els2.get(1).tagName(), "The second element with class 'yellow' should be a b");
assertEquals(expectedSoloCount, none.size(), "The number of elements with class 'solo' should be 0");
assertEquals(expectedElementCount, elementsWithStyle.size(), "Expected 2 elements with 'style' attribute");
assertEquals(expectedFirstElementTag, elementsWithStyle.get(0).tagName(), "First element with 'style' attribute should be a 'div'");
assertEquals(expectedSecondElementTag, elementsWithStyle.get(1).tagName(), "Second element with 'style' attribute should be a 'b'");
assertEquals(expectedElementCount, elementsWithClass.size(), "Expected 0 elements with 'class' attribute");
assertEquals(expectedSize, meta.size(), "The size of elements with attribute 'http-equiv=content-type' should be 1");
assertEquals(expectedId, meta.first().id(), "The ID of the first element with attribute 'http-equiv=content-type' should be '1'");
assertEquals(expectedSize, els.size(), "Expected size of elements with style 'bold'");
assertEquals(expectedTagName, els.get(0).tagName(), "Expected tag name of the first element with style 'bold'");
assertEquals(expectedSize, none.size(), "Expected size of elements with style 'none'");
assertEquals(expectedSpanClassName, span.className(), "Span element should have the correct class name");
assertTrue(span.hasClass("mellow"), "Span element should have the 'mellow' class");
assertTrue(span.hasClass("yellow"), "Span element should have the 'yellow' class");
assertEquals(expectedNumberOfClasses, classes.size(), "Span element should have exactly 2 classes");
assertTrue(classes.contains("mellow"), "Span element's classes should contain 'mellow'");
assertTrue(classes.contains("yellow"), "Span element's classes should contain 'yellow'");
assertEquals(expectedDocumentClassName, doc.className(), "Document element should have no class name");
assertEquals(expectedNumberOfDocumentClasses, classes.size(), "Document element should have no classes");
assertFalse(doc.hasClass("mellow"), "Document element should not have the 'mellow' class");
assertTrue(el.hasClass("toto"), "Class 'toto' should be found at the start of the class attribute.");
assertTrue(el.hasClass("toto"), "Class 'toto' should be found with leading space.");
assertTrue(el.hasClass("toto"), "Class 'toto' should be found with trailing space.");
assertTrue(el.hasClass("toto"), "Class 'toto' should be found with tab and trailing space.");
assertTrue(el.hasClass("toto"), "Class 'toto' should be found with multiple spaces.");
assertFalse(el.hasClass("toto"), "Class 'toto' should not be found.");
assertFalse(el.hasClass("toto"), "Class 'toto' should not be found when only spaces are present.");
assertFalse(el.hasClass("toto"), "Class 'toto' should not be found in composite class 'tototo'.");
assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found at the end of the class attribute.");
assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found in the middle of the class attribute.");
assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found at the end with spaces.");
assertTrue(el.hasClass("raulpismuth"), "Class 'raulpismuth' should be found with multiple spaces.");
assertEquals("mellow yellow green", div.className(), "Class 'green' should be added to the element");
assertEquals("mellow green", div.className(), "Class 'yellow' should be removed from the element");
assertEquals("mellow red", div.className(), "Class 'green' should be removed and 'red' should be added to the element");
assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html(), "Document HTML should match expected output without pretty print");
assertEquals("   \n<p>Hello\n there\n</p>", div.html(), "Div HTML should match expected output without pretty print");
assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml(), "Title element does not match expected output");
assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml(), "First div element does not match expected output");
assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>", doc.select("body").first().html(), "Body content does not match expected output");
assertEquals("Document text should match expected value", "Hello there now", doc.text());
assertEquals("Paragraph text should match expected value", "there now", doc.select("p").get(0).text());
assertEquals("Div text should be updated to 'Gone'", "Gone", div.text());
assertEquals("Paragraph count should be 0 after setting new text", expectedParagraphCount, doc.select("p").size());
assertTrue(div.hasAttr("true"), "The 'true' attribute should exist.");
assertEquals("", div.attr("true"), "The value of the 'true' attribute should be an empty string.");
assertFalse(div.hasAttr("false"), "The 'false' attribute should not exist after setting it to false.");
assertEquals(expectedAttributeCount, attributes.size(), "There should be one attribute.");
assertEquals("<div true></div>", div.outerHtml(), "The outer HTML should reflect the 'true' attribute only.");
assertEquals("First child text should be 'Before'", "Before", div.child(0).text());
assertEquals("Second child text should be 'Hello'", "Hello", div.child(1).text());
assertEquals("there & now > Hello", div.text(), "Text content should include prepended text");
assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()), "HTML content should include properly escaped prepended text");
assertEquals("good", title.html(), "The title element should contain the text 'good'");
assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html(), "The title element should contain the escaped HTML '<i>bad</i>'");
assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html(), "The head element should contain the escaped HTML '<title><i>bad</i></title>'");
assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Single div wrap did not produce expected HTML");
assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Nested divs wrap did not produce expected HTML");
assertEquals(ret, p, "Return value from wrap method is incorrect");
assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Verify inserting multiple divs before the first paragraph");
assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Verify inserting a paragraph and a comment before the last paragraph");
assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()), "Check if divs are correctly added after the first paragraph");
assertEquals("<div><p>Hello</p><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html()), "Check if paragraph and comment are correctly added after the last paragraph");
assertTrue(div.hasText(), "The div element should contain text.");
assertTrue(ps.first().hasText(), "The first p element should contain text.");
assertFalse(ps.last().hasText(), "The last p element should not contain text.");
assertNull(clone.parent(), "Cloned element should be orphaned");
assertEquals(0, clone.siblingIndex, "Cloned element should have sibling index 0");
assertEquals(1, p.siblingIndex, "Original element should have sibling index 1");
assertNotNull(p.parent(), "Original element should have a parent");
assertEquals("<p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(clone.outerHtml()), "Cloned element should have appended child");
assertEquals("<div><p>One</p><p><span>Two</span></p></div>", TextUtil.stripNewlines(doc.body().html()), "Original document should not be modified");
assertNotNull(clone.parent(), "Cloned element should have a parent after adoption");
assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(doc.body().html()), "Cloned element should be adopted into the document");
assertEquals(1, d.childNodeSize(), "Original div should have 1 child node");
assertEquals(0, d2.childNodeSize(), "Cloned div should have 0 child nodes");
assertEquals(1, p.childNodeSize(), "Original p should have 1 child node");
assertEquals(0, p2.childNodeSize(), "Cloned p should have 0 child nodes");
assertEquals("", p2.text(), "Cloned p should have no text content");
assertEquals(TEXT_CONTENT, t2.text(), "Cloned text node should have the same text content");
assertEquals(P_CLASS, p2.className(), "Cloned p should have the same class name");
assertEquals(P_CLASS, p.className(), "Original p should retain its class name after removing from cloned p");
assertEquals(1, d2.childNodeSize(), "Cloned div should have 1 child node after appending");
assertEquals(NEW_TEXT_CONTENT, d2.text(), "Cloned div should have the new text content");
assertEquals(TEXT_CONTENT, d.text(), "Original div should retain its original text content");
assertEquals(BASE_URI, d2.baseUri(), "Cloned div should have the same base URI");
assertEquals(0, doc.select("i").size(), "No <i> tags should remain after changing the tag name.");
assertEquals(1, doc.select("em").size(), "One <em> tag should be present after changing the tag name.");
assertEquals(expectedHtml, doc.select("div").first().html(), "The content of the <div> should be updated to <em>Hello</em>.");
assertTrue(doc.html().contains(doc.select("title").outerHtml()), "Document HTML should contain the outer HTML of the title element");
assertTrue(doc.html().contains(doc.select("div").outerHtml()), "Document HTML should contain the outer HTML of the div element");
