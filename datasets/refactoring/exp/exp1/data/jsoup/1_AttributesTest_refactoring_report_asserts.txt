total tests: 9
total asserts: 50
assertEquals(expectedSize, a.size(), "The size of attributes should be 3");
assertTrue(a.hasKey("Tot"), "Attribute 'Tot' should exist");
assertTrue(a.hasKey("Hello"), "Attribute 'Hello' should exist");
assertTrue(a.hasKey("data-name"), "Attribute 'data-name' should exist");
assertFalse(a.hasKey("tot"), "Attribute 'tot' should not exist (case-sensitive)");
assertTrue(a.hasKeyIgnoreCase("tot"), "Attribute 'tot' should exist (case-insensitive)");
assertEquals("There", a.getIgnoreCase("hEllo"), "Attribute 'hEllo' should return 'There' (case-insensitive)");
assertEquals(expectedDatasetSize, dataset.size(), "The size of dataset should be 1");
assertEquals("Jsoup", dataset.get("name"), "The value of 'name' in dataset should be 'Jsoup'");
assertEquals("", a.get("tot"), "Attribute 'tot' should return an empty string");
assertEquals("a&p", a.get("Tot"), "Attribute 'Tot' should return 'a&p'");
assertEquals("a&p", a.getIgnoreCase("tot"), "Attribute 'tot' should return 'a&p' (case-insensitive)");
assertEquals(expectedHtml, a.html(), "HTML representation of attributes should match expected output");
assertEquals(expectedHtml, actualValue, "String representation of attributes should match HTML representation");
assertTrue(attributes.hasKey("Tot"), "Attributes should contain key 'Tot'");
assertEquals(value, attributes.get(key), "Attribute '" + key + "' should have value '" + value + "'");
assertEquals("Tot", attr.getKey(), "First attribute key should be 'Tot'");
assertEquals(2, attributes.size(), "Attributes size should be 2 after removing 'Tot'");
assertEquals("Hello", attr.getKey(), "Next attribute key should be 'Hello'");
assertEquals("There", attr.getValue(), "Attribute 'Hello' should have value 'There'");
assertEquals(2, attributes.size(), "Attributes size should be 2 after removing 'Tot'");
assertEquals("There", attributes.get("Hello"), "Attribute 'Hello' should still have value 'There'");
assertFalse(attributes.hasKey("Tot"), "Attributes should not contain key 'Tot'");
assertEquals(expectedCount, seen, "The number of attributes seen should match the expected count");
assertEquals(expectedValue, attribute.getValue(), "The value of the attribute at index " + index + " should match the expected value");
assertTrue(iterator.hasNext(), "Iterator should have elements");
assertEquals(datas[i][0], attribute.getKey(), "Key should match at index " + i);
assertEquals(datas[i][1], attribute.getValue(), "Value should match at index " + i);
assertEquals(datas.length, i, "Number of elements should match expected count");
assertTrue(it.hasNext(), "Expected iterator to have next element");
assertEquals("One", it.next().getKey(), "Expected first key to be 'One'");
assertTrue(it.hasNext(), "Expected iterator to have another next element");
assertEquals("Two", it.next().getKey(), "Expected second key to be 'Two'");
assertFalse(it.hasNext(), "Expected iterator to have no more elements");
assertEquals(EXPECTED_SEEN_COUNT, seen, "Expected to see 2 attributes");
assertEquals(expectedSize, attributes.size(), "The list size should be 2 after skipping internal keys");
assertEquals("One", attributes.get(0).getKey(), "The first key should be 'One' after skipping internal keys");
assertEquals("Two", attributes.get(1).getKey(), "The second key should be 'Two' after skipping internal keys");
assertEquals(expectedInitialSize, a.size(), "Initial size of attributes should be 5");
assertEquals(expectedSizeAfterRemoval, a.size(), "Size of attributes after removal should be 3");
assertTrue(a.hasKey("tot"), "Attribute 'tot' should still be present");
assertFalse(a.hasKey("Tot"), "Attribute 'Tot' should no longer be present");
assertTrue(ats.hasDeclaredValueForKey("a"), "Key 'a' should have a declared value.");
assertFalse(ats.hasDeclaredValueForKey("A"), "Key 'A' should not have a declared value due to case sensitivity.");
assertTrue(ats.hasDeclaredValueForKeyIgnoreCase("A"), "Key 'A' should have a declared value ignoring case.");
assertFalse(ats.hasDeclaredValueForKey("c"), "Key 'c' should not have a declared value because its value is null.");
assertFalse(ats.hasDeclaredValueForKey("C"), "Key 'C' should not have a declared value because its value is null.");
assertFalse(ats.hasDeclaredValueForKeyIgnoreCase("C"), "Key 'C' should not have a declared value ignoring case because its value is null.");
assertEquals(expectedSize, attributes.size(), "Size should be 2 after adding regular attributes");
assertEquals(expectedSize, attributes.size(), "Size should still be 2 after adding internal attributes");
