total tests: 11
total asserts: 42
assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii, "ASCII Base Escaping");
assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull, "ASCII Full Escaping");
assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml, "ASCII XHTML Escaping");
assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfFull, "UTF-8 Full Escaping");
assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfMin, "UTF-8 Min Escaping");
assertEquals(text, Entities.unescape(escapedAscii), "Unescaping ASCII Base Escaped Text");
assertEquals(text, Entities.unescape(escapedAsciiFull), "Unescaping ASCII Full Escaped Text");
assertEquals(text, Entities.unescape(escapedAsciiXhtml), "Unescaping ASCII XHTML Escaped Text");
assertEquals(text, Entities.unescape(escapedUtfFull), "Unescaping UTF-8 Full Escaped Text");
assertEquals(text, Entities.unescape(escapedUtfMin), "Unescaping UTF-8 Min Escaped Text");
assertEquals("&#x1d559;", escapedAscii, "ASCII base escape should match expected value");
assertEquals("&hopf;", escapedAsciiFull, "ASCII extended escape should match expected value");
assertEquals(text, escapedUtf, "UTF-8 extended escape should match original text");
assertEquals(un, Entities.unescape(text), "Unescaped text should match expected output");
assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped, "Escaped text should match expected output");
assertEquals(un, Entities.unescape(escaped), "Round-trip unescaping should result in the original text");
assertEquals(ampCodepoint, xhtml.codepointForName("amp"), "Checking codepoint for 'amp'");
assertEquals(gtCodepoint, xhtml.codepointForName("gt"), "Checking codepoint for 'gt'");
assertEquals(ltCodepoint, xhtml.codepointForName("lt"), "Checking codepoint for 'lt'");
assertEquals(quotCodepoint, xhtml.codepointForName("quot"), "Checking codepoint for 'quot'");
assertEquals("amp", xhtml.nameForCodepoint(ampCodepoint), "Checking name for codepoint 38");
assertEquals("gt", xhtml.nameForCodepoint(gtCodepoint), "Checking name for codepoint 62");
assertEquals("lt", xhtml.nameForCodepoint(ltCodepoint), "Checking name for codepoint 60");
assertEquals("quot", xhtml.nameForCodepoint(quotCodepoint), "Checking name for codepoint 34");
assertEquals("≫⃒", Entities.getByName("nGt"), "Check if 'nGt' returns '≫⃒'");
assertEquals("fj", Entities.getByName("fjlig"), "Check if 'fjlig' returns 'fj'");
assertEquals("≫", Entities.getByName("gg"), "Check if 'gg' returns '≫'");
assertEquals("©", Entities.getByName("copy"), "Check if 'copy' returns '©'");
assertEquals("&#x210c1;", escapedAscii, "Check if supplementary character is correctly escaped in ASCII");
assertEquals(text, escapedUtf, "Check if supplementary character is not escaped in UTF-8");
assertEquals("Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©", Entities.unescape(text), "Standard entities should be correctly unescaped");
assertEquals("&0987654321; &unknown", Entities.unescape(text), "Unknown entities should remain unchanged");
assertEquals("Hello &amp= &", Entities.unescape(text, true), "Strict unescaping should handle incomplete entities correctly");
assertEquals("Hello &= &", Entities.unescape(text), "Default unescaping should handle incomplete entities correctly");
assertEquals("Hello &= &", Entities.unescape(text, false), "Non-strict unescaping should handle incomplete entities correctly");
assertEquals(escaped, Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended)), "Escaping special characters should produce the correct HTML entities");
assertEquals(unescaped, Entities.unescape(escaped), "Unescaping HTML entities should produce the correct characters");
assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html(), "HTML content should match the ASCII representation of the entities");
assertEquals("¹²³¼½¾", p.text(), "Text content should match the Unicode representation of the entities");
assertEquals("¹²³¼½¾", p.html(), "HTML content should match the UTF-8 representation of the entities");
assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml(), "HTML attribute value should not escape '<'");
assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml(), "XML attribute value should escape '<'");
