total tests: 13
total asserts: 76
assertEquals(expectedTextNodesCount, textNodes.size(), "The number of text nodes should be 3");
assertEquals("One ", textNodes.get(0).text(), "The first text node should contain 'One '");
assertEquals(" Three ", textNodes.get(1).text(), "The second text node should contain ' Three '");
assertEquals(" Four", textNodes.get(2).text(), "The third text node should contain ' Four'");
assertEquals(expectedTextNodesCount, brElement.textNodes().size(), "The <br> element should have no text nodes");
assertEquals(expectedFinalText, p.text(), "The final text of the paragraph should match the expected value.");
assertEquals(expectedOwnText, p.ownText(), "The own text of the paragraph should match the expected value.");
assertEquals(expectedTextNodesCount, p.textNodes().size(), "The number of text nodes should match the expected count after manipulation.");
assertEquals(expectedScriptDataSize, scriptData.size(), "Script element should contain exactly one data node");
assertEquals(expectedScriptData, scriptData.get(0).getWholeData(), "Script data node content should match 'One Two'");
assertEquals(expectedStyleDataSize, styleData.size(), "Style element should contain exactly one data node");
assertEquals(expectedStyleData, styleData.get(0).getWholeData(), "Style data node content should match 'Three Four'");
assertEquals(expectedPDataSize, pData.size(), "Paragraph element should contain no data nodes");
assertEquals("Two", p2.text(), "The text of the second paragraph should be 'Two'");
assertEquals(expectedSiblingCount, p2.siblingElements().size(), "The second paragraph should have 2 sibling elements");
assertEquals("<p>One</p>", els.get(0).outerHtml(), "The first sibling element should be '<p>One</p>'");
assertEquals("<p>Three</p>", els.get(1).outerHtml(), "The second sibling element should be '<p>Three</p>'");
assertEquals(EXPECTED_CHILDREN_SIZE, div.children().size(), "The number of children elements should be 2");
assertEquals(EXPECTED_FIRST_CHILD_TEXT, div.child(0).text(), "The text of the first child element should be 'One'");
assertEquals(expectedChildNodeCount, div1.childNodeSize(), "Initial child node count of div1 should be 4");
assertEquals(expectedChildNodeCount, children.size(), "Initial child node count of div1 should be 4");
assertEquals(expectedChildNodeCountDiv1, children.size(), "Children list should be empty after moving nodes to div2");
assertEquals(expectedChildNodeCountDiv1, div1.childNodeSize(), "Child node count of div1 should be 0 after moving nodes");
assertEquals(expectedChildNodeCountDiv2, div2.childNodeSize(), "Child node count of div2 should be 4 after moving nodes");
assertEquals(expectedHtml, doc.body().html(), "Document structure should match expected HTML after moving nodes");
assertEquals(expectedChildNodeSize, div2.childNodeSize(), "Initial child node size of div2 should be 2");
assertEquals(expectedDiv1ChildNodeSizeAfterMove, div1.childNodeSize(), "Child node size of div1 after moving elements should be 2");
assertEquals(expectedDiv2ChildNodeSizeAfterInsert, div2.childNodeSize(), "Child node size of div2 after inserting elements should be 4");
assertEquals(expectedSiblingIndexForLastP, p1s.get(1).siblingIndex(), "The second p element should be the last sibling in div2");
assertNull(nodes.get(0).parent(), "Parent of the first span should be null before insertion");
assertEquals(div2, nodes.get(0).parent(), "Parent of the first span should be div2 after insertion");
assertEquals(expectedChildNodeSizeAfterInsert, div2.childNodeSize(), "Child node size of div2 after inserting custom nodes should be 7");
assertEquals(expectedSiblingIndexForFirstSpan, nodes.get(0).siblingIndex(), "The first span should have a sibling index of 3");
assertEquals(expectedSiblingIndexForSecondSpan, nodes.get(1).siblingIndex(), "The second span should have a sibling index of 4");
assertEquals(expectedSiblingIndexForText4, nodes.get(2).siblingIndex(), "The text node should have a sibling index of 5");
assertEquals(expectedDiv1ChildNodeSize, div1.childNodeSize(), "Div1 should still have 4 child nodes after cloning");
assertEquals(expectedDiv2ChildNodeSize, div2.childNodeSize(), "Div2 should have 2 child nodes after inserting cloned elements");
assertEquals(expectedDocumentStructure, TextUtil.stripNewlines(doc.body().html()), "The document structure should match the expected output after insertion");
assertEquals("#id1", divA.cssSelector(), "CSS selector for divA should be #id1");
assertTrue(divA == doc.select(divA.cssSelector()).first(), "Selecting CSS selector for divA should return the same element");
assertEquals("html > body > div:nth-child(2)", divB.cssSelector(), "CSS selector for divB should be html > body > div:nth-child(2)");
assertTrue(divB == doc.select(divB.cssSelector()).first(), "Selecting CSS selector for divB should return the same element");
assertEquals("html > body > div.c1.c2", divC.cssSelector(), "CSS selector for divC should be html > body > div.c1.c2");
assertTrue(divC == doc.select(divC.cssSelector()).first(), "Selecting CSS selector for divC should return the same element");
assertEquals(expectedElementsSize, els.size(), "The number of selected elements should be 8");
assertTrue(e0.hasSameValue(e1), "Element 0 should have the same value as Element 1");
assertTrue(e0.hasSameValue(e4), "Element 0 should have the same value as Element 4");
assertTrue(e0.hasSameValue(e5), "Element 0 should have the same value as Element 5");
assertFalse(e0.equals(e2), "Element 0 should not be equal to Element 2");
assertFalse(e0.hasSameValue(e2), "Element 0 should not have the same value as Element 2");
assertFalse(e0.hasSameValue(e3), "Element 0 should not have the same value as Element 3");
assertFalse(e0.hasSameValue(e6), "Element 0 should not have the same value as Element 6");
assertFalse(e0.hasSameValue(e7), "Element 0 should not have the same value as Element 7");
assertFalse(e0.hashCode() == e2.hashCode(), "Element 0's hash code should not be equal to Element 2's hash code");
assertFalse(e0.hashCode() == e3.hashCode(), "Element 0's hash code should not be equal to Element 3's hash code");
assertFalse(e0.hashCode() == e6.hashCode(), "Element 0's hash code should not be equal to Element 6's hash code");
assertFalse(e0.hashCode() == e7.hashCode(), "Element 0's hash code should not be equal to Element 7's hash code");
assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href"), "The absolute URL for 'One' should be correct");
assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href"), "The absolute URL for 'Two' should be correct");
assertEquals("http://example.com/three.html", els.get(2).absUrl("href"), "The absolute URL for 'Three' should be correct");
assertEquals("http://example2.com/four/", els.get(3).absUrl("href"), "The absolute URL for 'Four' should be correct");
assertEquals("https://example2.com/five/", els.get(4).absUrl("href"), "The absolute URL for 'Five' should be correct");
assertTrue(p.is("p"), "Element should match the selector 'p'");
assertFalse(p.is("div"), "Element should not match the selector 'div'");
assertTrue(p.is("p:has(a)"), "Element should match the selector 'p:has(a)'");
assertFalse(p.is("a"), "Element should not match the selector 'a' as it does not descend");
assertTrue(p.is("p:first-child"), "Element should match the selector 'p:first-child'");
assertFalse(p.is("p:last-child"), "Element should not match the selector 'p:last-child'");
assertTrue(p.is("*"), "Element should match the selector '*'");
assertTrue(p.is("div p"), "Element should match the selector 'div p'");
assertTrue(q.is("p"), "Element should match the selector 'p'");
assertTrue(q.is("p ~ p"), "Element should match the selector 'p ~ p'");
assertTrue(q.is("p + p"), "Element should match the selector 'p + p'");
assertTrue(q.is("p:last-child"), "Element should match the selector 'p:last-child'");
assertFalse(q.is("p a"), "Element should not match the selector 'p a'");
assertFalse(q.is("a"), "Element should not match the selector 'a'");
