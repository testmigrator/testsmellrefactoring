total tests: 20
total asserts: 69
assertEquals("", noBase.absUrl("relHref"), "With no base, 'relHref' should not fallback to href attribute");
assertEquals("http://bar/qux", noBase.absUrl("absHref"), "With no base, 'absHref' should return the absolute URL from the attribute");
assertEquals("http://foo/foo", withBase.absUrl("relHref"), "With base URL, 'relHref' should construct an absolute URL from base + relative path");
assertEquals("http://bar/qux", withBase.absUrl("absHref"), "With base URL, 'absHref' should return the absolute URL from the attribute");
assertEquals("", withBase.absUrl("noval"), "With base URL, non-existent attribute 'noval' should return an empty string");
assertEquals("http://bar/qux", dodgyBase.absUrl("absHref"), "With invalid base URL, 'absHref' should return the absolute URL from the attribute");
assertEquals("", dodgyBase.absUrl("relHref"), "With invalid base URL, 'relHref' should return an empty string");
assertEquals(baseUri, doc.baseUri(), "Document base URI should be set correctly");
assertEquals(baseUri, doc.select("div").first().baseUri(), "Div element base URI should be set correctly");
assertEquals(baseUri, doc.select("p").first().baseUri(), "P element base URI should be set correctly");
assertEquals("/foo", a.attr("href"), "The href attribute should be '/foo'");
assertEquals("https://jsoup.org/foo", a.attr("abs:href"), "The absolute href attribute should be 'https://jsoup.org/foo'");
assertTrue(a.hasAttr("abs:href"), "The element should have the 'abs:href' attribute");
assertEquals("https://jsoup.org/rez/osi_logo.png", img.attr("abs:src"), "The absolute URL of the image src attribute should be correctly resolved");
assertEquals(img.absUrl("src"), img.attr("abs:src"), "The absUrl method should return the same value as the attr method for the absolute URL of the image src attribute");
assertFalse(one.hasAttr("abs:href"), "Element with id=1 should not have an absolute URL attribute");
assertTrue(one.hasAttr("href"), "Element with id=1 should have a relative URL attribute");
assertEquals("", one.absUrl("href"), "Element with id=1 should have an empty absolute URL");
assertTrue(two.hasAttr("abs:href"), "Element with id=2 should have an absolute URL attribute");
assertTrue(two.hasAttr("href"), "Element with id=2 should have a relative URL attribute");
assertEquals("https://jsoup.org/", two.absUrl("href"), "Element with id=2 should have the correct absolute URL");
assertTrue(el.hasAttr("abs:href"), "Element should have 'abs:href' attribute");
assertEquals("odd", el.attr("abs:href"), "Attribute 'abs:href' should have value 'odd'");
assertEquals("file:/etc/password", one.absUrl("href"), "First link should resolve to file:/etc/password");
assertEquals("file:/var/log/messages", two.absUrl("href"), "Second link should resolve to file:/var/log/messages");
assertEquals("http://example.net/foo", link.absUrl("href"), "The absolute URL should use the HTTP scheme from the base URI");
assertEquals("https://example.net/foo", link.absUrl("href"), "The absolute URL should use the HTTPS scheme from the base URI");
assertEquals("https://www.google.com/images/errors/logo_sm.gif", img.attr("abs:src"), "The absolute URL for the image source should use the HTTPS scheme from the base URI");
assertEquals("https://jsoup.org/path/file?foo", a1.absUrl("href"), "A1 absolute URL should be correctly resolved");
assertEquals("https://jsoup.org/path/bar.html?foo", a2.absUrl("href"), "A2 absolute URL should be correctly resolved");
assertEquals("two three", p.text(), "Text content should be 'two three' after removal");
assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()), "HTML content should be '<span>two</span> three' after removal");
assertTrue(p.ownerDocument() == doc, "Element's owner document should be the same as the parsed document");
assertTrue(doc.ownerDocument() == doc, "Document's owner document should be itself");
assertNull(doc.parent(), "Document should not have a parent");
assertTrue(doc == root, "The root of the paragraph should be the document");
assertNull(root.parent(), "The root node should have no parent");
assertTrue(doc.root() == doc, "The root of the document should be the document itself");
assertTrue(doc.root() == doc.ownerDocument(), "The root of the document should equal its owner document");
assertTrue(standAlone.parent() == null, "A standalone element should have no parent");
assertTrue(standAlone.root() == standAlone, "A standalone element should be its own root");
assertTrue(standAlone.ownerDocument() == null, "A standalone element should have no owner document");
assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html(), "Check if the new element is inserted before the <b> tag");
assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html(), "Check if the string is inserted before the <b> tag after the element insertion");
assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html(), "Adding 'em' element after 'b' should result in the correct HTML structure");
assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html(), "Adding string '<i>five</i>' after 'b' should result in the correct HTML structure");
assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html()), "The HTML content after unwrapping the span should match the expected output");
assertTrue(node == null, "The node returned from unwrap should be null since there were no children");
assertEquals(expectedSiblingIndex, node.siblingIndex(), "Check if the sibling index of an orphan node is 0");
assertEquals(expectedSiblingNodesSize, node.siblingNodes().size(), "Check if the size of sibling nodes of an orphan node is 0");
assertNull(node.previousSibling(), "Check if the previous sibling of an orphan node is null");
assertNull(node.nextSibling(), "Check if the next sibling of an orphan node is null");
assertEquals(expectedSiblingElementsSize, el.siblingElements().size(), "Check if the size of sibling elements of an orphan element is 0");
assertNull(el.previousElementSibling(), "Check if the previous element sibling of an orphan element is null");
assertNull(el.nextElementSibling(), "Check if the next element sibling of an orphan element is null");
assertEquals("Two", p2.text(), "The text content of the second paragraph should be 'Two'");
assertEquals(expectedSiblingCount, p2.siblingNodes().size(), "The second paragraph should have 2 sibling nodes");
assertEquals("<p>One</p>", nodes.get(0).outerHtml(), "The first sibling node should be '<p>One</p>'");
assertEquals("<p>Three</p>", nodes.get(1).outerHtml(), "The second sibling node should be '<p>Three</p>'");
assertEquals(expectedSize, divChildren.size(), "The size of the copied child nodes should match the expected size.");
assertEquals("Text 1 ", tn1.text(), "The text of the original TextNode should remain unchanged after updating the copied TextNode.");
assertEquals(expectedHtml, TextUtil.stripNewlines(doc.body().html()), "The HTML content of the document should match the expected structure after inserting the copied child nodes.");
assertTrue(el.hasClass("foo"), "The element should have class 'foo'");
assertTrue(elClone.hasClass("foo"), "The cloned element should have class 'foo'");
assertEquals("Text", elClone.text(), "The text of the cloned element should be 'Text'");
assertFalse(el.hasClass("foo"), "The element should no longer have class 'foo' after removal");
assertEquals("None", el.text(), "The text of the element should be 'None' after modification");
assertTrue(elClone.hasClass("foo"), "The cloned element should still have class 'foo' after modifying the original element");
assertEquals("Text", elClone.text(), "The text of the cloned element should still be 'Text' after modifying the original element");
